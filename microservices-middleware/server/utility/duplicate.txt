microservices-middleware/server/utility/screenPermission.js:4:hardcoded string:        ignoreDownPaymentCheck: "PAYMENT_DOWN_PAYMENT_IGNORE_CHECK",
microservices-middleware/server/utility/screenPermission.js:5:hardcoded string:        allowCFPayment: "PAYMENT_CF_ALLOW",
microservices-middleware/server/utility/screenPermission.js:6:hardcoded string:        allowTicketSwap: "PAYMENT_TICKET_SWAP_ALLOW",
microservices-middleware/server/utility/screenPermission.js:7:hardcoded string:        allowRepunch: "PAYMENT_REPUNCH_ALLOW"
microservices-middleware/server/utility/screenPermission.js:10:hardcoded string:        ignoreOtpCheck: "ORDER_OTP_IGNORE_CHECK"
microservices-middleware/server/utility/screenPermission.js:13:hardcoded string:        ignorePriceRangeCheck: "PRODUCT_PRICE_RANGE_IGNORE_CHECK",
microservices-middleware/server/utility/screenPermission.js:14:hardcoded string:        ignoreSiblingCountCheck: "PRODUCT_SIBLING_COUNT_IGNORE_CHECK",
microservices-middleware/server/utility/screenPermission.js:15:hardcoded string:        ignoreValidityCheck: "PRODUCT_VALIDITY_ALLOW_EXTENDED",
microservices-middleware/server/utility/screenPermission.js:16:hardcoded string:        acceptK3Product: "PRODUCT_K3_ALLOW",
microservices-middleware/server/utility/screenPermission.js:17:hardcoded string:        allowProductCombinationSelection: "PRODUCT_COMBINATION_SELECTION_ALLOW",
microservices-middleware/server/utility/screenPermission.js:18:hardcoded string:        allowSeperateProductSelection: "PRODUCT_SEPERATE_SELECTION_ALLOW",
microservices-middleware/server/utility/screenPermission.js:21:hardcoded string:        ignorePhoneDuplicityCheck: "DETAILS_PHONE_IGNORE_CHECK",
microservices-middleware/server/utility/screenPermission.js:22:hardcoded string:        ignoreEmailDuplicityCheck: "DETAILS_EMAIL_IGNORE_CHECK",
microservices-middleware/server/utility/screenPermission.js:25:hardcoded string:        allownMultipleOrderOnSameProspectId: "LS_PROSPECT_ID_IGNORE_CHECK"
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:7:hardcoded variable:const specialScholarshipConfigEnum = {
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:8:hardcoded string:    "A-10TH_AGGREGATE-1": 40,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:9:hardcoded string:    "A-10TH_AGGREGATE-2": 30,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:10:hardcoded string:    "A-10TH_AGGREGATE-3": 20,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:11:hardcoded string:    "A-10TH_AGGREGATE-4": 40,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:12:hardcoded string:    "A-10TH_AGGREGATE-5": 30,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:13:hardcoded string:    "A-10TH_AGGREGATE-6": 20,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:14:hardcoded string:    "A-10TH_AGGREGATE-7": 10,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:16:hardcoded string:    "A-9TH_AGGREGATE-1": {
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:17:hardcoded string:        "ARF": 30,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:18:hardcoded string:        "ARM": 40,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:19:hardcoded string:        "ARE": 40
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:21:hardcoded string:    "A-9TH_AGGREGATE-2": 30,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:22:hardcoded string:    "A-9TH_AGGREGATE-3": 20,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:23:hardcoded string:    "A-9TH_AGGREGATE-4": 40,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:24:hardcoded string:    "A-9TH_AGGREGATE-5": 30,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:25:hardcoded string:    "A-9TH_AGGREGATE-6": 20,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:26:hardcoded string:    "A-9TH_AGGREGATE-7": 10,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:28:hardcoded string:    "A-12TH_AGGREGATE-1": 40,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:29:hardcoded string:    "A-12TH_AGGREGATE-2": 30,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:30:hardcoded string:    "A-12TH_AGGREGATE-3": 20,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:32:hardcoded string:    "A-JEE_MAIN_RANK-1": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:33:hardcoded string:    "A-JEE_MAIN_RANK-2": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:34:hardcoded string:    "A-JEE_MAIN_RANK-3": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:35:hardcoded string:    "A-JEE_MAIN_RANK-4": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:36:hardcoded string:    "A-JEE_MAIN_RANK-5": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:37:hardcoded string:    "A-JEE_MAIN_RANK-6": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:38:hardcoded string:    "A-JEE_MAIN_RANK-7": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:39:hardcoded string:    "A-JEE_MAIN_RANK-8": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:40:hardcoded string:    "A-JEE_MAIN_RANK-9": 90,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:41:hardcoded string:    "A-JEE_MAIN_RANK-10": 90,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:42:hardcoded string:    "A-JEE_MAIN_RANK-11": 80,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:43:hardcoded string:    "A-JEE_MAIN_RANK-12": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:44:hardcoded string:    "A-JEE_MAIN_RANK-13": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:45:hardcoded string:    "A-JEE_MAIN_RANK-14": 90,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:46:hardcoded string:    "A-JEE_MAIN_RANK-15": 90,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:47:hardcoded string:    "A-JEE_MAIN_RANK-16": 90,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:49:hardcoded string:    "A-JEE_ADVANCE_RANK-1": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:50:hardcoded string:    "A-JEE_ADVANCE_RANK-2": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:51:hardcoded string:    "A-JEE_ADVANCE_RANK-3": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:52:hardcoded string:    "A-JEE_ADVANCE_RANK-4": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:53:hardcoded string:    "A-JEE_ADVANCE_RANK-5": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:54:hardcoded string:    "A-JEE_ADVANCE_RANK-6": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:55:hardcoded string:    "A-JEE_ADVANCE_RANK-7": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:56:hardcoded string:    "A-JEE_ADVANCE_RANK-8": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:57:hardcoded string:    "A-JEE_ADVANCE_RANK-9": 90,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:58:hardcoded string:    "A-JEE_ADVANCE_RANK-10": 90,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:60:hardcoded string:    "A-NEET_MARKS-1": 50,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:61:hardcoded string:    "A-NEET_MARKS-2": 45,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:62:hardcoded string:    "A-NEET_MARKS-3": 35,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:63:hardcoded string:    "A-NEET_MARKS-4": 25,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:65:hardcoded string:    "A-JEE_MAIN_SCORE-1": 30,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:66:hardcoded string:    "A-JEE_MAIN_SCORE-2": 20,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:67:hardcoded string:    "A-JEE_MAIN_SCORE-3": 15,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:69:hardcoded string:    "A-JEE_ADVANCE_SCORE-1": 50,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:70:hardcoded string:    "A-JEE_ADVANCE_SCORE-2": 45,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:71:hardcoded string:    "A-JEE_ADVANCE_SCORE-3": 35,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:72:hardcoded string:    "A-JEE_ADVANCE_SCORE-4": 25,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:74:hardcoded string:    "A-NEET_RANK-1": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:75:hardcoded string:    "A-NEET_RANK-2": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:76:hardcoded string:    "A-NEET_RANK-3": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:77:hardcoded string:    "A-NEET_RANK-4": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:78:hardcoded string:    "A-NEET_RANK-5": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:79:hardcoded string:    "A-NEET_RANK-6": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:80:hardcoded string:    "A-NEET_RANK-7": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:81:hardcoded string:    "A-NEET_RANK-8": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:82:hardcoded string:    "A-NEET_RANK-9": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:83:hardcoded string:    "A-NEET_RANK-10": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:84:hardcoded string:    "A-NEET_RANK-11": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:85:hardcoded string:    "A-NEET_RANK-12": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:86:hardcoded string:    "A-NEET_RANK-13": 90,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:88:hardcoded string:    "A-OLYMPIADS-1": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:89:hardcoded string:    "A-OLYMPIADS-2": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:90:hardcoded string:    "A-OLYMPIADS-3": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:91:hardcoded string:    "A-OLYMPIADS-4": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:92:hardcoded string:    "A-OLYMPIADS-5": 75,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:93:hardcoded string:    "A-OLYMPIADS-6": 50,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:95:hardcoded string:    "B-AAKASH_STUDENT-1": 15,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:96:hardcoded string:    "B-AAKASH_STUDENT-2": 3000,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:97:hardcoded string:    "B-AAKASH_STUDENT-3": 2000,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:98:hardcoded string:    "B-AAKASH_STUDENT-4": 2000,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:99:hardcoded string:    "B-AAKASH_STUDENT-5": 10,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:100:hardcoded string:    "B-AAKASH_STUDENT-6": 5,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:102:hardcoded string:    "C-AAKASH_SIBLING-1": 4, //new scholarshipUpdate Feb
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:103:hardcoded string:    "C-AAKASH_SIBLING-2": 0,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:105:hardcoded string:    "C-PARENTS_DEFENCE-1": 10,  //new scholarshipUpdate Feb
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:106:hardcoded string:    "C-PARENTS_DEFENCE-2": 0,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:108:hardcoded string:    "C-PARENT_SINGLE_MOTHER-1": 6, //new scholarshipUpdate Feb
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:109:hardcoded string:    "C-PARENT_SINGLE_MOTHER-2": 0,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:111:hardcoded string:    "C-PARENT_MARTYR-1": 100,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:112:hardcoded string:    "C-PARENT_MARTYR-2": 0,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:114:hardcoded string:    "D-BYJU_STUDENT-1": 3,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:115:hardcoded string:    "D-BYJU_STUDENT-2": 0,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:117:hardcoded string:    "D-BYJU_SIBLING-1": 3,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:118:hardcoded string:    "D-BYJU_SIBLING-2": 0,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:120:hardcoded string:    "D-PARENTS_FRONTLINE-1": 5,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:121:hardcoded string:    "D-PARENTS_FRONTLINE-2": 0,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:123:hardcoded string:    "D-HOUSEHOLD_INCOME-1": 7,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:124:hardcoded string:    "D-HOUSEHOLD_INCOME-2": 5,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:125:hardcoded string:    "D-HOUSEHOLD_INCOME-3": 3,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:127:hardcoded string:    "D-CO_CURRICULAR_SPORTS-1": 3,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:128:hardcoded string:    "D-CO_CURRICULAR_SPORTS-2": 2,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:129:hardcoded string:    "D-CO_CURRICULAR_SPORTS-3": 1,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:131:hardcoded string:    "D-CO_CURRICULAR_LITERARY-1": 3,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:132:hardcoded string:    "D-CO_CURRICULAR_LITERARY-2": 2,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:133:hardcoded string:    "D-CO_CURRICULAR_LITERARY-3": 1,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:135:hardcoded string:    "D-CO_CURRICULAR_CULTURAL-1": 3,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:136:hardcoded string:    "D-CO_CURRICULAR_CULTURAL-2": 2,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:137:hardcoded string:    "D-CO_CURRICULAR_CULTURAL-3": 1,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:139:hardcoded string:    "D-CO_CURRICULAR_ACADEMIC-1": 7,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:140:hardcoded string:    "D-CO_CURRICULAR_ACADEMIC-2": 5,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:141:hardcoded string:    "D-CO_CURRICULAR_ACADEMIC-3": 3,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:143:hardcoded string:    "D-SCHOOL_OFFICE_BEARER-1": 2,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:144:hardcoded string:    "D-SCHOOL_OFFICE_BEARER-2": 0,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:146:hardcoded string:    "D-PARENTS_TEACHERS-1": 5,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:147:hardcoded string:    "D-PARENTS_TEACHERS-2": 0,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:149:hardcoded string:    "D-REFERENCE_1-1": 3,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:150:hardcoded string:    "D-REFERENCE_1-2": 0,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:152:hardcoded string:    "D-REFERENCE_2-1": 3,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:153:hardcoded string:    "D-REFERENCE_2-2": 0,
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:156:hardcoded string:    EXAM_TECH_SCHOLARSHIPS: ["A-OLYMPIADS-1", "A-OLYMPIADS-2"],
microservices-middleware/server/utility/aakashSpecialScholarshipEnum.js:157:hardcoded string:    ADMISSION_SCHOLARSHIPS: ["A-OLYMPIADS-2"]
microservices-middleware/server/utility/inventoryConfig.js:1:hardcoded variable:const config = [
microservices-middleware/server/utility/inventoryConfig.js:3:hardcoded string:        name: "Inventory Config",
microservices-middleware/server/utility/inventoryConfig.js:4:hardcoded string:        formattedName: "INVENTORY_CONFIGURATION",
microservices-middleware/server/utility/leadsquaredUtility.js:1:hardcoded object:const { get } = require('lodash');
microservices-middleware/server/utility/leadsquaredUtility.js:2:hardcoded file path:const jwt = require('jwt-simple');
microservices-middleware/server/utility/leadsquaredUtility.js:3:hardcoded file path:const request = require('request-promise');
microservices-middleware/server/utility/leadsquaredUtility.js:4:hardcoded file path:const moment = require('moment');
microservices-middleware/server/utility/leadsquaredUtility.js:5:hardcoded file path:const HttpStatus = require('http-status-codes');
microservices-middleware/server/utility/leadsquaredUtility.js:7:hardcoded file path:const config = require("../config");
microservices-middleware/server/utility/leadsquaredUtility.js:8:hardcoded file path:const AuthenticationDetail = require('../models/AuthenticationDetail.js');
microservices-middleware/server/utility/leadsquaredUtility.js:9:hardcoded object:const { getFormattedUserEmail } = require('../lib/featureHelper');
microservices-middleware/server/utility/leadsquaredUtility.js:11:hardcoded variable:const authenticateLeadsquaredUser = async (lsDetails) => {
microservices-middleware/server/utility/leadsquaredUtility.js:12:hardcoded object:    const { accessKey, secretKey, accountNumber, lsBaseUrl, jwtSecretKey } = lsDetails;
microservices-middleware/server/utility/leadsquaredUtility.js:13:hardcoded object:    const uri = `${lsBaseUrl}/UserByAccessKey.Get?accessKey=${accessKey}&secretKey=${secretKey}`;
microservices-middleware/server/utility/leadsquaredUtility.js:14:hardcoded string:    const disableLsAuthentication = get(config, 'featureCheck.disableLsAuthentication');
microservices-middleware/server/utility/leadsquaredUtility.js:19:hardcoded string:            let loggedInEmailId = "";
microservices-middleware/server/utility/leadsquaredUtility.js:20:hardcoded string:            let userEmail = "";
microservices-middleware/server/utility/leadsquaredUtility.js:21:hardcoded string:            let leadsquaredUserId = "";
microservices-middleware/server/utility/leadsquaredUtility.js:22:hardcoded string:            let loginValidity = "";
microservices-middleware/server/utility/leadsquaredUtility.js:24:hardcoded string:            if (disableLsAuthentication == "false" || !disableLsAuthentication) {
microservices-middleware/server/utility/leadsquaredUtility.js:25:hardcoded number:                const getUserByAccessKey = await leadsquaredRecursiveGet(uri, 0);
microservices-middleware/server/utility/leadsquaredUtility.js:27:hardcoded variable:                    const userIdFromAccessKey = getUserByAccessKey.Id;
microservices-middleware/server/utility/leadsquaredUtility.js:30:hardcoded string:                    loginValidity = Math.floor(moment().add(30, 'minutes') / 1000);
microservices-middleware/server/utility/leadsquaredUtility.js:33:hardcoded object:                    await AuthenticationDetail.findOneAndUpdate({ leadsquaredUserId: userIdFromAccessKey }, {
microservices-middleware/server/utility/leadsquaredUtility.js:40:hardcoded object:                    }, { upsert: true }).exec();
microservices-middleware/server/utility/leadsquaredUtility.js:44:hardcoded object:                const details = await AuthenticationDetail.findOne({ accessKey, secretKey, accountNumber });
microservices-middleware/server/utility/leadsquaredUtility.js:46:hardcoded string:                    throw new Error("User does not exists. Authentication failed")
microservices-middleware/server/utility/leadsquaredUtility.js:49:hardcoded string:                userEmail = get(details, "emailId", "");
microservices-middleware/server/utility/leadsquaredUtility.js:50:hardcoded string:                leadsquaredUserId = get(details, "leadsquaredUserId", "");
microservices-middleware/server/utility/leadsquaredUtility.js:51:hardcoded string:                loginValidity = Math.floor(moment().add(30, 'minutes') / 1000);
microservices-middleware/server/utility/leadsquaredUtility.js:53:hardcoded object:                await AuthenticationDetail.findOneAndUpdate({ accessKey, secretKey, accountNumber, emailId: userEmail }, {
microservices-middleware/server/utility/leadsquaredUtility.js:55:hardcoded object:                }, { upsert: true }).exec();
microservices-middleware/server/utility/leadsquaredUtility.js:62:hardcoded variable:            const token = jwt.encode({
microservices-middleware/server/utility/leadsquaredUtility.js:74:hardcoded string:            console.log("User not authenticated : ", getUserByAccessKey, accessKey, secretKey);
microservices-middleware/server/utility/leadsquaredUtility.js:85:hardcoded variable:const leadsquaredRecursiveGet = async (uri, count) => {
microservices-middleware/server/utility/leadsquaredUtility.js:87:hardcoded number:        count = 0;
microservices-middleware/server/utility/leadsquaredUtility.js:89:hardcoded variable:    const reqOptions = {
microservices-middleware/server/utility/leadsquaredUtility.js:91:hardcoded string:        method: 'GET',
microservices-middleware/server/utility/leadsquaredUtility.js:97:hardcoded variable:        const response = await request(reqOptions);
microservices-middleware/server/utility/leadsquaredUtility.js:102:hardcoded string:            console.log("retrying", count);
microservices-middleware/server/utility/leadsquaredUtility.js:104:hardcoded number:            await sleep(2000);
microservices-middleware/server/utility/leadsquaredUtility.js:105:hardcoded number:            return await leadsquaredRecursiveGet(uri, count + 1);
microservices-middleware/server/utility/leadsquaredUtility.js:110:hardcoded string:        console.log("GET REQUEST ERROR : " + uri);
microservices-middleware/server/utility/leadsquaredUtility.js:111:hardcoded string:        throw new Error("Error in Leadsquared GET Request: ", err.stack || err.message || err);
microservices-middleware/server/utility/leadsquaredUtility.js:115:hardcoded string:const getLeadCreatedByEmailId = async (createdById, accountNumber = "") => {
microservices-middleware/server/utility/leadsquaredUtility.js:116:hardcoded string:    const url = get(config, 'leadsquaredRetrieveUser.url');
microservices-middleware/server/utility/leadsquaredUtility.js:117:hardcoded string:    const leadsquaredRetrieveUserDetails = get(config, 'leadsquaredRetrieveUser', {});
microservices-middleware/server/utility/leadsquaredUtility.js:119:hardcoded array:    const accessKey = leadsquaredRetrieveUserDetails[accountNumber].accessKey;
microservices-middleware/server/utility/leadsquaredUtility.js:120:hardcoded array:    const secretKey = leadsquaredRetrieveUserDetails[accountNumber].secretKey;
microservices-middleware/server/utility/leadsquaredUtility.js:125:hardcoded variable:    const result = {
microservices-middleware/server/utility/leadsquaredUtility.js:127:hardcoded string:        message: "Retrive API failed",
microservices-middleware/server/utility/leadsquaredUtility.js:128:hardcoded string:        emailId: ""
microservices-middleware/server/utility/leadsquaredUtility.js:131:hardcoded variable:    const reqOptions = {
microservices-middleware/server/utility/leadsquaredUtility.js:132:hardcoded object:        uri: `${url}?accessKey=${accessKey}&secretKey=${secretKey}&userId=${createdById}`,
microservices-middleware/server/utility/leadsquaredUtility.js:133:hardcoded string:        method: 'GET',
microservices-middleware/server/utility/leadsquaredUtility.js:139:hardcoded variable:        const response = await request(reqOptions);
microservices-middleware/server/utility/leadsquaredUtility.js:142:hardcoded string:            result.status = "success";
microservices-middleware/server/utility/leadsquaredUtility.js:143:hardcoded string:            result.emailId = get(response, 'body[0].EmailAddress', "");
microservices-middleware/server/utility/leadsquaredUtility.js:144:hardcoded string:            result.leadCreatedAt = new Date(get(response, 'body[0].CreatedOn', ""));
microservices-middleware/server/utility/leadsquaredUtility.js:145:hardcoded string:            result.createdByRole = get(response, 'body[0].Role', "");
microservices-middleware/server/utility/leadsquaredUtility.js:146:hardcoded number:            // result.leadCreatedAt =  response.body[0].CreatedOn
microservices-middleware/server/utility/leadsquaredUtility.js:149:hardcoded string:            result.message = "too many request"
microservices-middleware/server/utility/leadsquaredUtility.js:151:hardcoded string:            result.message = "internal server error"
microservices-middleware/server/utility/leadsquaredUtility.js:155:hardcoded string:        console.log("GET REQUEST ERROR : " + url);
microservices-middleware/server/utility/errorLogUtility.js:1:hardcoded object:const { isEmpty } = require('lodash');
microservices-middleware/server/utility/errorLogUtility.js:3:hardcoded variable:const getEmptyProps = (obj) => {
microservices-middleware/server/utility/errorLogUtility.js:4:hardcoded array:    let emptyProps = []
microservices-middleware/server/utility/errorLogUtility.js:6:hardcoded array:        const val = obj[key]
microservices-middleware/server/utility/errorLogUtility.js:7:hardcoded string:        const isEmptyVal = typeof val === "object" ? isEmpty(val) : (val == 0) ? false : !val
microservices-middleware/server/utility/orderConverterUtility.js:1:hardcoded object:const { get, isEmpty, flattenDeep, map, concat, remove, isArray } = require('lodash');
microservices-middleware/server/utility/orderConverterUtility.js:2:hardcoded object:const { callOrderhiveApi } = require('./externalApiUtility');
microservices-middleware/server/utility/orderConverterUtility.js:3:hardcoded file path:const config = require('../config');
microservices-middleware/server/utility/orderConverterUtility.js:5:hardcoded variable:const getOldConvertedOrder = async (newDraftOrder) => {
microservices-middleware/server/utility/orderConverterUtility.js:6:hardcoded object:    const order = { ...newDraftOrder };
microservices-middleware/server/utility/orderConverterUtility.js:14:hardcoded variable:    const lineOrderItems = getLineOrderItems(order);
microservices-middleware/server/utility/orderConverterUtility.js:15:hardcoded variable:    const paymentDetails = getPaymentDetails(order);
microservices-middleware/server/utility/orderConverterUtility.js:16:hardcoded variable:    const coupon = getCouponDetails(order);
microservices-middleware/server/utility/orderConverterUtility.js:17:hardcoded variable:    const capitalFloatDetails = getCapitalFloatDetails(order, lineOrderItems);
microservices-middleware/server/utility/orderConverterUtility.js:18:hardcoded variable:    const nachDetails = getNachDetails(order, lineOrderItems);
microservices-middleware/server/utility/orderConverterUtility.js:19:hardcoded variable:    const emiDetails = getEmiDetails(order, lineOrderItems);
microservices-middleware/server/utility/orderConverterUtility.js:20:hardcoded variable:    const inventory = getInventoryDetails(order);
microservices-middleware/server/utility/orderConverterUtility.js:21:hardcoded variable:    const selectedInventory = getSelectedInventory(order);
microservices-middleware/server/utility/orderConverterUtility.js:22:hardcoded variable:    const comments = getComments(order);
microservices-middleware/server/utility/orderConverterUtility.js:23:hardcoded variable:    const orderType = getOrderType(lineOrderItems);
microservices-middleware/server/utility/orderConverterUtility.js:24:hardcoded string:    const orderPunchingType = get(order, "orderPunchingType", "");
microservices-middleware/server/utility/orderConverterUtility.js:25:hardcoded string:    const originalOrderId = get(order, "originalOrderId", "");
microservices-middleware/server/utility/orderConverterUtility.js:26:hardcoded string:    const leadDetails = getLeadDetails(get(order, "leadDetails", {}), get(order, "customerDetails.parentMobileNo", ""));
microservices-middleware/server/utility/orderConverterUtility.js:27:hardcoded string:    // const studentProfileDetails = get(order, "studentProfileDetails", {});
microservices-middleware/server/utility/orderConverterUtility.js:29:hardcoded variable:    const convertedOrder = {
microservices-middleware/server/utility/orderConverterUtility.js:31:hardcoded string:        otp: get(order, "otpDetails.otp"),
microservices-middleware/server/utility/orderConverterUtility.js:32:hardcoded string:        otpCreatedAt: get(order, "otpDetails.createdAt"),
microservices-middleware/server/utility/orderConverterUtility.js:33:hardcoded string:        otpMessage: get(order, "otpDetails.message"),
microservices-middleware/server/utility/orderConverterUtility.js:34:hardcoded string:        orderPunchedBy: get(order, 'leadDetails.loggedInEmailId'),
microservices-middleware/server/utility/orderConverterUtility.js:35:hardcoded string:        orderPunchedByRole: get(order, 'leadDetails.orderPunchedByRole'),
microservices-middleware/server/utility/orderConverterUtility.js:36:hardcoded string:        orderPunchedForRole: get(order, 'salesDetails.directSalesByRole', ""),
microservices-middleware/server/utility/orderConverterUtility.js:37:hardcoded string:        sales_person_id: get(order, "salesDetails.directSalesById"),
microservices-middleware/server/utility/orderConverterUtility.js:38:hardcoded string:        sales_closed_by_user_id: get(order, "salesDetails.directSalesById"),
microservices-middleware/server/utility/orderConverterUtility.js:39:hardcoded string:        direct_sales_appointment_by_id: get(order, "salesDetails.salesAppointmentById"),
microservices-middleware/server/utility/orderConverterUtility.js:40:hardcoded string:        type_of_sales: get(order, "salesDetails.typeOfSales"),
microservices-middleware/server/utility/orderConverterUtility.js:41:hardcoded string:        leadsquaredProspectId: get(order, "leadDetails.prospectId"),
microservices-middleware/server/utility/orderConverterUtility.js:42:hardcoded string:        leadsquaredAccountNumber: get(order, "leadDetails.accountNumber"),
microservices-middleware/server/utility/orderConverterUtility.js:44:hardcoded string:        qrCodeInfo: get(order, "qrCodeDetails"),
microservices-middleware/server/utility/orderConverterUtility.js:45:hardcoded string:        isImmediateDeliveryPossible: get(order, "isImmediateDelivery", false),
microservices-middleware/server/utility/orderConverterUtility.js:46:hardcoded string:        lineOrderItems: lineOrderItems,//[...get(lineOrderItems, "parentOrderItems", [])], // Pass only PARENT line items
microservices-middleware/server/utility/orderConverterUtility.js:47:hardcoded string:        SalesOrderItem: get(lineOrderItems, "parentOrderItems", []),
microservices-middleware/server/utility/orderConverterUtility.js:53:hardcoded string:        contactDetails: get(order, "contactDetails"),
microservices-middleware/server/utility/orderConverterUtility.js:62:hardcoded string:        cashbackDetails: get(order, "cashbackDetails", { unutilizedCashbacks: [] }),
microservices-middleware/server/utility/orderConverterUtility.js:66:hardcoded string:        discountValue: get(order, 'productDetails.discountedPrice', ""),
microservices-middleware/server/utility/orderConverterUtility.js:67:hardcoded string:        voucherDetails: get(order, 'voucherDetails', {})
microservices-middleware/server/utility/orderConverterUtility.js:72:hardcoded variable:const getLeadDetails = (leadDetails, primaryMobile) => {
microservices-middleware/server/utility/orderConverterUtility.js:74:hardcoded string:        studentMobile: get(leadDetails, "studentMobile", ""),
microservices-middleware/server/utility/orderConverterUtility.js:75:hardcoded string:        createdById: get(leadDetails, "createdById", ""),
microservices-middleware/server/utility/orderConverterUtility.js:76:hardcoded string:        createdByEmailId: get(leadDetails, "createdByEmailId", ""),
microservices-middleware/server/utility/orderConverterUtility.js:77:hardcoded string:        isLeadMobileUsed: checkLeadNumber(get(leadDetails, "studentMobile", ""), primaryMobile),
microservices-middleware/server/utility/orderConverterUtility.js:78:hardcoded string:        isEligibleForEvalution: get(leadDetails, "isEligibleForEvalution", "")
microservices-middleware/server/utility/orderConverterUtility.js:82:hardcoded variable:const checkLeadNumber = (studentMobile, primaryMobile) => {
microservices-middleware/server/utility/orderConverterUtility.js:83:hardcoded string:    const mobile = studentMobile.split("-");
microservices-middleware/server/utility/orderConverterUtility.js:84:hardcoded number:    if (mobile.length > 1) {
microservices-middleware/server/utility/orderConverterUtility.js:85:hardcoded number:        return mobile[1] === primaryMobile
microservices-middleware/server/utility/orderConverterUtility.js:87:hardcoded number:        return mobile[0] === primaryMobile
microservices-middleware/server/utility/orderConverterUtility.js:91:hardcoded variable:const validateCompatibiltyWithOldOrderModel = (order) => {
microservices-middleware/server/utility/orderConverterUtility.js:93:hardcoded string:    const allowedMulitplePayments = ["capital_float"];
microservices-middleware/server/utility/orderConverterUtility.js:94:hardcoded string:    const emiPayments = get(order, "paymentDetails.payments", []).filter(p => p.type.toLowerCase() === "emi").map(ele => ele.provider.toLowerCase());
microservices-middleware/server/utility/orderConverterUtility.js:95:hardcoded variable:    const otherPayments = emiPayments.map(ele => !allowedMulitplePayments.includes(ele));
microservices-middleware/server/utility/orderConverterUtility.js:96:hardcoded number:    if (otherPayments > 0) {
microservices-middleware/server/utility/orderConverterUtility.js:97:hardcoded string:        const msg = otherPayments.join(" ,");
microservices-middleware/server/utility/orderConverterUtility.js:98:hardcoded object:        throw new Error(`Order converion faild. Multiple payments not allowed for: ${msg}`);
microservices-middleware/server/utility/orderConverterUtility.js:102:hardcoded string:    const tablets = get(order, "productDetails.students", []);
microservices-middleware/server/utility/orderConverterUtility.js:103:hardcoded variable:    const flattenTablets = flattenDeep(tablets);
microservices-middleware/server/utility/orderConverterUtility.js:104:hardcoded number:    if (flattenTablets.length > 1) {
microservices-middleware/server/utility/orderConverterUtility.js:109:hardcoded variable:const getCouponDetails = (order) => {
microservices-middleware/server/utility/orderConverterUtility.js:110:hardcoded string:    const coupon = get(order, "productDetails.coupon", {});
microservices-middleware/server/utility/orderConverterUtility.js:112:hardcoded string:        coupon_applied: get(coupon, "isCouponApplied", false),
microservices-middleware/server/utility/orderConverterUtility.js:113:hardcoded string:        coupon_val: get(coupon, "amount", 0),
microservices-middleware/server/utility/orderConverterUtility.js:114:hardcoded string:        coupon_Id: get(coupon, "couponCode", "")
microservices-middleware/server/utility/orderConverterUtility.js:118:hardcoded variable:const getOldProvider = (newProvider) => {
microservices-middleware/server/utility/orderConverterUtility.js:123:hardcoded variable:    const providerMap = {
microservices-middleware/server/utility/orderConverterUtility.js:124:hardcoded string:        CAPITAL_FLOAT: "Capital Float",
microservices-middleware/server/utility/orderConverterUtility.js:125:hardcoded string:        PAYU: "PayU",
microservices-middleware/server/utility/orderConverterUtility.js:126:hardcoded string:        CHEQUE: "Cheque",
microservices-middleware/server/utility/orderConverterUtility.js:127:hardcoded string:        ICR: "Cash Deposit",
microservices-middleware/server/utility/orderConverterUtility.js:128:hardcoded string:        CHALLAN: "Cash Deposit",
microservices-middleware/server/utility/orderConverterUtility.js:129:hardcoded string:        PAYTM: "Paytm",
microservices-middleware/server/utility/orderConverterUtility.js:130:hardcoded string:        CITRUS_USD: "Citrus USD",
microservices-middleware/server/utility/orderConverterUtility.js:131:hardcoded string:        CITRUS_AED: "Citrus AED",
microservices-middleware/server/utility/orderConverterUtility.js:132:hardcoded string:        MPESA: "Mpesa",
microservices-middleware/server/utility/orderConverterUtility.js:133:hardcoded string:        CASH_CARE: "Cash Care",
microservices-middleware/server/utility/orderConverterUtility.js:134:hardcoded string:        PINE_LABS: "Pine Labs",
microservices-middleware/server/utility/orderConverterUtility.js:135:hardcoded string:        CASH_ON_DELIVERY: "Cash On Delivery",
microservices-middleware/server/utility/orderConverterUtility.js:136:hardcoded string:        BAJAJ: 'Bajaj',
microservices-middleware/server/utility/orderConverterUtility.js:137:hardcoded string:        SCR: 'Cash Deposit'
microservices-middleware/server/utility/orderConverterUtility.js:139:hardcoded array:    return providerMap[newProvider] ? providerMap[newProvider] : newProvider;
microservices-middleware/server/utility/orderConverterUtility.js:142:hardcoded variable:const getCampaignDetails = (order) => {
microservices-middleware/server/utility/orderConverterUtility.js:143:hardcoded object:    const { campaignDetails } = order;
microservices-middleware/server/utility/orderConverterUtility.js:145:hardcoded string:        sourceCampaign: get(campaignDetails, 'SourceCampaign', ''),
microservices-middleware/server/utility/orderConverterUtility.js:146:hardcoded string:        sourceOfLead: get(campaignDetails, 'SourceOfLead', ''),
microservices-middleware/server/utility/orderConverterUtility.js:147:hardcoded string:        leadSource: get(campaignDetails, 'LeadSource', ''),
microservices-middleware/server/utility/orderConverterUtility.js:148:hardcoded string:        sourceMedium: get(campaignDetails, 'SourceMedium', ''),
microservices-middleware/server/utility/orderConverterUtility.js:149:hardcoded string:        sourceCampaignId: get(campaignDetails, 'SourceCampaignId', ''),
microservices-middleware/server/utility/orderConverterUtility.js:150:hardcoded string:        uTMSource: get(campaignDetails, 'UTMSource', ''),
microservices-middleware/server/utility/orderConverterUtility.js:151:hardcoded string:        campaignName: get(campaignDetails, 'CampaignName', '')
microservices-middleware/server/utility/orderConverterUtility.js:155:hardcoded variable:const getLineOrderItems = (order) => {
microservices-middleware/server/utility/orderConverterUtility.js:156:hardcoded string:    const lineItems = get(order, "lineItems", {});
microservices-middleware/server/utility/orderConverterUtility.js:158:hardcoded string:    const validParentLineItems = (get(lineItems, "parentLineItems", [])).filter(sku => sku);
microservices-middleware/server/utility/orderConverterUtility.js:159:hardcoded string:    const validChildLineItems = (get(lineItems, "childLineItems", [])).filter(sku => sku);
microservices-middleware/server/utility/orderConverterUtility.js:167:hardcoded variable:const processLineItem = (lineItem) => {
microservices-middleware/server/utility/orderConverterUtility.js:169:hardcoded string:        orderItemId: get(lineItem, "productId"),
microservices-middleware/server/utility/orderConverterUtility.js:170:hardcoded string:        name: get(lineItem, "name"),
microservices-middleware/server/utility/orderConverterUtility.js:171:hardcoded string:        sku: get(lineItem, "sku"),
microservices-middleware/server/utility/orderConverterUtility.js:172:hardcoded string:        price: get(lineItem, "price"),
microservices-middleware/server/utility/orderConverterUtility.js:173:hardcoded string:        qty_ordered: get(lineItem, "quantity", 1),
microservices-middleware/server/utility/orderConverterUtility.js:174:hardcoded string:        tax_percent: get(lineItem, "taxPercent", 0),
microservices-middleware/server/utility/orderConverterUtility.js:175:hardcoded string:        discount_percent: get(lineItem, "discountPercent", 0),
microservices-middleware/server/utility/orderConverterUtility.js:176:hardcoded string:        type: get(lineItem, "validity", "") === "40 Days" ? "trial_pack" : get(lineItem, "combinationType", "")
microservices-middleware/server/utility/orderConverterUtility.js:180:hardcoded variable:const getCapitalFloatDetails = (order, lineOrderItems) => {
microservices-middleware/server/utility/orderConverterUtility.js:181:hardcoded string:    const cfPayments = get(order, "paymentDetails.payments", []).filter(p => p.type.toLowerCase() === "emi" && p.provider.toLowerCase() === "capital_float");
microservices-middleware/server/utility/orderConverterUtility.js:182:hardcoded variable:    const result = {
microservices-middleware/server/utility/orderConverterUtility.js:184:hardcoded string:        appId: "",
microservices-middleware/server/utility/orderConverterUtility.js:185:hardcoded number:        finalAmount: 0,
microservices-middleware/server/utility/orderConverterUtility.js:186:hardcoded number:        downPaymentAmount: 0,
microservices-middleware/server/utility/orderConverterUtility.js:187:hardcoded array:        products: [],
microservices-middleware/server/utility/orderConverterUtility.js:190:hardcoded array:        multipleCFIds: [],
microservices-middleware/server/utility/orderConverterUtility.js:191:hardcoded array:        downPayments: []
microservices-middleware/server/utility/orderConverterUtility.js:193:hardcoded number:    if (cfPayments.length > 0) {
microservices-middleware/server/utility/orderConverterUtility.js:195:hardcoded number:        result.appId = cfPayments[0].referenceId;
microservices-middleware/server/utility/orderConverterUtility.js:196:hardcoded string:        result.finalAmount = get(order, "finalPrice");
microservices-middleware/server/utility/orderConverterUtility.js:197:hardcoded string:        result.products = [...get(lineOrderItems, "parentOrderItems", []), ...get(lineOrderItems, "childOrderItems", [])];
microservices-middleware/server/utility/orderConverterUtility.js:198:hardcoded string:        result.isThresholdMet = get(lineOrderItems, "childOrderItems", []).length > 0;
microservices-middleware/server/utility/orderConverterUtility.js:199:hardcoded number:        result.multipleCF = cfPayments.length > 1;
microservices-middleware/server/utility/orderConverterUtility.js:205:hardcoded string:        result.downPayments = get(order, "paymentDetails.payments", []).filter(p => p.type.toLowerCase() === "down_payment").map(ele => ({
microservices-middleware/server/utility/orderConverterUtility.js:209:hardcoded string:            isICR: ele.provider.toLowerCase() === "icr",
microservices-middleware/server/utility/orderConverterUtility.js:210:hardcoded string:            isSCR: ele.provider.toLowerCase() === "scr"
microservices-middleware/server/utility/orderConverterUtility.js:212:hardcoded number:        result.downPaymentAmount = result.downPayments.reduce((oldVal, ele) => oldVal + ele.amount, 0);
microservices-middleware/server/utility/orderConverterUtility.js:217:hardcoded variable:const getNachDetails = (order, lineOrderItems) => {
microservices-middleware/server/utility/orderConverterUtility.js:218:hardcoded string:    const nachPayments = get(order, "paymentDetails.payments", []).filter(p => p.type.toLowerCase() === "emi" && p.provider.toLowerCase() === "nach");
microservices-middleware/server/utility/orderConverterUtility.js:219:hardcoded variable:    const result = {
microservices-middleware/server/utility/orderConverterUtility.js:221:hardcoded number:        finalAmount: 0,
microservices-middleware/server/utility/orderConverterUtility.js:222:hardcoded number:        downPaymentAmount: 0,
microservices-middleware/server/utility/orderConverterUtility.js:223:hardcoded array:        products: [],
microservices-middleware/server/utility/orderConverterUtility.js:224:hardcoded string:        nachApprovalCode: "",
microservices-middleware/server/utility/orderConverterUtility.js:225:hardcoded array:        downPayments: [],
microservices-middleware/server/utility/orderConverterUtility.js:226:hardcoded number:        loanDuration: 0,
microservices-middleware/server/utility/orderConverterUtility.js:229:hardcoded number:    if (nachPayments.length > 0) {
microservices-middleware/server/utility/orderConverterUtility.js:231:hardcoded string:        result.finalAmount = get(order, "finalPrice");
microservices-middleware/server/utility/orderConverterUtility.js:232:hardcoded string:        result.products = [...get(lineOrderItems, "parentOrderItems", []), ...get(lineOrderItems, "childOrderItems", [])];
microservices-middleware/server/utility/orderConverterUtility.js:233:hardcoded number:        result.nachApprovalCode = nachPayments[0].referenceId;
microservices-middleware/server/utility/orderConverterUtility.js:234:hardcoded string:        result.downPayments = get(order, "paymentDetails.payments", []).filter(p => p.type.toLowerCase() === "down_payment").map(ele => ({
microservices-middleware/server/utility/orderConverterUtility.js:238:hardcoded string:            isICR: ele.provider.toLowerCase() === "icr",
microservices-middleware/server/utility/orderConverterUtility.js:239:hardcoded string:            isSCR: ele.provider.toLowerCase() === "scr"
microservices-middleware/server/utility/orderConverterUtility.js:241:hardcoded number:        result.loanDuration = nachPayments[0].tenure;
microservices-middleware/server/utility/orderConverterUtility.js:242:hardcoded string:        result.isThresholdMet = get(lineOrderItems, "childOrderItems", []).length > 0;
microservices-middleware/server/utility/orderConverterUtility.js:243:hardcoded number:        result.downPaymentAmount = result.downPayments.reduce((oldVal, ele) => oldVal + ele.amount, 0);
microservices-middleware/server/utility/orderConverterUtility.js:248:hardcoded variable:const getEmiDetails = (order, lineOrderItems) => {
microservices-middleware/server/utility/orderConverterUtility.js:249:hardcoded object:    const { paymentDetails } = order || {};
microservices-middleware/server/utility/orderConverterUtility.js:250:hardcoded string:    const emiPayments = get(order, "paymentDetails.payments", []).filter(p => p.type.toLowerCase() === "emi"
microservices-middleware/server/utility/orderConverterUtility.js:251:hardcoded string:        && !["nach", "capital_float"].includes(p.provider.toLowerCase()));
microservices-middleware/server/utility/orderConverterUtility.js:252:hardcoded number:    const { totalPrepaidAmount = 0, totalPostpaidAmount = 0 } = paymentDetails || {};
microservices-middleware/server/utility/orderConverterUtility.js:254:hardcoded variable:    const result = {
microservices-middleware/server/utility/orderConverterUtility.js:256:hardcoded string:        type: "",
microservices-middleware/server/utility/orderConverterUtility.js:257:hardcoded number:        finalAmount: 0,
microservices-middleware/server/utility/orderConverterUtility.js:258:hardcoded number:        downPaymentAmount: 0,
microservices-middleware/server/utility/orderConverterUtility.js:259:hardcoded array:        products: [],
microservices-middleware/server/utility/orderConverterUtility.js:260:hardcoded string:        referenceId: "",
microservices-middleware/server/utility/orderConverterUtility.js:261:hardcoded array:        downPayments: [],
microservices-middleware/server/utility/orderConverterUtility.js:262:hardcoded number:        loanDuration: 0,
microservices-middleware/server/utility/orderConverterUtility.js:265:hardcoded number:    if (emiPayments.length > 0) {
microservices-middleware/server/utility/orderConverterUtility.js:267:hardcoded number:        result.type = getOldProvider(emiPayments[0].provider);
microservices-middleware/server/utility/orderConverterUtility.js:268:hardcoded string:        result.finalAmount = get(order, "finalPrice");
microservices-middleware/server/utility/orderConverterUtility.js:269:hardcoded string:        result.products = [...get(lineOrderItems, "parentOrderItems", []), ...get(lineOrderItems, "childOrderItems", [])];
microservices-middleware/server/utility/orderConverterUtility.js:270:hardcoded number:        result.referenceId = emiPayments[0].referenceId;
microservices-middleware/server/utility/orderConverterUtility.js:271:hardcoded string:        result.downPayments = get(order, "paymentDetails.payments", []).filter(p => p.type.toLowerCase() === "down_payment").map(ele => ({
microservices-middleware/server/utility/orderConverterUtility.js:275:hardcoded string:            isICR: ele.provider.toLowerCase() === "icr",
microservices-middleware/server/utility/orderConverterUtility.js:276:hardcoded string:            isSCR: ele.provider.toLowerCase() === "scr"
microservices-middleware/server/utility/orderConverterUtility.js:278:hardcoded number:        result.downPaymentAmount = result.downPayments.reduce((oldVal, ele) => oldVal + ele.amount, 0);
microservices-middleware/server/utility/orderConverterUtility.js:279:hardcoded number:        result.loanDuration = emiPayments[0].tenure;
microservices-middleware/server/utility/orderConverterUtility.js:280:hardcoded string:        result.isThresholdMet = get(lineOrderItems, "childOrderItems", []).length > 0;
microservices-middleware/server/utility/orderConverterUtility.js:285:hardcoded variable:const getProductInfo = (student, tablets) => {
microservices-middleware/server/utility/orderConverterUtility.js:286:hardcoded string:    const { initialClass = "", finalClass = "", board = "", course = "", validity = "",
microservices-middleware/server/utility/orderConverterUtility.js:287:hardcoded string:        items = [], workshops = [], language = "", courseType, formValues = {}, byjusFinalClass = "", tlpFinalClass = "" } = student;
microservices-middleware/server/utility/orderConverterUtility.js:288:hardcoded string:    const tablet = items.filter(item => item && item.itemType === "tablet");
microservices-middleware/server/utility/orderConverterUtility.js:298:hardcoded array:        workshops: isArray(workshops) ? workshops : [workshops],
microservices-middleware/server/utility/orderConverterUtility.js:299:hardcoded number:        tablet: !isEmpty(tablets) ? tablets : (tablet && tablet[0]),
microservices-middleware/server/utility/orderConverterUtility.js:301:hardcoded object:        productDesc: `${course} - ${validity}`,
microservices-middleware/server/utility/orderConverterUtility.js:308:hardcoded variable:const getFormattedProducts = (item) => {
microservices-middleware/server/utility/orderConverterUtility.js:310:hardcoded string:        "orderItemId": get(item, 'productId'),
microservices-middleware/server/utility/orderConverterUtility.js:311:hardcoded string:        "name": get(item, 'name'),
microservices-middleware/server/utility/orderConverterUtility.js:312:hardcoded string:        "sku": get(item, 'sku'),
microservices-middleware/server/utility/orderConverterUtility.js:313:hardcoded string:        "price": get(item, 'price'),
microservices-middleware/server/utility/orderConverterUtility.js:314:hardcoded string:        "qty_ordered": 1,
microservices-middleware/server/utility/orderConverterUtility.js:315:hardcoded string:        "tax_percent": 0,
microservices-middleware/server/utility/orderConverterUtility.js:316:hardcoded string:        "discount_percent": 0,
microservices-middleware/server/utility/orderConverterUtility.js:317:hardcoded string:        "type": get(item, "validity", "") === "40 Days" ? "trial_pack" : get(item, "combinationType", "")
microservices-middleware/server/utility/orderConverterUtility.js:321:hardcoded object:const getCustomerDetailsObj = (order, student = {}, productInfo, formattedProducts) => {
microservices-middleware/server/utility/orderConverterUtility.js:322:hardcoded object:    const { productDetails } = order;
microservices-middleware/server/utility/orderConverterUtility.js:323:hardcoded string:    const productType = get(order, "productDetails.productType", "").toLowerCase();
microservices-middleware/server/utility/orderConverterUtility.js:324:hardcoded string:    const addressDetails = get(order, "addressDetails.billing");
microservices-middleware/server/utility/orderConverterUtility.js:325:hardcoded string:    const mentoring = get(productDetails, 'mentoring', {});
microservices-middleware/server/utility/orderConverterUtility.js:326:hardcoded string:    const tablets = get(productDetails, 'tablets', []);
microservices-middleware/server/utility/orderConverterUtility.js:327:hardcoded string:    const mentoringDetails = get(student, "mentoringDetails", []);
microservices-middleware/server/utility/orderConverterUtility.js:328:hardcoded string:    const bhlpCourseDetails = get(student, "bhlpCourseDetails", []);
microservices-middleware/server/utility/orderConverterUtility.js:329:hardcoded string:    const studentProfileDetails = get(student, "studentProfileDetails", {});
microservices-middleware/server/utility/orderConverterUtility.js:330:hardcoded string:    const hlpDetails = get(student, "hlpDetails", {});
microservices-middleware/server/utility/orderConverterUtility.js:331:hardcoded string:    const productSelectionType = get(student, "productSelectionType", "");
microservices-middleware/server/utility/orderConverterUtility.js:333:hardcoded variable:    const customerDetail = {
microservices-middleware/server/utility/orderConverterUtility.js:335:hardcoded string:        studentName: get(student, "studentName") || ((productType === "sibling") ? get(student.formValues, 'siblingName') : get(order, "customerDetails.studentName")),
microservices-middleware/server/utility/orderConverterUtility.js:336:hardcoded string:        studentId: get(student, "studentId"),
microservices-middleware/server/utility/orderConverterUtility.js:337:hardcoded string:        studentMobile: (productType === "sibling" && (get(config, 'isStudentProfileAvailable') != "true")) ? get(student.formValues, 'siblingMobileNo') : get(order, "customerDetails.studentMobileNo"),
microservices-middleware/server/utility/orderConverterUtility.js:338:hardcoded string:        parentName: get(order, "customerDetails.parentName"),
microservices-middleware/server/utility/orderConverterUtility.js:339:hardcoded string:        parentMobile: get(order, "customerDetails.parentMobileNo"),
microservices-middleware/server/utility/orderConverterUtility.js:340:hardcoded string:        studentEmail: get(order, "customerDetails.email"),
microservices-middleware/server/utility/orderConverterUtility.js:341:hardcoded string:        parentEmail: get(order, "customerDetails.email"),
microservices-middleware/server/utility/orderConverterUtility.js:342:hardcoded string:        alternateEmail: get(order, "customerDetails.alternateEmail"),
microservices-middleware/server/utility/orderConverterUtility.js:343:hardcoded string:        address: get(addressDetails, "address"),
microservices-middleware/server/utility/orderConverterUtility.js:344:hardcoded string:        city: get(addressDetails, "city"),
microservices-middleware/server/utility/orderConverterUtility.js:345:hardcoded string:        zipCode: get(addressDetails, "zipcode"),
microservices-middleware/server/utility/orderConverterUtility.js:346:hardcoded string:        state: get(addressDetails, "state"),
microservices-middleware/server/utility/orderConverterUtility.js:347:hardcoded string:        country: get(addressDetails, "country"),
microservices-middleware/server/utility/orderConverterUtility.js:349:hardcoded string:        mentoringCount: get(mentoring, 'count'),
microservices-middleware/server/utility/orderConverterUtility.js:350:hardcoded string:        additionalMentoring: get(mentoring, 'additionalMentoring', []),
microservices-middleware/server/utility/orderConverterUtility.js:358:hardcoded string:        isByjusClassPresent: productSelectionType === "byjus_classes"
microservices-middleware/server/utility/orderConverterUtility.js:361:hardcoded string:    if ((get(config, 'isStudentProfileAvailable') == "true")) {
microservices-middleware/server/utility/orderConverterUtility.js:362:hardcoded string:        customerDetail["primaryMobile"] = get(order, "customerDetails.studentMobileNo")
microservices-middleware/server/utility/orderConverterUtility.js:363:hardcoded string:        customerDetail["secondaryMobile"] = get(order, "customerDetails.parentMobileNo")
microservices-middleware/server/utility/orderConverterUtility.js:368:hardcoded variable:const getCustomerDetails = (order, lineOrderItems) => {
microservices-middleware/server/utility/orderConverterUtility.js:369:hardcoded string:    const addressDetails = get(order, "addressDetails.billing");
microservices-middleware/server/utility/orderConverterUtility.js:370:hardcoded object:    const { productDetails } = order;
microservices-middleware/server/utility/orderConverterUtility.js:371:hardcoded string:    const productType = get(order, "productDetails.productType", "").toLowerCase();
microservices-middleware/server/utility/orderConverterUtility.js:372:hardcoded string:    const mentoring = get(productDetails, 'mentoring', {});
microservices-middleware/server/utility/orderConverterUtility.js:373:hardcoded string:    const tablets = get(productDetails, 'tablets', []);
microservices-middleware/server/utility/orderConverterUtility.js:374:hardcoded string:    const students = get(productDetails, 'students', []);
microservices-middleware/server/utility/orderConverterUtility.js:375:hardcoded variable:    let tablet = {
microservices-middleware/server/utility/orderConverterUtility.js:376:hardcoded string:        productId: "",
microservices-middleware/server/utility/orderConverterUtility.js:377:hardcoded number:        price: 0,
microservices-middleware/server/utility/orderConverterUtility.js:378:hardcoded number:        size: 0,
microservices-middleware/server/utility/orderConverterUtility.js:379:hardcoded string:        name: "",
microservices-middleware/server/utility/orderConverterUtility.js:380:hardcoded string:        sku: ""
microservices-middleware/server/utility/orderConverterUtility.js:382:hardcoded array:    let customerDetailsArray = [];
microservices-middleware/server/utility/orderConverterUtility.js:383:hardcoded string:    const mentoringItem = get(mentoring, 'items', []);
microservices-middleware/server/utility/orderConverterUtility.js:385:hardcoded number:    if (students.length > 0) {
microservices-middleware/server/utility/orderConverterUtility.js:387:hardcoded string:            const { initialClass = "", finalClass = "", board = "", course = "", validity = "",
microservices-middleware/server/utility/orderConverterUtility.js:388:hardcoded array:                items = [], workshops = [] } = student;
microservices-middleware/server/utility/orderConverterUtility.js:389:hardcoded string:            const tablet = items.filter(item => item && item.itemType === "tablet");
microservices-middleware/server/utility/orderConverterUtility.js:390:hardcoded string:            const products = get(student, "items", []);
microservices-middleware/server/utility/orderConverterUtility.js:393:hardcoded variable:            const productInfo = getProductInfo(student, tablets)
microservices-middleware/server/utility/orderConverterUtility.js:396:hardcoded variable:            let formattedProducts = products.map((item) => {
microservices-middleware/server/utility/orderConverterUtility.js:407:hardcoded string:        const product = get(productDetails, 'products', []);
microservices-middleware/server/utility/orderConverterUtility.js:408:hardcoded variable:        const formattedProducts = concat(product, mentoringItem, tablets)
microservices-middleware/server/utility/orderConverterUtility.js:411:hardcoded object:        customerDetailsArray = getCustomerDetailsObj(order, student = {}, product, formattedProducts)
microservices-middleware/server/utility/orderConverterUtility.js:417:hardcoded variable:const getPaymentsForOMS = (order) => {
microservices-middleware/server/utility/orderConverterUtility.js:418:hardcoded string:    return get(order, "paymentDetails.payments", []).map(ele => ({
microservices-middleware/server/utility/orderConverterUtility.js:419:hardcoded string:        type: ele.type.toLowerCase() === "down_payment" ? "down payment" : "emi",
microservices-middleware/server/utility/orderConverterUtility.js:426:hardcoded variable:const getPaymentDetails = (order) => {
microservices-middleware/server/utility/orderConverterUtility.js:427:hardcoded string:    return get(order, "paymentDetails.payments", []).map(dp => ({
microservices-middleware/server/utility/orderConverterUtility.js:431:hardcoded string:        isICR: dp.provider.toLowerCase() === "icr",
microservices-middleware/server/utility/orderConverterUtility.js:432:hardcoded string:        isSCR: dp.provider.toLowerCase() === "scr",
microservices-middleware/server/utility/orderConverterUtility.js:438:hardcoded variable:const isExtraOrder = (lineOrderItems) => {
microservices-middleware/server/utility/orderConverterUtility.js:439:hardcoded string:    return false // get(lineOrderItems, "childOrderItems", []).length > 0;
microservices-middleware/server/utility/orderConverterUtility.js:442:hardcoded variable:const getInventoryDetails = (order) => {
microservices-middleware/server/utility/orderConverterUtility.js:443:hardcoded array:    return [];
microservices-middleware/server/utility/orderConverterUtility.js:446:hardcoded variable:const getSelectedInventory = (order) => {
microservices-middleware/server/utility/orderConverterUtility.js:448:hardcoded string:        finalClass: "",
microservices-middleware/server/utility/orderConverterUtility.js:449:hardcoded string:        initialClass: "",
microservices-middleware/server/utility/orderConverterUtility.js:450:hardcoded string:        board: ""
microservices-middleware/server/utility/orderConverterUtility.js:454:hardcoded variable:const getComments = (order) => {
microservices-middleware/server/utility/orderConverterUtility.js:455:hardcoded string:    return get(order, "comments", []);
microservices-middleware/server/utility/orderConverterUtility.js:458:hardcoded variable:const getMqMessage = async (order, paymentDetails, lineOrderItems, coupon, inventory, capitalFloatDetails, nachDetails,
microservices-middleware/server/utility/orderConverterUtility.js:460:hardcoded variable:    //const ohLoginDetails = await loginIntoOrderhiveAndGetDetails();
microservices-middleware/server/utility/orderConverterUtility.js:469:hardcoded string:        leadsquaredAccountNumber: get(order, "leadDetails.accountNo"),
microservices-middleware/server/utility/orderConverterUtility.js:470:hardcoded string:        leadsquaredProspectId: get(order, "leadDetails.prospectId"),
microservices-middleware/server/utility/orderConverterUtility.js:471:hardcoded string:        loggedInEmailId: get(order, "salesDetails.directSalesBy"),
microservices-middleware/server/utility/orderConverterUtility.js:472:hardcoded string:        paymentMethod: get(order, "paymentDetails.paymentMethod"),
microservices-middleware/server/utility/orderConverterUtility.js:474:hardcoded string:        orderReferenceId: "", // TODO
microservices-middleware/server/utility/orderConverterUtility.js:476:hardcoded string:            method: "create_order",
microservices-middleware/server/utility/orderConverterUtility.js:479:hardcoded string:            currency: "INR",
microservices-middleware/server/utility/orderConverterUtility.js:480:hardcoded number:            tax_type: 1,
microservices-middleware/server/utility/orderConverterUtility.js:481:hardcoded string:            contactId: get(order, "customerDetails.contactId"),
microservices-middleware/server/utility/orderConverterUtility.js:482:hardcoded string:            billing_address_id: get(order, "addressDetails.billing.addressId"),
microservices-middleware/server/utility/orderConverterUtility.js:483:hardcoded string:            shipping_address_id: get(order, "addressDetails.shipping.addressId"),
microservices-middleware/server/utility/orderConverterUtility.js:484:hardcoded string:            sales_person_id: get(order, "salesDetails.directSalesById", ''),
microservices-middleware/server/utility/orderConverterUtility.js:485:hardcoded string:            sales_closed_by_user_id: get(order, "salesDetails.directSalesById"),
microservices-middleware/server/utility/orderConverterUtility.js:486:hardcoded string:            direct_sales_appointment_by_id: get(order, "salesDetails.salesAppointmentById", '') || get(order, "salesDetails.directSalesById", ''),
microservices-middleware/server/utility/orderConverterUtility.js:487:hardcoded string:            sales_person_username: get(order, "salesDetails.directSalesBy", ''),
microservices-middleware/server/utility/orderConverterUtility.js:488:hardcoded string:            type_of_sales: get(order, "salesDetails.typeOfSales", "DSSales"),
microservices-middleware/server/utility/orderConverterUtility.js:489:hardcoded string:            accountNumber: get(order, "leadDetails.accountNo"),
microservices-middleware/server/utility/orderConverterUtility.js:490:hardcoded string:            prospectId: get(order, "leadDetails.prospectId"),
microservices-middleware/server/utility/orderConverterUtility.js:491:hardcoded string:            delivery_status: "Product To Be Delivered",
microservices-middleware/server/utility/orderConverterUtility.js:492:hardcoded string:            call_reference: "",
microservices-middleware/server/utility/orderConverterUtility.js:493:hardcoded string:            SalesOrderItem: get(lineOrderItems, "parentOrderItems", []),//[...get(lineOrderItems, "parentOrderItems", []), ...get(lineOrderItems, "childOrderItems", [])],
microservices-middleware/server/utility/orderConverterUtility.js:502:hardcoded string:            isImmediateDeliveryPossible: get(order, "isImmediateDelivery", false),
microservices-middleware/server/utility/orderConverterUtility.js:510:hardcoded variable:const getOrderType = (lineOrderItems) => {
microservices-middleware/server/utility/orderConverterUtility.js:511:hardcoded array:    const { parentOrderItems = [], childOrderItems = [] } = lineOrderItems || {};
microservices-middleware/server/utility/orderConverterUtility.js:513:hardcoded string:    const orderType = (parentOrderItems.length && childOrderItems.length) ? 'SPLIT_PARENT' : 'SINGLE';
microservices-middleware/server/utility/orderhiveUtility.js:1:hardcoded object:const { get } = require('lodash');
microservices-middleware/server/utility/orderhiveUtility.js:3:hardcoded file path:const config = require('../config');
microservices-middleware/server/utility/orderhiveUtility.js:4:hardcoded object:const { callOrderhiveApi } = require('./externalApiUtility');
microservices-middleware/server/utility/orderhiveUtility.js:5:hardcoded file path:const logger = require('../lib/bunyan-logger')('Orderhive Calls Controller');
microservices-middleware/server/utility/orderhiveUtility.js:6:hardcoded object:const { isDevEnv } = require("../lib/featureHelper")
microservices-middleware/server/utility/orderhiveUtility.js:8:hardcoded variable:const checkSPInOH = async () => {
microservices-middleware/server/utility/orderhiveUtility.js:10:hardcoded string:    const email = "mohnish@thinkandlearn.in";
microservices-middleware/server/utility/orderhiveUtility.js:12:hardcoded variable:        const payload = {
microservices-middleware/server/utility/orderhiveUtility.js:13:hardcoded string:            "method": "sales_person",
microservices-middleware/server/utility/orderhiveUtility.js:14:hardcoded string:            "tokenId": get(config, 'orderhive.token'),
microservices-middleware/server/utility/orderhiveUtility.js:15:hardcoded string:            "tenantId": get(config, 'orderhive.tenantId'),
microservices-middleware/server/utility/orderhiveUtility.js:16:hardcoded string:            "term": email
microservices-middleware/server/utility/orderhiveUtility.js:18:hardcoded variable:        const apiResponse = await callOrderhiveApi(payload);
microservices-middleware/server/utility/orderhiveUtility.js:19:hardcoded string:        logger.info({ payload, orderhiveApiResponse: apiResponse, message: "orderHiveApiResponse" })
microservices-middleware/server/utility/orderhiveUtility.js:21:hardcoded object:        const { status, users } = apiResponse.resp || {};
microservices-middleware/server/utility/orderhiveUtility.js:24:hardcoded variable:            const userDetails = users.find(user => user.username === email);
microservices-middleware/server/utility/orderhiveUtility.js:25:hardcoded string:            const { lead_square_user = false, active = "0", userId = "" } = userDetails || {};
microservices-middleware/server/utility/orderhiveUtility.js:39:hardcoded object:                    message: `${email} is not a OH user. Please contact admin.`,
microservices-middleware/server/utility/orderhiveUtility.js:50:hardcoded object:                message: `${email} is not a OH user. Please contact admin.`,
microservices-middleware/server/utility/orderhiveUtility.js:51:hardcoded string:                userId: "",
microservices-middleware/server/utility/orderhiveUtility.js:58:hardcoded string:        logger.error({ method: "checkSPInOH", error });
microservices-middleware/server/utility/orderhiveUtility.js:63:hardcoded variable:const getContactIdFromOH = async (customerDetails) => {
microservices-middleware/server/utility/orderhiveUtility.js:64:hardcoded object:    const { email = null } = customerDetails;
microservices-middleware/server/utility/orderhiveUtility.js:65:hardcoded variable:    let contactId = null;
microservices-middleware/server/utility/orderhiveUtility.js:67:hardcoded string:        throw new Error("Email is not present in customer details");
microservices-middleware/server/utility/orderhiveUtility.js:71:hardcoded variable:        const payload = {
microservices-middleware/server/utility/orderhiveUtility.js:72:hardcoded string:            "method": "contacts",
microservices-middleware/server/utility/orderhiveUtility.js:73:hardcoded string:            "tokenId": get(config, 'orderhive.token'),
microservices-middleware/server/utility/orderhiveUtility.js:74:hardcoded string:            "tenantId": get(config, 'orderhive.tenantId'),
microservices-middleware/server/utility/orderhiveUtility.js:75:hardcoded string:            "term": email,
microservices-middleware/server/utility/orderhiveUtility.js:76:hardcoded string:            "searchBy": "email"
microservices-middleware/server/utility/orderhiveUtility.js:82:hardcoded string:         * Ex: for "manju@gfmail.com" , it returns kumar.manju@gmail.com / sri.manju@gmail.com
microservices-middleware/server/utility/orderhiveUtility.js:85:hardcoded variable:        const apiResponse = await callOrderhiveApi(payload);
microservices-middleware/server/utility/orderhiveUtility.js:87:hardcoded array:        const { status, contacts = [] } = apiResponse;
microservices-middleware/server/utility/orderhiveUtility.js:90:hardcoded string:            contactId = get(contacts[0], 'contactId', null);
microservices-middleware/server/utility/orderhiveUtility.js:98:hardcoded variable:const createContactInOH = async (userId, customerDetails, addressDetails) => {
microservices-middleware/server/utility/orderhiveUtility.js:103:hardcoded string:        const zipcode = get(addressDetails, 'zipcode');
microservices-middleware/server/utility/orderhiveUtility.js:104:hardcoded string:        const defaultZipCode = isDevEnv ? "000000" : "-";
microservices-middleware/server/utility/orderhiveUtility.js:105:hardcoded variable:        const payload = {
microservices-middleware/server/utility/orderhiveUtility.js:106:hardcoded string:            "method": "create_customer",
microservices-middleware/server/utility/orderhiveUtility.js:107:hardcoded string:            "tokenId": get(config, 'orderhive.token'),
microservices-middleware/server/utility/orderhiveUtility.js:108:hardcoded string:            "tenantId": get(config, 'orderhive.tenantId'),
microservices-middleware/server/utility/orderhiveUtility.js:109:hardcoded string:            "name": get(customerDetails, 'parentName', '') || "testAPI",
microservices-middleware/server/utility/orderhiveUtility.js:110:hardcoded string:            "email": get(customerDetails, 'email'),
microservices-middleware/server/utility/orderhiveUtility.js:111:hardcoded string:            "contact": get(customerDetails, 'parentMobileNo'),
microservices-middleware/server/utility/orderhiveUtility.js:112:hardcoded string:            "student_contact_no": get(customerDetails, 'studentMobileNo'),
microservices-middleware/server/utility/orderhiveUtility.js:113:hardcoded string:            "parent_name": get(customerDetails, 'parentName'),
microservices-middleware/server/utility/orderhiveUtility.js:114:hardcoded string:            "sales_person_id": userId,
microservices-middleware/server/utility/orderhiveUtility.js:116:hardcoded string:            "addresses": {
microservices-middleware/server/utility/orderhiveUtility.js:117:hardcoded string:                "address": get(addressDetails, 'address', '-'),
microservices-middleware/server/utility/orderhiveUtility.js:118:hardcoded string:                "city": get(addressDetails, 'city', '-'),
microservices-middleware/server/utility/orderhiveUtility.js:119:hardcoded string:                "zipcode": zipcode || defaultZipCode,
microservices-middleware/server/utility/orderhiveUtility.js:120:hardcoded string:                "state": get(addressDetails, 'state', '-'),
microservices-middleware/server/utility/orderhiveUtility.js:121:hardcoded string:                "country": get(addressDetails, 'country', '-')
microservices-middleware/server/utility/orderhiveUtility.js:125:hardcoded variable:        const apiResponse = await callOrderhiveApi(payload);
microservices-middleware/server/utility/orderhiveUtility.js:126:hardcoded string:        logger.info({ method: "createContactInOH", "email": get(customerDetails, 'email'), payload, apiResponse });
microservices-middleware/server/utility/orderhiveUtility.js:128:hardcoded object:        const { status, contact = {}, message } = apiResponse;
microservices-middleware/server/utility/orderhiveUtility.js:129:hardcoded object:        let { contactId } = status ? contact : {};
microservices-middleware/server/utility/orderhiveUtility.js:134:hardcoded string:            throw new Error(message || `Error in creating contact - ${get(customerDetails, 'email')} in OH. Please try again.`);
microservices-middleware/server/utility/orderhiveUtility.js:137:hardcoded string:        logger.error({ method: 'createContactInOH', error });
microservices-middleware/server/utility/orderhiveUtility.js:138:hardcoded string:        throw new Error(error || `Error in creating contact - ${get(customerDetails, 'email')} in OH. Please try again.`);
microservices-middleware/server/utility/orderhiveUtility.js:142:hardcoded variable:const getOHContactDetails = async (contactId) => {
microservices-middleware/server/utility/orderhiveUtility.js:144:hardcoded variable:    const payload = {
microservices-middleware/server/utility/orderhiveUtility.js:145:hardcoded string:        "method": "contact_view",
microservices-middleware/server/utility/orderhiveUtility.js:146:hardcoded string:        "tokenId": get(config, 'orderhive.token'),
microservices-middleware/server/utility/orderhiveUtility.js:147:hardcoded string:        "tenantId": get(config, 'orderhive.tenantId'),
microservices-middleware/server/utility/orderhiveUtility.js:148:hardcoded string:        "contactId": contactId
microservices-middleware/server/utility/orderhiveUtility.js:151:hardcoded variable:    const apiResponse = await callOrderhiveApi(payload);
microservices-middleware/server/utility/orderhiveUtility.js:152:hardcoded object:    const { status, contact } = apiResponse;
microservices-middleware/server/utility/orderhiveUtility.js:158:hardcoded object:        return {};
microservices-middleware/server/utility/orderhiveUtility.js:162:hardcoded variable:const editAddressInOh = async (ohContactDetails, userId, customerDetails, addressDetails) => {
microservices-middleware/server/utility/orderhiveUtility.js:167:hardcoded string:    const defaultZipCode = isDevEnv ? "000000" : "-";
microservices-middleware/server/utility/orderhiveUtility.js:168:hardcoded string:    let zipcode = get(addressDetails, 'zipcode', '').length ? get(addressDetails, 'zipcode', defaultZipCode) : defaultZipCode;
microservices-middleware/server/utility/orderhiveUtility.js:169:hardcoded variable:    const payload = {
microservices-middleware/server/utility/orderhiveUtility.js:170:hardcoded string:        "method": "edit_customer",
microservices-middleware/server/utility/orderhiveUtility.js:171:hardcoded string:        "tokenId": get(config, 'orderhive.token'),
microservices-middleware/server/utility/orderhiveUtility.js:172:hardcoded string:        "tenantId": get(config, 'orderhive.tenantId'),
microservices-middleware/server/utility/orderhiveUtility.js:173:hardcoded string:        "name": get(customerDetails, 'studentName'),
microservices-middleware/server/utility/orderhiveUtility.js:174:hardcoded string:        "email": get(ohContactDetails, 'email') || get(customerDetails, 'email'),
microservices-middleware/server/utility/orderhiveUtility.js:175:hardcoded string:        "contactId": get(customerDetails, 'contactId'),
microservices-middleware/server/utility/orderhiveUtility.js:176:hardcoded string:        "contact": get(customerDetails, 'parentMobileNo'),
microservices-middleware/server/utility/orderhiveUtility.js:177:hardcoded string:        "student_contact_no": get(customerDetails, 'studentMobileNo'),
microservices-middleware/server/utility/orderhiveUtility.js:178:hardcoded string:        "parent_name": get(customerDetails, 'parentName'),
microservices-middleware/server/utility/orderhiveUtility.js:179:hardcoded string:        "sales_person_id": userId,
microservices-middleware/server/utility/orderhiveUtility.js:180:hardcoded string:        "addresses": [{
microservices-middleware/server/utility/orderhiveUtility.js:181:hardcoded string:            "address": get(addressDetails, 'address'),
microservices-middleware/server/utility/orderhiveUtility.js:182:hardcoded string:            "city": get(addressDetails, 'city'),
microservices-middleware/server/utility/orderhiveUtility.js:183:hardcoded string:            "zipcode": zipcode,
microservices-middleware/server/utility/orderhiveUtility.js:184:hardcoded string:            "state": get(addressDetails, 'state'),
microservices-middleware/server/utility/orderhiveUtility.js:185:hardcoded string:            "country": get(addressDetails, 'country')
microservices-middleware/server/utility/orderhiveUtility.js:189:hardcoded variable:    const apiResponse = await callOrderhiveApi(payload);
microservices-middleware/server/utility/orderhiveUtility.js:190:hardcoded string:    logger.info({ method: "saveAddressDetails", payload, apiResponse });
microservices-middleware/server/utility/orderhiveUtility.js:192:hardcoded object:    const { status, contact } = apiResponse;
microservices-middleware/server/utility/orderhiveUtility.js:194:hardcoded array:        let { Address: addressArray = [], contactId } = contact;
microservices-middleware/server/utility/orderhiveUtility.js:199:hardcoded number:        const latestAddress = addressArray[0];
microservices-middleware/server/utility/orderhiveUtility.js:201:hardcoded string:        const addressId = get(latestAddress, 'addressId');
microservices-middleware/server/utility/orderhiveUtility.js:203:hardcoded object:        logger.info({ method: `addressArray-${contactId}`, addressArray });
microservices-middleware/server/utility/orderhiveUtility.js:204:hardcoded object:        if (!addressId) throw new Error(`addressId missing for ${contactId}`);
microservices-middleware/server/utility/orderhiveUtility.js:205:hardcoded string:        addressDetails["ohAddressId"] = addressId;
microservices-middleware/server/utility/orderhiveUtility.js:210:hardcoded string:        throw new Error(`Error in creating addressId for - ${get(customerDetails, 'email')} in OH.`);
microservices-middleware/server/utility/smsUtility.js:1:hardcoded file path:const cryptoJS = require('crypto-js');
microservices-middleware/server/utility/smsUtility.js:2:hardcoded file path:const request = require('request-promise');
microservices-middleware/server/utility/smsUtility.js:3:hardcoded file path:const config = require('../config');
microservices-middleware/server/utility/smsUtility.js:4:hardcoded object:const { get, flattenDeep, map, startCase } = require('lodash');
microservices-middleware/server/utility/smsUtility.js:5:hardcoded file path:const moment = require('moment');
microservices-middleware/server/utility/smsUtility.js:6:hardcoded file path:const crypto = require('crypto');
microservices-middleware/server/utility/smsUtility.js:7:hardcoded file path:const randomstring = require('randomstring');
microservices-middleware/server/utility/smsUtility.js:8:hardcoded file path:const urlShortenerFactory = require('../lib/urlShortener/urlShortenerFactory');
microservices-middleware/server/utility/smsUtility.js:9:hardcoded file path:const Employee = require('../models/Employee');
microservices-middleware/server/utility/smsUtility.js:10:hardcoded object:const { isDevEnv } = require("../lib/featureHelper");
microservices-middleware/server/utility/smsUtility.js:12:hardcoded variable:const sendSMS = async (data) => {
microservices-middleware/server/utility/smsUtility.js:13:hardcoded variable:    const secretKey = cryptoJS.AES.encrypt(config.sms.key, config.sms.salt);
microservices-middleware/server/utility/smsUtility.js:14:hardcoded variable:    const options = {
microservices-middleware/server/utility/smsUtility.js:16:hardcoded string:        method: 'POST',
microservices-middleware/server/utility/smsUtility.js:20:hardcoded variable:    const shouldUseAirtel = true;
microservices-middleware/server/utility/smsUtility.js:22:hardcoded string:        delete data["provider"]
microservices-middleware/server/utility/smsUtility.js:23:hardcoded string:        data["contact"] = data["contact"].split("-")[data["contact"].split("-").length - 1]
microservices-middleware/server/utility/smsUtility.js:27:hardcoded number:    TODO: need to uncomment next 2 lines for taking airtel sms service live and make shouldUseAirtel: true @critical
microservices-middleware/server/utility/smsUtility.js:28:hardcoded string:    delete data["provider"]
microservices-middleware/server/utility/smsUtility.js:29:hardcoded string:    data["contact"] = data["contact"].split("-")[data["contact"].split("-").length - 1]
microservices-middleware/server/utility/smsUtility.js:31:hardcoded string:    options["body"] = { appName: "kart", stage: isDevEnv ? "dev" : "prod", secretKey, ...data, shouldUseAirtel };
microservices-middleware/server/utility/smsUtility.js:33:hardcoded variable:    const response = await request(options);
microservices-middleware/server/utility/smsUtility.js:37:hardcoded variable:const getUrl = async (identifier, source) => {
microservices-middleware/server/utility/smsUtility.js:38:hardcoded number:    // config.cashback.key -> must be a 32 bit key
microservices-middleware/server/utility/smsUtility.js:40:hardcoded variable:        const sessionKey = Buffer.from(config.otp.encryptionKey);
microservices-middleware/server/utility/smsUtility.js:41:hardcoded variable:        const iv = Buffer.from(randomstring.generate({
microservices-middleware/server/utility/smsUtility.js:42:hardcoded number:            length: 16,
microservices-middleware/server/utility/smsUtility.js:43:hardcoded string:            charset: 'alphabetic'
microservices-middleware/server/utility/smsUtility.js:45:hardcoded string:        const cipher = crypto.createCipheriv('aes-256-cbc', sessionKey, iv);
microservices-middleware/server/utility/smsUtility.js:46:hardcoded string:        let encryptedData = cipher.update(identifier, 'utf8', 'base64');
microservices-middleware/server/utility/smsUtility.js:47:hardcoded string:        encryptedData += cipher.final('base64');
microservices-middleware/server/utility/smsUtility.js:49:hardcoded string:        let result = Buffer.concat([iv, Buffer.from(encryptedData, "base64")]);
microservices-middleware/server/utility/smsUtility.js:50:hardcoded string:        result = result.toString('base64');
microservices-middleware/server/utility/smsUtility.js:52:hardcoded variable:        const urlSegment = encodeDecodeUrlSegment(result, true);
microservices-middleware/server/utility/smsUtility.js:53:hardcoded object:        const longUrl = `${config.otp.consumerUrl}/${urlSegment}?source=${source}`;
microservices-middleware/server/utility/smsUtility.js:56:hardcoded object:            const response = await urlShortenerFactory.getUrlShortener().shortenUrl(longUrl) || {};
microservices-middleware/server/utility/smsUtility.js:59:hardcoded string:                throw new Error("Unable to short the url.");
microservices-middleware/server/utility/smsUtility.js:71:hardcoded variable:const encodeDecodeUrlSegment = (urlSegment, isEncode) => {
microservices-middleware/server/utility/smsUtility.js:79:hardcoded string:        urlSegment = urlSegment.replace(/\//g, "-");
microservices-middleware/server/utility/smsUtility.js:80:hardcoded string:        urlSegment = urlSegment.replace(/\+/g, "_");
microservices-middleware/server/utility/smsUtility.js:81:hardcoded string:        urlSegment = urlSegment.replace(/\=/g, ".");
microservices-middleware/server/utility/smsUtility.js:89:hardcoded string:        urlSegment = urlSegment.replace(/\-/g, "/");
microservices-middleware/server/utility/smsUtility.js:90:hardcoded string:        urlSegment = urlSegment.replace(/\_/g, "+");
microservices-middleware/server/utility/smsUtility.js:91:hardcoded string:        urlSegment = urlSegment.replace(/\./g, "=");
microservices-middleware/server/utility/smsUtility.js:96:hardcoded variable:const getOrderConfirmationSmsTemplateNonSSR = (draftOrder, otp) => {
microservices-middleware/server/utility/smsUtility.js:97:hardcoded object:    const { productDetails, finalPrice } = draftOrder;
microservices-middleware/server/utility/smsUtility.js:98:hardcoded string:    const students = get(productDetails, 'students');
microservices-middleware/server/utility/smsUtility.js:100:hardcoded string:    const { totalAmount, payments = [] } = get(draftOrder, "paymentDetails", {});
microservices-middleware/server/utility/smsUtility.js:102:hardcoded string:    const tablets = flattenDeep(map(students, 'items'))?.filter(item => item?.itemType === "tablet");
microservices-middleware/server/utility/smsUtility.js:103:hardcoded string:    const paymentMessages = payments.map(ele => `Rs. ${ele.amount} through ${ele.provider.replace(/_/g, " ").toUpperCase()}`);
microservices-middleware/server/utility/smsUtility.js:105:hardcoded variable:    let message = `You have ordered for BYJU'S ${students.map((student) => {
microservices-middleware/server/utility/smsUtility.js:106:hardcoded object:        const { initialClass, finalClass, board } = student;
microservices-middleware/server/utility/smsUtility.js:107:hardcoded string:        const isBoard = !["11", "12", "4", "5"].includes(initialClass);
microservices-middleware/server/utility/smsUtility.js:108:hardcoded string:        return `${isBoard ? board : ''} Class ${initialClass} ${finalClass ? `- ${finalClass} ` : ''}`;
microservices-middleware/server/utility/smsUtility.js:112:hardcoded string:    message += tablets.length ? ` Tablets : ${tablets.map((tablet) => ` ${get(tablet, 'name')} `)}` : '';
microservices-middleware/server/utility/smsUtility.js:115:hardcoded string:    message += ` for Rs. ${finalPrice || (totalAmount ? totalAmount : '')}. Payment of ${paymentMessages.join(", ")}. To Confirm Order, please share the OTP ${otp} with the Counsellor. OTP valid for 24 hrs.`;
microservices-middleware/server/utility/smsUtility.js:119:hardcoded variable:const getOrderConfirmationSmsTemplate = async (draftOrder, otp) => {
microservices-middleware/server/utility/smsUtility.js:120:hardcoded object:    const { _id, salesDetails } = draftOrder;
microservices-middleware/server/utility/smsUtility.js:122:hardcoded object:    const { totalAmount } = draftOrder.paymentDetails || {};
microservices-middleware/server/utility/smsUtility.js:123:hardcoded string:    const { directSalesBy = "" } = salesDetails;
microservices-middleware/server/utility/smsUtility.js:125:hardcoded variable:    const salesPersonDoc = await getSalesName(directSalesBy);
microservices-middleware/server/utility/smsUtility.js:126:hardcoded string:    const salesPersonName = get(salesPersonDoc, "name", "");
microservices-middleware/server/utility/smsUtility.js:127:hardcoded string:    const urlSegmentScn = await getUrl(_id.toString(), "scn");
microservices-middleware/server/utility/smsUtility.js:128:hardcoded string:    const urlSegmentOpn = await getUrl(_id.toString(), "opn");
microservices-middleware/server/utility/smsUtility.js:130:hardcoded string:    const messageDesc = `We have received your BYJU'S order for Rs.${totalAmount} from ${salesPersonName ? salesPersonName : ""}. To confirm the order enter the OTP: ${otp}. Please read the order details & Terms & Conditions on the page carefully before entering the OTP. Kindly do not share this SMS with anyone.`;
microservices-middleware/server/utility/smsUtility.js:132:hardcoded object:    const scnMessage = `${messageDesc}\n${urlSegmentScn}\nTeam BYJU'S`;
microservices-middleware/server/utility/smsUtility.js:133:hardcoded object:    const opnMessage = `${messageDesc}\n${urlSegmentOpn}\nTeam BYJU'S`;
microservices-middleware/server/utility/smsUtility.js:136:hardcoded variable:    const message = {
microservices-middleware/server/utility/smsUtility.js:137:hardcoded string:        "scn": scnMessage,
microservices-middleware/server/utility/smsUtility.js:138:hardcoded string:        "opn": opnMessage
microservices-middleware/server/utility/smsUtility.js:144:hardcoded variable:const getSalesName = async (email) => {
microservices-middleware/server/utility/smsUtility.js:145:hardcoded string:    const salesDoc = await Employee.findOne({ email }).select("name").lean();
microservices-middleware/server/utility/smsUtility.js:146:hardcoded number:    return {name: salesDoc?.name?.length > 30 ? salesDoc?.name?.slice(0, 30) : salesDoc?.name};
microservices-middleware/server/utility/smsUtility.js:149:hardcoded variable:const courseIdList = {
microservices-middleware/server/utility/smsUtility.js:150:hardcoded string:    "712615": "JEE Prep - 1 year Revision Powerstep Program-Hybrid",
microservices-middleware/server/utility/smsUtility.js:151:hardcoded string:    "712590": "JEE Prep - 1 year Revision Powerstep Classroom Program",
microservices-middleware/server/utility/smsUtility.js:152:hardcoded string:    "712597": "NEET Prep - 1 year Revision Program-Hybrid",
microservices-middleware/server/utility/smsUtility.js:153:hardcoded string:    "712643": "NEET Prep - 1 year Revision Classroom Program"
microservices-middleware/server/utility/smsUtility.js:156:hardcoded variable:const getAakashProductName = async (formValues) => {
microservices-middleware/server/utility/smsUtility.js:157:hardcoded string:    let productName = ""
microservices-middleware/server/utility/smsUtility.js:158:hardcoded string:    if (courseIdList[get(formValues, "courseId", "")]) {
microservices-middleware/server/utility/smsUtility.js:159:hardcoded string:        productName = courseIdList[get(formValues, "courseId", "")]
microservices-middleware/server/utility/smsUtility.js:161:hardcoded string:        productName = `${formValues.subCourse} Prep - ${formValues.initialClass == "11" ? "2" : "1"} year ${formValues.typeOfClass === "Regular" ? "Classroom" : "Hybrid"} program`
microservices-middleware/server/utility/smsUtility.js:166:hardcoded variable:const getQuotationUrl = async (identifier, consumerUrl=config.otp.quotationConsumerUrl) => {
microservices-middleware/server/utility/smsUtility.js:167:hardcoded number:    // config.cashback.key -> must be a 32 bit key
microservices-middleware/server/utility/smsUtility.js:169:hardcoded variable:        const sessionKey = Buffer.from(config.otp.encryptionKey);
microservices-middleware/server/utility/smsUtility.js:170:hardcoded variable:        const iv = Buffer.from(randomstring.generate({
microservices-middleware/server/utility/smsUtility.js:171:hardcoded number:            length: 16,
microservices-middleware/server/utility/smsUtility.js:172:hardcoded string:            charset: 'alphabetic'
microservices-middleware/server/utility/smsUtility.js:174:hardcoded string:        const cipher = crypto.createCipheriv('aes-256-cbc', sessionKey, iv);
microservices-middleware/server/utility/smsUtility.js:175:hardcoded string:        let encryptedData = cipher.update(identifier, 'utf8', 'base64');
microservices-middleware/server/utility/smsUtility.js:176:hardcoded string:        encryptedData += cipher.final('base64');
microservices-middleware/server/utility/smsUtility.js:178:hardcoded string:        let result = Buffer.concat([iv, Buffer.from(encryptedData, "base64")]);
microservices-middleware/server/utility/smsUtility.js:179:hardcoded string:        result = result.toString('base64');
microservices-middleware/server/utility/smsUtility.js:181:hardcoded variable:        const urlSegment = encodeDecodeUrlSegment(result, true);
microservices-middleware/server/utility/smsUtility.js:182:hardcoded object:        const longUrl = `${consumerUrl}/${urlSegment}`;
microservices-middleware/server/utility/smsUtility.js:185:hardcoded object:            const response = await urlShortenerFactory.getUrlShortener().shortenUrl(longUrl) || {};
microservices-middleware/server/utility/smsUtility.js:188:hardcoded string:                throw new Error("Unable to short the url.");
microservices-middleware/server/utility/smsUtility.js:200:hardcoded variable:const getQuotationSmsTemplate = async (quotation, otp) => {
microservices-middleware/server/utility/smsUtility.js:201:hardcoded object:    const { _id, finalPrice } = quotation;
microservices-middleware/server/utility/smsUtility.js:204:hardcoded string:        const studentName = startCase(get(quotation, "customerDetails.studentName", ""));
microservices-middleware/server/utility/smsUtility.js:205:hardcoded string:        const branch = startCase(get(quotation, "productDetails.formValues.branch", ""));
microservices-middleware/server/utility/smsUtility.js:206:hardcoded string:        const productName = await getAakashProductName(get(quotation, "productDetails.formValues", {}));
microservices-middleware/server/utility/smsUtility.js:207:hardcoded variable:        const urlSegmentScn = await getQuotationUrl(_id.toString());
microservices-middleware/server/utility/smsUtility.js:209:hardcoded string:        const message = `Dear Parent, \nYou have created a quote for Aakash's ${productName} in ${branch} for Rs. ${finalPrice}.\nThe quotation link: ${urlSegmentScn} \nTo confirm enter the OTP: ${otp}.\nPlease read all TnC carefully.\nKindly do not share this SMS with anyone.\nAakash BYJU'S`;
microservices-middleware/server/utility/smsUtility.js:213:hardcoded string:        throw new Error("Unable to send OTP");
microservices-middleware/server/utility/smsUtility.js:217:hardcoded object:const getAakashPricingSmsTemplate = async ({salesEmail, customerDetails, productDetails, maxPrice, minPrice, netPrice}) => {
microservices-middleware/server/utility/smsUtility.js:220:hardcoded object:        let { MobileNumber, primaryMobileNo } = customerDetails;
microservices-middleware/server/utility/smsUtility.js:222:hardcoded string:        const studentName = startCase(get(customerDetails, "studentName", ""));
microservices-middleware/server/utility/smsUtility.js:223:hardcoded object:        const { formValues } = productDetails;
microservices-middleware/server/utility/smsUtility.js:224:hardcoded variable:        const productName = await getAakashProductName(formValues);
microservices-middleware/server/utility/smsUtility.js:225:hardcoded string:        const date = moment(new Date()).format('LL')
microservices-middleware/server/utility/smsUtility.js:227:hardcoded variable:        const salesPersonDoc = await getSalesName(salesEmail);
microservices-middleware/server/utility/smsUtility.js:228:hardcoded string:        const salesPersonName = startCase(get(salesPersonDoc, "name", ""));
microservices-middleware/server/utility/smsUtility.js:230:hardcoded object:        const message = `Hello ${salesPersonName}\n Your price enquiry for lead ${studentName} with registered mobile number ${primaryMobileNo} for Product ${productName} at ${date} are: \nMRP : ${maxPrice}\nNet Price  : ${netPrice}\nMinimum Price : ${minPrice}\nBYJU'S Team`
microservices-middleware/server/utility/smsUtility.js:235:hardcoded string:        throw new Error("Unable to send pricing details");
microservices-middleware/server/utility/smsUtility.js:239:hardcoded variable:const getQuotationBetaVRSmsTemplate = async (quotation, otp, consumerUrl=config.otp.quotationbetaConsumerUrl, spName) => {
microservices-middleware/server/utility/smsUtility.js:240:hardcoded object:    const { quotationId, finalPrice } = quotation;
microservices-middleware/server/utility/smsUtility.js:241:hardcoded string:    const initialGrade = get(quotation, "students.initialGrade");
microservices-middleware/server/utility/smsUtility.js:242:hardcoded string:    const finalGrade = get(quotation, "students.finalGrade");
microservices-middleware/server/utility/smsUtility.js:243:hardcoded string:    const centreDetails = get(quotation, "batchCentreDetails.centreDetails", {});
microservices-middleware/server/utility/smsUtility.js:244:hardcoded string:    const center = `${get(centreDetails, "city")}-${get(centreDetails, "centre")}`;
microservices-middleware/server/utility/smsUtility.js:246:hardcoded string:        let customerName = startCase(get(quotation, "customerDetails.firstName", ""));
microservices-middleware/server/utility/smsUtility.js:247:hardcoded variable:        const urlSegmentScn = await getQuotationUrl(quotationId.toString(), consumerUrl);
microservices-middleware/server/utility/smsUtility.js:249:hardcoded string:        const message = spName === "byjus_home_tuition" ? `Dear ${customerName} \n Your Quotation ${quotationId} for ${finalPrice}  is created \n Click ${urlSegmentScn} and confirm the order \n OTP ${otp} \n Team BYJU's` : `Dear ${customerName},\nYour Quotation ${quotationId} has been created. The total value is ${finalPrice} INR. \nPlease click the following link to review the order details and TnC.\nEnter the OTP - ${otp} to confirm.\n ${urlSegmentScn} \nDo not share this SMS with anyone.\nTeam BYJU’s.`
microservices-middleware/server/utility/smsUtility.js:252:hardcoded string:        console.log('error', error);
microservices-middleware/server/utility/smsUtility.js:253:hardcoded string:        throw new Error("Unable to send OTP", error);
microservices-middleware/server/utility/queueUtility.js:1:hardcoded file path:const ironMq = require('iron_mq');
microservices-middleware/server/utility/queueUtility.js:2:hardcoded file path:const config = require('../config');
microservices-middleware/server/utility/queueUtility.js:4:hardcoded variable:const pushIntoOhOrderQueue = async (payload) => {
microservices-middleware/server/utility/queueUtility.js:5:hardcoded variable:    const queueConfig = config.ironMQueue.ohOrders;
microservices-middleware/server/utility/queueUtility.js:7:hardcoded variable:        const client = new ironMq.Client(queueConfig);
microservices-middleware/server/utility/queueUtility.js:8:hardcoded variable:        const queue = client.queue(queueConfig.name);
microservices-middleware/server/utility/draftOrderUtility.js:1:hardcoded object:const { random, padStart, get } = require('lodash');
microservices-middleware/server/utility/draftOrderUtility.js:2:hardcoded file path:const moment = require('moment');
microservices-middleware/server/utility/draftOrderUtility.js:3:hardcoded object:const { BadRequestError } = require('../lib/errors');
microservices-middleware/server/utility/draftOrderUtility.js:4:hardcoded string:const { DraftOrder } = require('@byjus-orders/nexemplum/oms');
microservices-middleware/server/utility/draftOrderUtility.js:6:hardcoded variable:const checkIfDraftOrderExists = async (identifier) => {
microservices-middleware/server/utility/draftOrderUtility.js:7:hardcoded string:    if (!identifier) throw new BadRequestError('Identifier is missing.');
microservices-middleware/server/utility/draftOrderUtility.js:10:hardcoded variable:        const draftOrder = await DraftOrder.findById(identifier).lean();
microservices-middleware/server/utility/draftOrderUtility.js:22:hardcoded object:        throw new Error(error || `Error in fetching draft order - ${identifier}`);
microservices-middleware/server/utility/draftOrderUtility.js:26:hardcoded variable:const generateDraftOrderId = () => {
microservices-middleware/server/utility/draftOrderUtility.js:27:hardcoded string:    const currentDate = moment().format('YYMMDDHHmmss');
microservices-middleware/server/utility/draftOrderUtility.js:28:hardcoded number:    const randomNumber = random(1, 999);
microservices-middleware/server/utility/draftOrderUtility.js:29:hardcoded number:    const paddedRandomNumber = padStart(randomNumber, 4, 0);
microservices-middleware/server/utility/draftOrderUtility.js:30:hardcoded object:    const draftOrderRefId = `DO-${currentDate}${paddedRandomNumber}`;
microservices-middleware/server/utility/draftOrderUtility.js:34:hardcoded variable:const getLoggedInUserRole = async (identifier) => {
microservices-middleware/server/utility/draftOrderUtility.js:35:hardcoded variable:    const orderDoc = await DraftOrder.findById(identifier).lean();
microservices-middleware/server/utility/draftOrderUtility.js:36:hardcoded string:    const leadDetails = get(orderDoc, "leadDetails", {});
microservices-middleware/server/utility/draftOrderUtility.js:38:hardcoded string:    const role = get(leadDetails, "loggedInRole", "");
microservices-middleware/server/utility/draftOrderConverterUtility.js:1:hardcoded object:const { get } = require('lodash');
microservices-middleware/server/utility/draftOrderConverterUtility.js:3:hardcoded variable:const getDraftOrderConverter = async (leadOrderData) => {
microservices-middleware/server/utility/draftOrderConverterUtility.js:4:hardcoded object:    const order = { ...leadOrderData };
microservices-middleware/server/utility/draftOrderConverterUtility.js:6:hardcoded string:    const orderPunchingType = get(order, "orderPunchingType", "");
microservices-middleware/server/utility/draftOrderConverterUtility.js:7:hardcoded string:    const leadDetails = getLeadDetails(order, get(order, "leadDetails", {}));
microservices-middleware/server/utility/draftOrderConverterUtility.js:8:hardcoded variable:    const salesDetails = getSalesDetails(order);
microservices-middleware/server/utility/draftOrderConverterUtility.js:9:hardcoded variable:    const addressDetails = getAddressDetails(order);
microservices-middleware/server/utility/draftOrderConverterUtility.js:10:hardcoded variable:    const customerDetails = getCustomerDetails(order);
microservices-middleware/server/utility/draftOrderConverterUtility.js:12:hardcoded variable:    const convertedOrder = {
microservices-middleware/server/utility/draftOrderConverterUtility.js:17:hardcoded string:        contactDetails: get(order, "contactDetails"),
microservices-middleware/server/utility/draftOrderConverterUtility.js:24:hardcoded variable:const getLeadDetails = (order, leadDetails) => {
microservices-middleware/server/utility/draftOrderConverterUtility.js:26:hardcoded string:        studentMobile: get(leadDetails, "studentMobile", ""),
microservices-middleware/server/utility/draftOrderConverterUtility.js:27:hardcoded string:        createdById: get(leadDetails, "createdById", ""),
microservices-middleware/server/utility/draftOrderConverterUtility.js:28:hardcoded string:        createdByEmailId: get(leadDetails, "createdByEmailId", ""),
microservices-middleware/server/utility/draftOrderConverterUtility.js:29:hardcoded string:        isEligibleForEvalution: get(leadDetails, "isEligibleForEvalution", false),
microservices-middleware/server/utility/draftOrderConverterUtility.js:30:hardcoded string:        loggedInEmailId: get(order, 'orderPunchedBy'),
microservices-middleware/server/utility/draftOrderConverterUtility.js:31:hardcoded string:        orderPunchedByRole: get(order, 'orderPunchedByRole'),
microservices-middleware/server/utility/draftOrderConverterUtility.js:32:hardcoded string:        prospectId: get(order, 'leadsquaredProspectId'),
microservices-middleware/server/utility/draftOrderConverterUtility.js:33:hardcoded string:        accountNumber: get(order, 'leadsquaredAccountNumber'),
microservices-middleware/server/utility/draftOrderConverterUtility.js:37:hardcoded variable:const getSalesDetails = (order) => {
microservices-middleware/server/utility/draftOrderConverterUtility.js:38:hardcoded string:    const mqMessage = get(order, 'mqMessage', {});
microservices-middleware/server/utility/draftOrderConverterUtility.js:40:hardcoded string:        directSalesByRole: get(order, 'orderPunchedForRole', ""),
microservices-middleware/server/utility/draftOrderConverterUtility.js:41:hardcoded string:        directSalesById: get(order, 'sales_person_id'),
microservices-middleware/server/utility/draftOrderConverterUtility.js:42:hardcoded string:        salesAppointmentById: get(order, 'direct_sales_appointment_by_id'),
microservices-middleware/server/utility/draftOrderConverterUtility.js:43:hardcoded string:        typeOfSales: get(order, 'type_of_sales', ""),
microservices-middleware/server/utility/draftOrderConverterUtility.js:49:hardcoded variable:const getAddressDetails = (order) => {
microservices-middleware/server/utility/draftOrderConverterUtility.js:50:hardcoded string:    const customerDetails = get(order, "customerDetails", []);
microservices-middleware/server/utility/draftOrderConverterUtility.js:51:hardcoded string:    const mqMessage = get(order, 'mqMessage', {});
microservices-middleware/server/utility/draftOrderConverterUtility.js:52:hardcoded string:    const ohRequestBody = get(mqMessage, 'ohRequestBody', {});
microservices-middleware/server/utility/draftOrderConverterUtility.js:53:hardcoded variable:    const addressObj = {
microservices-middleware/server/utility/draftOrderConverterUtility.js:54:hardcoded string:        address: get(customerDetails[0], "address"),
microservices-middleware/server/utility/draftOrderConverterUtility.js:55:hardcoded string:        city: get(customerDetails[0], "city"),
microservices-middleware/server/utility/draftOrderConverterUtility.js:56:hardcoded string:        zipCode: get(customerDetails[0], "zipcode"),
microservices-middleware/server/utility/draftOrderConverterUtility.js:57:hardcoded string:        state: get(customerDetails[0], "state"),
microservices-middleware/server/utility/draftOrderConverterUtility.js:58:hardcoded string:        country: get(customerDetails[0], "country"),
microservices-middleware/server/utility/draftOrderConverterUtility.js:59:hardcoded string:        addressId: get(ohRequestBody, 'billing_address_id')
microservices-middleware/server/utility/draftOrderConverterUtility.js:67:hardcoded variable:const getCustomerDetails = (order) => {
microservices-middleware/server/utility/draftOrderConverterUtility.js:68:hardcoded string:    const customerDetail = get(order, "customerDetails", []);
microservices-middleware/server/utility/draftOrderConverterUtility.js:69:hardcoded number:    let customerDetails = customerDetail[0]
microservices-middleware/server/utility/draftOrderConverterUtility.js:70:hardcoded string:    const mqMessage = get(order, 'mqMessage', {});
microservices-middleware/server/utility/draftOrderConverterUtility.js:71:hardcoded string:    const ohRequestBody = get(mqMessage, 'ohRequestBody', {});
microservices-middleware/server/utility/draftOrderConverterUtility.js:73:hardcoded string:        studentMobileNo: get(customerDetails, 'primaryMobile', ""),
microservices-middleware/server/utility/draftOrderConverterUtility.js:74:hardcoded string:        studentName: get(customerDetails, 'studentName', ""),
microservices-middleware/server/utility/draftOrderConverterUtility.js:75:hardcoded string:        parentMobileNo: get(customerDetails, 'parentMobile', ""),
microservices-middleware/server/utility/draftOrderConverterUtility.js:76:hardcoded string:        contactId: get(ohRequestBody, "contactId"),
microservices-middleware/server/utility/draftOrderConverterUtility.js:77:hardcoded string:        parentName: get(customerDetails, "parentName"),
microservices-middleware/server/utility/draftOrderConverterUtility.js:78:hardcoded string:        parentMobile: get(customerDetails, "parentMobile"),
microservices-middleware/server/utility/draftOrderConverterUtility.js:79:hardcoded string:        email: get(customerDetails, 'studentEmail'),
microservices-middleware/server/utility/draftOrderConverterUtility.js:80:hardcoded string:        alternateEmail: get(customerDetails, "alternateEmail"),
microservices-middleware/server/utility/testOrderConverter.js:1:hardcoded object:const { getOldConvertedOrder } = require('./orderConverterUtility');
microservices-middleware/server/utility/testOrderConverter.js:3:hardcoded variable:const order = {
microservices-middleware/server/utility/testOrderConverter.js:4:hardcoded number:    finalPrice: 20000,
microservices-middleware/server/utility/testOrderConverter.js:10:hardcoded string:        contactId: "829499",
microservices-middleware/server/utility/testOrderConverter.js:11:hardcoded string:        studentName: "XYZ",
microservices-middleware/server/utility/testOrderConverter.js:12:hardcoded string:        studentEmail: "abc",
microservices-middleware/server/utility/testOrderConverter.js:13:hardcoded string:        studentMobileNo: "9897677111",
microservices-middleware/server/utility/testOrderConverter.js:14:hardcoded string:        parentName: "POL",
microservices-middleware/server/utility/testOrderConverter.js:15:hardcoded string:        parentEmail: "xyz@gmail.com",
microservices-middleware/server/utility/testOrderConverter.js:16:hardcoded string:        parentMobileNo: "9897677111",
microservices-middleware/server/utility/testOrderConverter.js:20:hardcoded string:            addressId: "1829513",
microservices-middleware/server/utility/testOrderConverter.js:21:hardcoded string:            address: "IBC",
microservices-middleware/server/utility/testOrderConverter.js:22:hardcoded string:            city: "BLR",
microservices-middleware/server/utility/testOrderConverter.js:23:hardcoded string:            state: "karnataka",
microservices-middleware/server/utility/testOrderConverter.js:24:hardcoded string:            country: "india",
microservices-middleware/server/utility/testOrderConverter.js:25:hardcoded string:            countryCode: "91",
microservices-middleware/server/utility/testOrderConverter.js:26:hardcoded string:            zipcode: "560053"
microservices-middleware/server/utility/testOrderConverter.js:29:hardcoded string:            addressId: "1829513",
microservices-middleware/server/utility/testOrderConverter.js:30:hardcoded string:            address: "IBC",
microservices-middleware/server/utility/testOrderConverter.js:31:hardcoded string:            city: "BLR",
microservices-middleware/server/utility/testOrderConverter.js:32:hardcoded string:            state: "karnataka",
microservices-middleware/server/utility/testOrderConverter.js:33:hardcoded string:            country: "india",
microservices-middleware/server/utility/testOrderConverter.js:34:hardcoded string:            countryCode: "91",
microservices-middleware/server/utility/testOrderConverter.js:35:hardcoded string:            zipcode: "560053"
microservices-middleware/server/utility/testOrderConverter.js:40:hardcoded string:        "parentOrderItems": [
microservices-middleware/server/utility/testOrderConverter.js:42:hardcoded string:                "orderItemId": "1156400",
microservices-middleware/server/utility/testOrderConverter.js:43:hardcoded string:                "name": "IAS 2019 CURRENT AFFAIRS",
microservices-middleware/server/utility/testOrderConverter.js:44:hardcoded string:                "sku": "IAS 2019 CURRENT AFFAIRS",
microservices-middleware/server/utility/testOrderConverter.js:45:hardcoded string:                "price": 6666.6667,
microservices-middleware/server/utility/testOrderConverter.js:46:hardcoded string:                "qty_ordered": 1,
microservices-middleware/server/utility/testOrderConverter.js:47:hardcoded string:                "tax_percent": 0,
microservices-middleware/server/utility/testOrderConverter.js:48:hardcoded string:                "discount_percent": 0
microservices-middleware/server/utility/testOrderConverter.js:51:hardcoded string:                "orderItemId": "1186291",
microservices-middleware/server/utility/testOrderConverter.js:52:hardcoded string:                "name": "IAS 2019 Mains Test series",
microservices-middleware/server/utility/testOrderConverter.js:53:hardcoded string:                "sku": "IAS 2019 Mains Test series",
microservices-middleware/server/utility/testOrderConverter.js:54:hardcoded string:                "price": 6666.6667,
microservices-middleware/server/utility/testOrderConverter.js:55:hardcoded string:                "qty_ordered": 1,
microservices-middleware/server/utility/testOrderConverter.js:56:hardcoded string:                "tax_percent": 0,
microservices-middleware/server/utility/testOrderConverter.js:57:hardcoded string:                "discount_percent": 0
microservices-middleware/server/utility/testOrderConverter.js:60:hardcoded string:                "orderItemId": "1023583",
microservices-middleware/server/utility/testOrderConverter.js:61:hardcoded string:                "name": "IAS (Lenovo Tablet-Byjus)",
microservices-middleware/server/utility/testOrderConverter.js:62:hardcoded string:                "sku": "IAS (Lenovo Tablet-Byjus)",
microservices-middleware/server/utility/testOrderConverter.js:63:hardcoded string:                "price": 6666.6667,
microservices-middleware/server/utility/testOrderConverter.js:64:hardcoded string:                "qty_ordered": 1,
microservices-middleware/server/utility/testOrderConverter.js:65:hardcoded string:                "tax_percent": 0,
microservices-middleware/server/utility/testOrderConverter.js:66:hardcoded string:                "discount_percent": 0
microservices-middleware/server/utility/testOrderConverter.js:69:hardcoded string:        "childOrderItems": []
microservices-middleware/server/utility/testOrderConverter.js:72:hardcoded string:        type: "Single",
microservices-middleware/server/utility/testOrderConverter.js:73:hardcoded string:        course: "IAS",
microservices-middleware/server/utility/testOrderConverter.js:74:hardcoded string:        board: "CBSC",
microservices-middleware/server/utility/testOrderConverter.js:75:hardcoded string:        initialClass: "",
microservices-middleware/server/utility/testOrderConverter.js:76:hardcoded string:        finalClass: "",
microservices-middleware/server/utility/testOrderConverter.js:77:hardcoded number:        validity: 2019,
microservices-middleware/server/utility/testOrderConverter.js:80:hardcoded string:                "orderItemId": "1023583",
microservices-middleware/server/utility/testOrderConverter.js:81:hardcoded string:                "name": "IAS (Lenovo Tablet-Byjus)",
microservices-middleware/server/utility/testOrderConverter.js:82:hardcoded string:                "sku": "IAS (Lenovo Tablet-Byjus)",
microservices-middleware/server/utility/testOrderConverter.js:83:hardcoded string:                "price": 6666.6667,
microservices-middleware/server/utility/testOrderConverter.js:84:hardcoded string:                "qty_ordered": 1,
microservices-middleware/server/utility/testOrderConverter.js:85:hardcoded string:                "tax_percent": 0,
microservices-middleware/server/utility/testOrderConverter.js:86:hardcoded string:                "discount_percent": 0
microservices-middleware/server/utility/testOrderConverter.js:89:hardcoded string:                "orderItemId": "1156400",
microservices-middleware/server/utility/testOrderConverter.js:90:hardcoded string:                "name": "IAS 2019 CURRENT AFFAIRS",
microservices-middleware/server/utility/testOrderConverter.js:91:hardcoded string:                "sku": "IAS 2019 CURRENT AFFAIRS",
microservices-middleware/server/utility/testOrderConverter.js:92:hardcoded string:                "price": 6666.6667,
microservices-middleware/server/utility/testOrderConverter.js:93:hardcoded string:                "qty_ordered": 1,
microservices-middleware/server/utility/testOrderConverter.js:94:hardcoded string:                "tax_percent": 0,
microservices-middleware/server/utility/testOrderConverter.js:95:hardcoded string:                "discount_percent": 0
microservices-middleware/server/utility/testOrderConverter.js:98:hardcoded string:                "orderItemId": "1186291",
microservices-middleware/server/utility/testOrderConverter.js:99:hardcoded string:                "name": "IAS 2019 Mains Test series",
microservices-middleware/server/utility/testOrderConverter.js:100:hardcoded string:                "sku": "IAS 2019 Mains Test series",
microservices-middleware/server/utility/testOrderConverter.js:101:hardcoded string:                "price": 6666.6667,
microservices-middleware/server/utility/testOrderConverter.js:102:hardcoded string:                "qty_ordered": 1,
microservices-middleware/server/utility/testOrderConverter.js:103:hardcoded string:                "tax_percent": 0,
microservices-middleware/server/utility/testOrderConverter.js:104:hardcoded string:                "discount_percent": 0
microservices-middleware/server/utility/testOrderConverter.js:106:hardcoded array:            mentorings: []
microservices-middleware/server/utility/testOrderConverter.js:110:hardcoded string:        type: "EMI",
microservices-middleware/server/utility/testOrderConverter.js:111:hardcoded number:        totalAmount: 18000,
microservices-middleware/server/utility/testOrderConverter.js:112:hardcoded number:        totalEmiAmount: 5000,
microservices-middleware/server/utility/testOrderConverter.js:113:hardcoded number:        totalPrepaidAmount: 130000,
microservices-middleware/server/utility/testOrderConverter.js:114:hardcoded number:        totalPostpaidAmount: 0,
microservices-middleware/server/utility/testOrderConverter.js:115:hardcoded string:        paymentMethod: "NON EMI PayU",
microservices-middleware/server/utility/testOrderConverter.js:117:hardcoded string:            type: "EMI",
microservices-middleware/server/utility/testOrderConverter.js:118:hardcoded string:            referenceId: "emiRef1",
microservices-middleware/server/utility/testOrderConverter.js:119:hardcoded string:            provider: "BAJAJ",
microservices-middleware/server/utility/testOrderConverter.js:120:hardcoded number:            amount: 5000,
microservices-middleware/server/utility/testOrderConverter.js:121:hardcoded number:            tenure: 9,
microservices-middleware/server/utility/testOrderConverter.js:122:hardcoded array:            attachments: []
microservices-middleware/server/utility/testOrderConverter.js:124:hardcoded string:            type: "DOWN_PAYMENT",
microservices-middleware/server/utility/testOrderConverter.js:125:hardcoded string:            referenceId: "nonemiRef1",
microservices-middleware/server/utility/testOrderConverter.js:126:hardcoded string:            provider: "PAYU",
microservices-middleware/server/utility/testOrderConverter.js:127:hardcoded number:            amount: 13000,
microservices-middleware/server/utility/testOrderConverter.js:128:hardcoded number:            tenure: 9,
microservices-middleware/server/utility/testOrderConverter.js:129:hardcoded array:            attachments: []
microservices-middleware/server/utility/testOrderConverter.js:133:hardcoded string:        category: "payment",
microservices-middleware/server/utility/testOrderConverter.js:134:hardcoded string:        type: "total amount",
microservices-middleware/server/utility/testOrderConverter.js:135:hardcoded string:        comment: "total amount is 18000"
microservices-middleware/server/utility/testOrderConverter.js:138:hardcoded string:        code: "c2000",
microservices-middleware/server/utility/testOrderConverter.js:139:hardcoded number:        amount: 2000
microservices-middleware/server/utility/testOrderConverter.js:145:hardcoded string:        typeOfSales: "Test Direct Sale",
microservices-middleware/server/utility/testOrderConverter.js:146:hardcoded string:        directSalesBy: "subham.sunny@byjus.com",
microservices-middleware/server/utility/testOrderConverter.js:147:hardcoded string:        directSalesById: "5996",
microservices-middleware/server/utility/testOrderConverter.js:148:hardcoded string:        salesAppointmentBy: "subham.sunny@byjus.com",
microservices-middleware/server/utility/testOrderConverter.js:149:hardcoded string:        salesAppointmentById: "5996",
microservices-middleware/server/utility/testOrderConverter.js:150:hardcoded string:        salesClosedBy: "subham.sunny@byjus.com",
microservices-middleware/server/utility/testOrderConverter.js:151:hardcoded string:        salesClosedById: "5996",
microservices-middleware/server/utility/testOrderConverter.js:154:hardcoded string:        sourceCampaign: "",
microservices-middleware/server/utility/testOrderConverter.js:155:hardcoded string:        sourceOfLead: "",
microservices-middleware/server/utility/testOrderConverter.js:156:hardcoded string:        leadSource: "",
microservices-middleware/server/utility/testOrderConverter.js:157:hardcoded string:        sourceMedium: "",
microservices-middleware/server/utility/testOrderConverter.js:158:hardcoded string:        sourceCampaignId: "",
microservices-middleware/server/utility/testOrderConverter.js:159:hardcoded string:        uTMSource: "",
microservices-middleware/server/utility/testOrderConverter.js:160:hardcoded string:        campaignName: ""
microservices-middleware/server/utility/testOrderConverter.js:163:hardcoded number:        accountNo: 24693,
microservices-middleware/server/utility/testOrderConverter.js:164:hardcoded string:        prospectId: "5e7533b2-dac6-4b18-b8bc-33ce15bc6ea3"
microservices-middleware/server/utility/testOrderConverter.js:167:hardcoded string:        otp: "4098",
microservices-middleware/server/utility/testOrderConverter.js:168:hardcoded string:        createdAt: "",
microservices-middleware/server/utility/testOrderConverter.js:169:hardcoded string:        message: "test otp",
microservices-middleware/server/utility/testOrderConverter.js:171:hardcoded object:    qrCodeDetails: {},
microservices-middleware/server/utility/testOrderConverter.js:173:hardcoded string:    updatedBy: "swati.gupta@byjus.com"
microservices-middleware/server/utility/testOrderConverter.js:179:hardcoded variable:const convertedOrder = async () => {
microservices-middleware/server/utility/testOrderConverter.js:180:hardcoded variable:    const oldOrder = await getOldConvertedOrder(order);
microservices-middleware/server/utility/testOrderConverter.js:181:hardcoded number:    console.log(JSON.stringify(oldOrder, undefined, 1));
microservices-middleware/server/utility/orderUtility.js:1:hardcoded object:const { BadRequestError } = require('../lib/errors');
microservices-middleware/server/utility/orderUtility.js:2:hardcoded object:const { get, find, isEmpty } = require('lodash');
microservices-middleware/server/utility/orderUtility.js:4:hardcoded string:const { LeadoOrder: Order } = require('@byjus-orders/nexemplum/oms');
microservices-middleware/server/utility/orderUtility.js:6:hardcoded object:const { MIN_DAYS_TO_ALLOW_ORDER_PUNCHING } = require('../src/detailsmanagement/constant');
microservices-middleware/server/utility/orderUtility.js:7:hardcoded object:const { detailsPermissions } = require("./screenPermission");
microservices-middleware/server/utility/orderUtility.js:8:hardcoded object:const { MOBILE_AND_EMAIL_ERROR_INDEPENDENT_TEAMS } = require("../src/detailsmanagement/constant");
microservices-middleware/server/utility/orderUtility.js:11:hardcoded number: * Check order exists to show upgrade button incase of lead switch from 1 account to another
microservices-middleware/server/utility/orderUtility.js:14:hardcoded variable:const checkIfOrderExistsForUpgrade = async (lsDetails) => {
microservices-middleware/server/utility/orderUtility.js:15:hardcoded string:    if (!lsDetails) throw new BadRequestError('orderDetails is missing.');
microservices-middleware/server/utility/orderUtility.js:18:hardcoded string:        const { prospectId = "", studentMobile = "" } = lsDetails;
microservices-middleware/server/utility/orderUtility.js:19:hardcoded variable:        let queryObj = [
microservices-middleware/server/utility/orderUtility.js:20:hardcoded object:            { leadsquaredProspectId: prospectId },
microservices-middleware/server/utility/orderUtility.js:21:hardcoded string:            { "customerDetails.leadDetails.7461.leadsquaredProspectId": prospectId }
microservices-middleware/server/utility/orderUtility.js:23:hardcoded string:        if (studentMobile != "") {
microservices-middleware/server/utility/orderUtility.js:24:hardcoded string:            queryObj = [...queryObj, { "customerDetails.studentMobile": studentMobile.trim() },
microservices-middleware/server/utility/orderUtility.js:25:hardcoded string:            { "customerDetails.parentMobile": studentMobile.trim() }]
microservices-middleware/server/utility/orderUtility.js:27:hardcoded variable:        const orders = await Order.find({
microservices-middleware/server/utility/orderUtility.js:28:hardcoded string:            "$or": queryObj,
microservices-middleware/server/utility/orderUtility.js:29:hardcoded string:            "orderId": { "$exists": true },
microservices-middleware/server/utility/orderUtility.js:30:hardcoded string:            "createdSource": { "$ne": "OH" }
microservices-middleware/server/utility/orderUtility.js:31:hardcoded number:        }).sort({ createdAt: -1 }).lean();
microservices-middleware/server/utility/orderUtility.js:35:hardcoded object:        throw new Error(error || `Error in fetching order - ${identifier}`);
microservices-middleware/server/utility/orderUtility.js:39:hardcoded variable:const checkNewOrderPunchingEligibilityOnSameLead = async (lsDetails) => {
microservices-middleware/server/utility/orderUtility.js:40:hardcoded string:    if (!lsDetails) throw new BadRequestError('orderDetails is missing.');
microservices-middleware/server/utility/orderUtility.js:43:hardcoded string:        const { prospectId = "", studentMobile = "", accountNumber = "", user = {} } = lsDetails;
microservices-middleware/server/utility/orderUtility.js:44:hardcoded string:        const userPermissions = get(user, "permissions", []);
microservices-middleware/server/utility/orderUtility.js:45:hardcoded string:        const vertical = get(user, "vertical", "") || "";
microservices-middleware/server/utility/orderUtility.js:46:hardcoded variable:        const ignoreMobileCheck = userPermissions.includes(detailsPermissions.ignorePhoneDuplicityCheck);
microservices-middleware/server/utility/orderUtility.js:47:hardcoded string:        if (MOBILE_AND_EMAIL_ERROR_INDEPENDENT_TEAMS(vertical) || ["24693"].includes(accountNumber) || ignoreMobileCheck) {
microservices-middleware/server/utility/orderUtility.js:50:hardcoded variable:        const filterQuery = {
microservices-middleware/server/utility/orderUtility.js:52:hardcoded object:              { leadsquaredProspectId: prospectId }
microservices-middleware/server/utility/orderUtility.js:54:hardcoded string:            "customerDetails.productInfo.validity": {
microservices-middleware/server/utility/orderUtility.js:55:hardcoded string:              $not: { $regex: "trial", $options: "i" }
microservices-middleware/server/utility/orderUtility.js:57:hardcoded string:            orderPunchingType: { $nin: ["corporate_order", "bep"] },
microservices-middleware/server/utility/orderUtility.js:59:hardcoded number:              $gte: new Date( new Date().getTime() - MIN_DAYS_TO_ALLOW_ORDER_PUNCHING * 24 * 60 * 60 * 1000 )
microservices-middleware/server/utility/orderUtility.js:61:hardcoded object:            orderId: { $exists: true },
microservices-middleware/server/utility/orderUtility.js:62:hardcoded string:            orderhiveOrderStatus: { $nin: ["cancelled"] },
microservices-middleware/server/utility/orderUtility.js:63:hardcoded string:            orderPunchingCategory: { $nin: ["mlp"] },
microservices-middleware/server/utility/orderUtility.js:68:hardcoded string:                { "customerDetails.studentMobile": studentMobile.trim() },
microservices-middleware/server/utility/orderUtility.js:69:hardcoded string:                { "customerDetails.parentMobile": studentMobile.trim() }
microservices-middleware/server/utility/orderUtility.js:75:hardcoded object:        throw new Error(error || `Error in fetching order - ${identifier}`);
microservices-middleware/server/utility/orderUtility.js:79:hardcoded number:const checkIf2kTrialOrder = ({ order }) => {
microservices-middleware/server/utility/orderUtility.js:81:hardcoded string:        let validity = get(order, 'customerDetails[0].productInfo[0].validity', '');
microservices-middleware/server/utility/orderUtility.js:82:hardcoded string:        const isTrial = ['trial_pack', 'TRIAL_PACK'].includes(validity) ? true : false;
microservices-middleware/server/utility/orderUtility.js:89:hardcoded variable:const getReportingEmailByRole = (user, role) => {
microservices-middleware/server/utility/orderUtility.js:90:hardcoded object:    const { reportingTo = {} } = user || {};
microservices-middleware/server/utility/orderUtility.js:91:hardcoded array:    const reportingConfigArray = get(reportingTo, role) || [];
microservices-middleware/server/utility/orderUtility.js:93:hardcoded string:    const reportingConfig = find(reportingConfigArray, (c) => c["userType"] === "PRIMARY") || reportingConfigArray[0];
microservices-middleware/server/utility/orderUtility.js:94:hardcoded string:    const emailId = get(reportingConfig, 'userEmail');
microservices-middleware/server/utility/orderUtility.js:103:hardcoded number:    checkIf2kTrialOrder
microservices-middleware/server/utility/s3Utility.js:1:hardcoded file path:const AWS = require('aws-sdk');
microservices-middleware/server/utility/s3Utility.js:3:hardcoded number:// const s3Init = s3Upload.init(config.aws.s3.clientId, config.aws.s3.clientSecret);
microservices-middleware/server/utility/s3Utility.js:5:hardcoded variable:const getPresignedUrl = async (work, filePath, bucket_name, expire_time, accessKey, secretAccessKey, region) => {
microservices-middleware/server/utility/s3Utility.js:7:hardcoded number:        const s3 = new AWS.S3()
microservices-middleware/server/utility/s3Utility.js:9:hardcoded string:            signatureVersion: 'v4',
microservices-middleware/server/utility/s3Utility.js:14:hardcoded number:        const url = s3.getSignedUrl(work, {
microservices-middleware/server/utility/externalApiUtility.js:1:hardcoded file path:const request = require("request-promise");
microservices-middleware/server/utility/externalApiUtility.js:3:hardcoded file path:const config = require('../config');
microservices-middleware/server/utility/externalApiUtility.js:4:hardcoded object:const { BadRequestError } = require("../lib/errors");
microservices-middleware/server/utility/externalApiUtility.js:5:hardcoded object:const { NODE_ENV } = process.env;
microservices-middleware/server/utility/externalApiUtility.js:6:hardcoded string:const TllmsClient = require('@byjus-orders/tyrion-plugins/tllms/Tllms');
microservices-middleware/server/utility/externalApiUtility.js:7:hardcoded string:const Aakash = require('@byjus-orders/tyrion-plugins/kart/aakash/AakashApi');
microservices-middleware/server/utility/externalApiUtility.js:8:hardcoded object:const { setupOHToken } = require('../config/setupToken')
microservices-middleware/server/utility/externalApiUtility.js:10:hardcoded file path:const paymentApiUtility = require('./apis/paymentApiUtility');
microservices-middleware/server/utility/externalApiUtility.js:11:hardcoded file path:const uxosApiUtility = require('./apis/uxosApiUtility');
microservices-middleware/server/utility/externalApiUtility.js:14:hardcoded object:const { isDevEnv } = require("../lib/featureHelper");
microservices-middleware/server/utility/externalApiUtility.js:16:hardcoded variable:const callNucleusApi = async (urlSegment, method, payload, isSpecialReq) => {
microservices-middleware/server/utility/externalApiUtility.js:21:hardcoded variable:    const uriMap = {
microservices-middleware/server/utility/externalApiUtility.js:22:hardcoded object:        local: `https://dev-nucleus.byjusorders.com/nucleusapi/${urlSegment}`,
microservices-middleware/server/utility/externalApiUtility.js:24:hardcoded object:        //default: `https://dev-nucleus.byjusorders.com/nucleusapi/${urlSegment}`,
microservices-middleware/server/utility/externalApiUtility.js:25:hardcoded object:        default: `${config.nucleusBaseUrl}/${urlSegment}`
microservices-middleware/server/utility/externalApiUtility.js:27:hardcoded string:    const uri = (isSpecialReq && NODE_ENV === "local") ? uriMap['local'] : uriMap['default'];
microservices-middleware/server/utility/externalApiUtility.js:28:hardcoded variable:    const options = {
microservices-middleware/server/utility/externalApiUtility.js:33:hardcoded string:            "Content-Type": "application/json",
microservices-middleware/server/utility/externalApiUtility.js:34:hardcoded string:            "x-api-key": process.env.NUCLEUS_API_TOKEN,
microservices-middleware/server/utility/externalApiUtility.js:35:hardcoded string:            "x-app-origin": "kart"
microservices-middleware/server/utility/externalApiUtility.js:39:hardcoded string:    if (["patch", "post", "put", "delete"].includes(method.toLowerCase())) {
microservices-middleware/server/utility/externalApiUtility.js:40:hardcoded string:        options["body"] = payload
microservices-middleware/server/utility/externalApiUtility.js:50:hardcoded variable:const callStmsApi = async (urlSegment, method, payload) => {
microservices-middleware/server/utility/externalApiUtility.js:51:hardcoded object:    const uri = `${config.stmsBaseUrl}/${urlSegment}`
microservices-middleware/server/utility/externalApiUtility.js:52:hardcoded variable:    const options = {
microservices-middleware/server/utility/externalApiUtility.js:57:hardcoded string:            "Content-Type": "application/json",
microservices-middleware/server/utility/externalApiUtility.js:58:hardcoded string:            "x-api-key": process.env.NUCLEUS_API_TOKEN,
microservices-middleware/server/utility/externalApiUtility.js:59:hardcoded string:            "x-app-origin": "kart"
microservices-middleware/server/utility/externalApiUtility.js:63:hardcoded string:    if (["post", "get"].includes(method.toLowerCase())) {
microservices-middleware/server/utility/externalApiUtility.js:64:hardcoded string:        options["body"] = payload
microservices-middleware/server/utility/externalApiUtility.js:74:hardcoded variable:const callUxosApi = async (urlSegment, method, payload) => {
microservices-middleware/server/utility/externalApiUtility.js:75:hardcoded object:    const uri = `${config.uxosBaseUrl}/${urlSegment}`
microservices-middleware/server/utility/externalApiUtility.js:76:hardcoded variable:    const options = {
microservices-middleware/server/utility/externalApiUtility.js:81:hardcoded string:            "Content-Type": "application/json",
microservices-middleware/server/utility/externalApiUtility.js:82:hardcoded string:            "x-api-key": process.env.NUCLEUS_API_TOKEN,
microservices-middleware/server/utility/externalApiUtility.js:83:hardcoded string:            "x-app-origin": "kart"
microservices-middleware/server/utility/externalApiUtility.js:87:hardcoded string:    if (["post", "get"].includes(method.toLowerCase())) {
microservices-middleware/server/utility/externalApiUtility.js:88:hardcoded string:        options["body"] = payload
microservices-middleware/server/utility/externalApiUtility.js:98:hardcoded variable:const callCxmsApi = async (urlSegment, method, payload) => {
microservices-middleware/server/utility/externalApiUtility.js:99:hardcoded object:    const uri = `${config.cxmsBaseUrl}/${urlSegment}`
microservices-middleware/server/utility/externalApiUtility.js:100:hardcoded variable:    const options = {
microservices-middleware/server/utility/externalApiUtility.js:105:hardcoded string:            "Content-Type": "application/json",
microservices-middleware/server/utility/externalApiUtility.js:106:hardcoded string:            "x-api-key": process.env.NUCLEUS_API_TOKEN,
microservices-middleware/server/utility/externalApiUtility.js:107:hardcoded string:            "x-app-origin": "kart"
microservices-middleware/server/utility/externalApiUtility.js:111:hardcoded string:    if (["post", "get", "patch"].includes(method.toLowerCase())) {
microservices-middleware/server/utility/externalApiUtility.js:112:hardcoded string:        options["body"] = payload
microservices-middleware/server/utility/externalApiUtility.js:122:hardcoded variable:const getEnumConfiguration = async enumId => {
microservices-middleware/server/utility/externalApiUtility.js:123:hardcoded string:    return callNucleusApi(`usermanagement/settings/enum/${enumId}`, "GET", null);
microservices-middleware/server/utility/externalApiUtility.js:125:hardcoded variable:const getByjusClassesBatchDetails = async payload => {
microservices-middleware/server/utility/externalApiUtility.js:126:hardcoded string:    return callNucleusApi("postordermanagement/batchManagement/listData", "POST", payload);
microservices-middleware/server/utility/externalApiUtility.js:129:hardcoded variable:const callOrderhiveApi = async (payload) => {
microservices-middleware/server/utility/externalApiUtility.js:130:hardcoded variable:    const ohClient = await setupOHToken();
microservices-middleware/server/utility/externalApiUtility.js:133:hardcoded variable:        // const options = {
microservices-middleware/server/utility/externalApiUtility.js:134:hardcoded string:        //     method: 'PUT',
microservices-middleware/server/utility/externalApiUtility.js:139:hardcoded string:        return payload?.method === "sales_person" ? { resp: await ohClient.callOh(payload), ohClient } : await ohClient.callOh(payload);
microservices-middleware/server/utility/externalApiUtility.js:145:hardcoded variable:const callPremiumAccountApi = async (payload) => {
microservices-middleware/server/utility/externalApiUtility.js:147:hardcoded variable:        const option = {
microservices-middleware/server/utility/externalApiUtility.js:148:hardcoded string:            method: 'POST',
microservices-middleware/server/utility/externalApiUtility.js:149:hardcoded object:            url: `${config.premiumAccountBaseUrl}`,
microservices-middleware/server/utility/externalApiUtility.js:152:hardcoded string:                "x-server-token": "02e8b18603294e32a94876d32a31fce9"
microservices-middleware/server/utility/externalApiUtility.js:162:hardcoded variable:const callTllmsToGetLanguage = async (urlSegment) => {
microservices-middleware/server/utility/externalApiUtility.js:163:hardcoded number:    const url = config.tllms.base2Url
microservices-middleware/server/utility/externalApiUtility.js:165:hardcoded variable:        const option = {
microservices-middleware/server/utility/externalApiUtility.js:166:hardcoded string:            method: 'GET',
microservices-middleware/server/utility/externalApiUtility.js:167:hardcoded object:            url: `${url}/languages?${urlSegment}`,
microservices-middleware/server/utility/externalApiUtility.js:170:hardcoded string:                "Content-Type": "application/json",
microservices-middleware/server/utility/externalApiUtility.js:171:hardcoded string:                "CLIENT_ID": config.tllms.clientId,
microservices-middleware/server/utility/externalApiUtility.js:172:hardcoded string:                "CLIENT_SECRET": config.tllms.clientSecret
microservices-middleware/server/utility/externalApiUtility.js:181:hardcoded number:const callTllmsToGetLanguageV2 = async (payload) => {
microservices-middleware/server/utility/externalApiUtility.js:182:hardcoded number:    const url = config.tllms.base2Url
microservices-middleware/server/utility/externalApiUtility.js:184:hardcoded variable:        const option = {
microservices-middleware/server/utility/externalApiUtility.js:185:hardcoded string:            method: 'GET',
microservices-middleware/server/utility/externalApiUtility.js:186:hardcoded object:            url: `${url}/languages`,
microservices-middleware/server/utility/externalApiUtility.js:189:hardcoded string:                "Content-Type": "application/json",
microservices-middleware/server/utility/externalApiUtility.js:190:hardcoded string:                "CLIENT_ID": config.tllms.clientId,
microservices-middleware/server/utility/externalApiUtility.js:191:hardcoded string:                "CLIENT_SECRET": config.tllms.clientSecret
microservices-middleware/server/utility/externalApiUtility.js:201:hardcoded number:const callTllmsToGetCourseDetailsFor14 = async (urlSegment) => {
microservices-middleware/server/utility/externalApiUtility.js:203:hardcoded number:    const url = config.tllms.base2Url
microservices-middleware/server/utility/externalApiUtility.js:205:hardcoded variable:        const option = {
microservices-middleware/server/utility/externalApiUtility.js:206:hardcoded string:            method: 'GET',
microservices-middleware/server/utility/externalApiUtility.js:207:hardcoded object:            url: `${url}/batches?${urlSegment}`,
microservices-middleware/server/utility/externalApiUtility.js:210:hardcoded string:                "Content-Type": "application/json",
microservices-middleware/server/utility/externalApiUtility.js:211:hardcoded string:                "CLIENT_ID": config.tllms.clientId,
microservices-middleware/server/utility/externalApiUtility.js:212:hardcoded string:                "CLIENT_SECRET": config.tllms.clientSecret
microservices-middleware/server/utility/externalApiUtility.js:221:hardcoded number://new tutor+ batching api for byjus-classes March 2023
microservices-middleware/server/utility/externalApiUtility.js:222:hardcoded variable:const tutorPlusBatchesApi = async (data) => {
microservices-middleware/server/utility/externalApiUtility.js:223:hardcoded string:    const { bhtBaseUrl: tutorPlusBaseUrl='' } = config.tutorPlus;
microservices-middleware/server/utility/externalApiUtility.js:224:hardcoded string:    const { method = 'GET', payload = {} } = data;
microservices-middleware/server/utility/externalApiUtility.js:226:hardcoded variable:        const options = {
microservices-middleware/server/utility/externalApiUtility.js:228:hardcoded number:            url: `${tutorPlusBaseUrl}/external_api/v4/oms/kart/batches`,
microservices-middleware/server/utility/externalApiUtility.js:232:hardcoded string:                "Content-Type": "application/json",
microservices-middleware/server/utility/externalApiUtility.js:233:hardcoded string:                "CLIENT_ID": `${process.env.TPLUS_BATCHES_CLIENTID}`,
microservices-middleware/server/utility/externalApiUtility.js:234:hardcoded string:                "CLIENT_SECRET": `${process.env.TPLUS_BATCHES_CLIENT_SECRET}`
microservices-middleware/server/utility/externalApiUtility.js:239:hardcoded string:        throw new Error(error || 'Something went wrong. Please try again!')
microservices-middleware/server/utility/externalApiUtility.js:243:hardcoded variable:const callTutorPlusCoursesApi = async (data) => {
microservices-middleware/server/utility/externalApiUtility.js:244:hardcoded string:    const { bhtBaseUrl: tutorPlusBaseUrl='' } = config.tutorPlus;
microservices-middleware/server/utility/externalApiUtility.js:245:hardcoded string:    const { method = 'GET', payload = {} } = data;
microservices-middleware/server/utility/externalApiUtility.js:247:hardcoded variable:        const options = {
microservices-middleware/server/utility/externalApiUtility.js:249:hardcoded number:            url: `${tutorPlusBaseUrl}/internal_api/one_to_many/v3/courses`,
microservices-middleware/server/utility/externalApiUtility.js:253:hardcoded string:                "Content-Type": "application/json",
microservices-middleware/server/utility/externalApiUtility.js:254:hardcoded string:                "CLIENT_ID": `${process.env.TPLUS_BATCHES_CLIENTID}`,
microservices-middleware/server/utility/externalApiUtility.js:255:hardcoded string:                "CLIENT_SECRET": `${process.env.TPLUS_BATCHES_CLIENT_SECRET}`
microservices-middleware/server/utility/externalApiUtility.js:260:hardcoded string:        throw new Error(error || 'Something went wrong. Please try again!')
microservices-middleware/server/utility/externalApiUtility.js:264:hardcoded variable:const callTutorPlusSlotsApi = async (data) => {
microservices-middleware/server/utility/externalApiUtility.js:265:hardcoded string:    const { bhtBaseUrl: tutorPlusBaseUrl='' } = config.tutorPlus;
microservices-middleware/server/utility/externalApiUtility.js:266:hardcoded string:    const { method = 'GET', payload = {} } = data;
microservices-middleware/server/utility/externalApiUtility.js:268:hardcoded variable:        const options = {
microservices-middleware/server/utility/externalApiUtility.js:270:hardcoded number:            url: `${tutorPlusBaseUrl}/internal_api/one_to_many/v3/slot_groups`,
microservices-middleware/server/utility/externalApiUtility.js:274:hardcoded string:                "Content-Type": "application/json",
microservices-middleware/server/utility/externalApiUtility.js:275:hardcoded string:                "CLIENT_ID": `${process.env.TPLUS_BATCHES_CLIENTID}`,
microservices-middleware/server/utility/externalApiUtility.js:276:hardcoded string:                "CLIENT_SECRET": `${process.env.TPLUS_BATCHES_CLIENT_SECRET}`
microservices-middleware/server/utility/externalApiUtility.js:281:hardcoded string:        throw new Error(error || 'Something went wrong. Please try again!')
microservices-middleware/server/utility/externalApiUtility.js:285:hardcoded variable:const callTutorPlusAPI = async (data) => {
microservices-middleware/server/utility/externalApiUtility.js:286:hardcoded string:    const { urlSegment, method, payload = {}, type = '' } = data;
microservices-middleware/server/utility/externalApiUtility.js:287:hardcoded variable:    const baseUrl = config.geoService.baseUrl;
microservices-middleware/server/utility/externalApiUtility.js:288:hardcoded variable:    const urlType = getUrlType(type)
microservices-middleware/server/utility/externalApiUtility.js:290:hardcoded variable:        let option = {
microservices-middleware/server/utility/externalApiUtility.js:292:hardcoded number:            url: `${baseUrl}/${urlType}/api/v1/${urlSegment}`,
microservices-middleware/server/utility/externalApiUtility.js:295:hardcoded string:                "Content-Type": "application/json",
microservices-middleware/server/utility/externalApiUtility.js:296:hardcoded string:                "tenant-service": config.geoService.tenantService,
microservices-middleware/server/utility/externalApiUtility.js:297:hardcoded string:                "tenant-service-token": config.geoService.tenantServiceToken
microservices-middleware/server/utility/externalApiUtility.js:300:hardcoded string:        option['body'] = { ...payload }
microservices-middleware/server/utility/externalApiUtility.js:307:hardcoded variable:const getUrlType = (type) => {
microservices-middleware/server/utility/externalApiUtility.js:308:hardcoded string:    let urlType = 'geo';
microservices-middleware/server/utility/externalApiUtility.js:309:hardcoded string:    if (type === "tutor-availability") {
microservices-middleware/server/utility/externalApiUtility.js:310:hardcoded string:        urlType = 'tutor-availability'
microservices-middleware/server/utility/externalApiUtility.js:315:hardcoded variable:const callPostalCodeApi = async (pincode) => {
microservices-middleware/server/utility/externalApiUtility.js:317:hardcoded variable:        const option = {
microservices-middleware/server/utility/externalApiUtility.js:318:hardcoded string:            method: 'GET',
microservices-middleware/server/utility/externalApiUtility.js:319:hardcoded object:            url: `${config.postalCode.url}/${pincode}`,
microservices-middleware/server/utility/externalApiUtility.js:328:hardcoded variable:const callDevPostalCodeApi = async (pincode) => {
microservices-middleware/server/utility/externalApiUtility.js:330:hardcoded variable:        const option = {
microservices-middleware/server/utility/externalApiUtility.js:331:hardcoded string:            method: 'GET',
microservices-middleware/server/utility/externalApiUtility.js:332:hardcoded object:            url: `${config.nucleusBaseUrl}/pincode/fetchPincodeData/${pincode}`,
microservices-middleware/server/utility/externalApiUtility.js:334:hardcoded string:                "x-api-key": process.env.NUCLEUS_API_TOKEN,
microservices-middleware/server/utility/externalApiUtility.js:335:hardcoded string:                "Content-Type": "application/json"
microservices-middleware/server/utility/externalApiUtility.js:346:hardcoded object:const callAakashToGetPSID = async (payload = {}) => {
microservices-middleware/server/utility/externalApiUtility.js:348:hardcoded variable:        const aakash = new Aakash(config.aakash);
microservices-middleware/server/utility/externalApiUtility.js:355:hardcoded variable:const callAakashAPIToFetchCourseFees = async (payload) => {
microservices-middleware/server/utility/externalApiUtility.js:357:hardcoded variable:        const aakash = new Aakash(config.aakash);
microservices-middleware/server/utility/externalApiUtility.js:360:hardcoded string:        throw new Error("Fee Schedules Not Found in Aakash System");
microservices-middleware/server/utility/externalApiUtility.js:364:hardcoded variable:const callAakashAPIToGetConcession = async (payload) => {
microservices-middleware/server/utility/externalApiUtility.js:366:hardcoded variable:        const aakash = new Aakash(config.aakash);
microservices-middleware/server/utility/externalApiUtility.js:373:hardcoded variable:const callGetCountriesApi = async () => {
microservices-middleware/server/utility/externalApiUtility.js:375:hardcoded variable:        const countries = {
microservices-middleware/server/utility/externalApiUtility.js:376:hardcoded string:            method: 'GET',
microservices-middleware/server/utility/externalApiUtility.js:377:hardcoded object:            url: `${config.tllms.baseUrl}/countries`,
microservices-middleware/server/utility/externalApiUtility.js:386:hardcoded variable:const callByjusMathBatchesApi = async (urlSegment) => {
microservices-middleware/server/utility/externalApiUtility.js:388:hardcoded variable:    const url = config.byjusMathBatch.baseUrl
microservices-middleware/server/utility/externalApiUtility.js:389:hardcoded variable:    const urlKey = config.byjusMathBatch.urlKey
microservices-middleware/server/utility/externalApiUtility.js:391:hardcoded variable:        const option = {
microservices-middleware/server/utility/externalApiUtility.js:392:hardcoded string:            method: 'GET',
microservices-middleware/server/utility/externalApiUtility.js:393:hardcoded object:            url: `${url}/batch_pref/get_all?&pass=${urlKey}&${urlSegment}`,
microservices-middleware/server/utility/externalApiUtility.js:402:hardcoded variable:const callTutorPlusForBhtDetails = async (data) => {
microservices-middleware/server/utility/externalApiUtility.js:403:hardcoded string:    const { urlSegment, method, payload = {}, type='external' } = data;
microservices-middleware/server/utility/externalApiUtility.js:404:hardcoded string:    const { bhtBaseUrl: url='', clientId='', clientSecret='', courseClientId='', courseClientSecret='' } = config.tutorPlus;
microservices-middleware/server/utility/externalApiUtility.js:405:hardcoded string:    const urlType = type.toLowerCase() === 'internal' ? 'internal_api' : 'external_api/v1/bht';
microservices-middleware/server/utility/externalApiUtility.js:408:hardcoded variable:        let option = {
microservices-middleware/server/utility/externalApiUtility.js:410:hardcoded object:            url: `${url}/${urlType}/${urlSegment}`,
microservices-middleware/server/utility/externalApiUtility.js:413:hardcoded string:                "Content-Type": "application/json",
microservices-middleware/server/utility/externalApiUtility.js:414:hardcoded string:                "CLIENT_ID": urlType === 'internal_api' ? courseClientId : clientId,
microservices-middleware/server/utility/externalApiUtility.js:415:hardcoded string:                "CLIENT_SECRET": urlType === 'internal_api' ? courseClientSecret : clientSecret
microservices-middleware/server/utility/externalApiUtility.js:419:hardcoded string:        if (['post', 'POST'].includes(method)) {
microservices-middleware/server/utility/externalApiUtility.js:420:hardcoded string:            option['body'] = { ...payload }
microservices-middleware/server/utility/externalApiUtility.js:437:hardcoded number:    callTllmsToGetCourseDetailsFor14,
microservices-middleware/server/utility/externalApiUtility.js:446:hardcoded number:    callTllmsToGetLanguageV2,
