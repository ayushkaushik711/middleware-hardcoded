microservices-middleware/server/src/s3Upload/s3Routes.js:1:hardcoded file path:const Router = require('express-promise-router')
microservices-middleware/server/src/s3Upload/s3Routes.js:2:hardcoded file path:const multer = require('multer')();
microservices-middleware/server/src/s3Upload/s3Routes.js:3:hardcoded number:const controller = require('./s3UploadController');
microservices-middleware/server/src/s3Upload/s3Routes.js:5:hardcoded object:const router = Router({ mergeParams: true });
microservices-middleware/server/src/s3Upload/s3Routes.js:8:hardcoded string:  const routeName = "s3upload";
microservices-middleware/server/src/s3Upload/s3Routes.js:10:hardcoded object:  router.route(`/${routeName}/upload/:identifier`)
microservices-middleware/server/src/s3Upload/s3UploadController.js:1:hardcoded file path:const bunyan = require('bunyan');
microservices-middleware/server/src/s3Upload/s3UploadController.js:2:hardcoded string:const s3Upload = require('@byjus-orders/tyrion-plugins/s3');
microservices-middleware/server/src/s3Upload/s3UploadController.js:4:hardcoded file path:const config = require('../../config');
microservices-middleware/server/src/s3Upload/s3UploadController.js:5:hardcoded object:const { BadRequestError } = require('../../lib/errors');
microservices-middleware/server/src/s3Upload/s3UploadController.js:7:hardcoded variable:const logger = bunyan.createLogger({
microservices-middleware/server/src/s3Upload/s3UploadController.js:8:hardcoded string:    name: 'Payment controller',
microservices-middleware/server/src/s3Upload/s3UploadController.js:9:hardcoded environment variable:    env: process.env.NODE_ENV,
microservices-middleware/server/src/s3Upload/s3UploadController.js:14:hardcoded number:const s3Init = s3Upload.init(config.aws.s3.clientId, config.aws.s3.clientSecret);
microservices-middleware/server/src/s3Upload/s3UploadController.js:16:hardcoded variable:const uploadDocument = async (req, res) => {
microservices-middleware/server/src/s3Upload/s3UploadController.js:18:hardcoded object:        const { identifier } = req.params;
microservices-middleware/server/src/s3Upload/s3UploadController.js:19:hardcoded array:        const files = req.files || [];
microservices-middleware/server/src/s3Upload/s3UploadController.js:20:hardcoded number:        const file = files[0];
microservices-middleware/server/src/s3Upload/s3UploadController.js:21:hardcoded string:        if (!file) throw new BadRequestError("Parameter missing");
microservices-middleware/server/src/s3Upload/s3UploadController.js:22:hardcoded variable:        const response = await uploadFile(file, identifier);
microservices-middleware/server/src/s3Upload/s3UploadController.js:25:hardcoded string:        logger.error({ method: "uploadDocument", error });
microservices-middleware/server/src/s3Upload/s3UploadController.js:30:hardcoded variable:const uploadFile = async (file, identifier) => {
microservices-middleware/server/src/s3Upload/s3UploadController.js:32:hardcoded variable:        const docKey = file.fieldname;
microservices-middleware/server/src/s3Upload/s3UploadController.js:33:hardcoded variable:        const reqBody = {
microservices-middleware/server/src/s3Upload/s3UploadController.js:34:hardcoded number:            Bucket: config.aws.s3.bucket,
microservices-middleware/server/src/s3Upload/s3UploadController.js:35:hardcoded object:            Path: `${process.env.NODE_ENV}/${identifier}/${docKey}`,
microservices-middleware/server/src/s3Upload/s3UploadController.js:36:hardcoded array:            files: { [docKey]: [file] },
microservices-middleware/server/src/s3Upload/s3UploadController.js:37:hardcoded number:            ACL: config.aws.s3.acl
microservices-middleware/server/src/s3Upload/s3UploadController.js:39:hardcoded number:        return await s3Upload.uploadFiles(reqBody, [docKey], s3Init);
microservices-middleware/server/src/s3Upload/s3UploadController.js:41:hardcoded string:        logger.error({ method: "uploadFile", error });
