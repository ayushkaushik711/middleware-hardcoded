microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderHelper.js:6:hardcoded string:	const { SalesSkuMaster } = require('@byjus-orders/npgexemplum')
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderHelper.js:12:hardcoded variable:	const getMaxPrice = (details) => {
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderHelper.js:13:hardcoded object:	    let { formattedProducts, initialClass } = details;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderHelper.js:14:hardcoded number:	    let maxPrice = 0, tabletPrice = 0;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderHelper.js:16:hardcoded string:	        if (sku.grade == "11+12" && sku.validity == "2024") {
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderHelper.js:18:hardcoded number:	            discountAmount = (sku.price * 0.235)
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderHelper.js:19:hardcoded number:	            //substract the discountAmount from the Actual price and round it to nearest 1000
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderHelper.js:20:hardcoded number:	            sku.price = (Math.floor((sku.price - discountAmount) / 1000)) * 1000;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderHelper.js:23:hardcoded number:	            discountAmount = (sku.price * 0.50)
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderHelper.js:24:hardcoded number:	            sku.price = (Math.floor((sku.price - discountAmount) / 1000)) * 1000;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderHelper.js:26:hardcoded string:	        if (sku.type == "product" && sku.subType == "tablet") {
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderHelper.js:31:hardcoded number:	    //round of Final maxPrice down to nearest 5000 excluding the tablet price 
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderHelper.js:33:hardcoded number:	    finalmaxPrice = ((Math.floor(maxPrice / 5000)) * 5000) + tabletPrice;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderHelper.js:37:hardcoded variable:	const getAdvacneOrderPunchingCategory = (details) => {
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderHelper.js:39:hardcoded object:	    let { productLearningType } = details;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderHelper.js:42:hardcoded string:	    orderPunchingCategory = productLearningType === "aakash_byjus_live" ? AakashNeo.advanceOrder.liveOnlyK12Category
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderHelper.js:43:hardcoded string:	        : productLearningType === "aakash_byjus_tlp" ? AakashNeo.advanceOrder.tlpOnlyK12Category
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderHelper.js:44:hardcoded string:	            : productLearningType === "aakash_byjus_live_hybrid_program" ? AakashNeo.advanceOrder.liveCrp
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderHelper.js:45:hardcoded string:	                : productLearningType === "aakash_byjus_tab_hybrid_program" ? AakashNeo.advanceOrder.tabCrp : ""
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderRoutes.js:4:hardcoded object:	const router = Router({ mergeParams: true });
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderRoutes.js:7:hardcoded string:	    const baseRoute = '/aakashAdvanceOrder';
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderRoutes.js:10:hardcoded string:	    const productTypes = ['single', 'combo']
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderRoutes.js:12:hardcoded object:	        router.use(`${baseRoute}/product/${productType}`,
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderRoutes.js:16:hardcoded object:	    router.route(`${baseRoute}/product/combo`)
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderRoutes.js:23:hardcoded object:	    router.route(`${baseRoute}/storeProductDetails`)
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:7:hardcoded variable:	const formattedAakashAdvanceOrderLineItems = async (orderDetails, identifier, prospectId) => {
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:8:hardcoded object:	    const { productDetails, orderPunchingCategory, paymentDetails = {} } = orderDetails;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:9:hardcoded array:	    const { students = [], paymentType, student } = productDetails;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:10:hardcoded object:	    let lineItems = {};
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:11:hardcoded object:	    const actualPaymentType = getPaymentType({ paymentDetails, paymentType });
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:14:hardcoded number:	        const { items = [], formValues, studentId } = students[0];
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:16:hardcoded string:	            throw new Error(" Order Split Failed: Aakash Neo Upgrade Order Punching LineItems Are Empty");
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:19:hardcoded variable:	        const splittedLineItems = await getLineItems(items, formValues, actualPaymentType, studentId, prospectId)
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:21:hardcoded object:	        const { parentLineItems, childLineItems } = splittedLineItems || {};
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:24:hardcoded string:	            throw new Error(" Order Split Failed: Aakash Neo Upgrade Order Punching LineItems Are Empty");
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:33:hardcoded string:	        throw new Error(error || "Error in splitting line Items");
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:38:hardcoded variable:	const getLineItems = async (items, student, paymentType, studentId, prospectId) => {
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:40:hardcoded object:	    let { productLearningType, initialClass, finalClass, subCourse, initialGradeProductLearningType, finalGradeProductLearningType, isAdvanceOrder = false } = student;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:41:hardcoded array:	    let parentLineItems = [], childLineItems = [], tabletItem = [], skuItems = [], sdCardItem = [];
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:42:hardcoded variable:	    let isExtensionPresent = false;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:43:hardcoded string:	    const livePlusCrp = ["aakash_byjus_live","aakash_byjus_live_hybrid_program","aakash_byjus_tab_hybrid_program"]
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:44:hardcoded string:	    logger.info({ method:'getLineItems', message: 'Before split: items', items });
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:48:hardcoded string:	    logger.info({ method:`getLineItems-leadId-${prospectId}`, message: 'Before split: items', items });
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:51:hardcoded string:	        if (item.subType === "tablet") {
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:53:hardcoded string:	        } else if (item.subType === "sd_card") {
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:60:hardcoded array:	        parentLineItems = !isEmpty(tabletItem) ? [...tabletItem, ...sdCardItem] : [...sdCardItem]
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:64:hardcoded string:	    if (initialGradeProductLearningType === "aakash_byjus_tlp") {
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:65:hardcoded string:	        if (finalGradeProductLearningType === "aakash_byjus_live") {
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:66:hardcoded array:	            parentLineItems = !isEmpty(tabletItem) ? [...tabletItem, ...sdCardItem] : [...sdCardItem]
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:69:hardcoded string:	        if (finalGradeProductLearningType === "aakash_byjus_tlp") {
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:70:hardcoded array:	            parentLineItems = !isEmpty(tabletItem) ? [...tabletItem] : []
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:71:hardcoded number:	            if (sdCardItem.length > 1) {
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:80:hardcoded string:	            if (initialClass == '11' && finalClass == '12') {
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:81:hardcoded string:	                if (paymentType == 'EMI') {
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:82:hardcoded array:	                    parentLineItems = !isEmpty(tabletItem) ? [...tabletItem, ...sdCardItem] : [...sdCardItem]
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:83:hardcoded object:	                    let extensionSkus = await getExtensionSkus({ initialClass, finalClass, subCourse, studentId })
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:86:hardcoded array:	                    parentLineItems = !isEmpty(tabletItem) ? [...tabletItem, ...sdCardItem] : [...sdCardItem]
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:87:hardcoded array:	                    childLineItems = []
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:93:hardcoded string:	        if (item.subType == "extension" || item.category == "aakash_extension") {
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:97:hardcoded string:	    logger.info({ method:`getLineItems-leadId-${prospectId}`, message: 'After split: parentLineItems', parentLineItems });
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:98:hardcoded string:	    logger.info({ method:`getLineItems-leadId-${prospectId}`, message: 'After split: childLineItems', childLineItems });
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:101:hardcoded number:	        (isExtensionPresent && (items.length + 1 != childLineItems.length + parentLineItems.length))) {
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:102:hardcoded string:	        throw new Error(" Order Split Failed: Total no of items are not equal to no of child and parent Items");
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:106:hardcoded array:	        parentLineItems: Array.isArray(parentLineItems) ? parentLineItems : [parentLineItems],
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderSplit.js:107:hardcoded array:	        childLineItems: Array.isArray(childLineItems) ? childLineItems : [childLineItems]
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:4:hardcoded string:	const { DraftOrder } = require('@byjus-orders/nexemplum/oms');
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:20:hardcoded variable:	const getComboProduct = async (req, res) => {
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:21:hardcoded string:	    logger.info({ method: 'getComboProduct' }, { message: "Fetching Combo Product for aakash neo live " });
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:24:hardcoded variable:	    let tabletSku = null;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:25:hardcoded number:	    let totalPrice = 0;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:26:hardcoded variable:	    let bookSku = null;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:27:hardcoded number:	    let booksPrice = 0;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:28:hardcoded array:	    let courseSkus = [];
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:29:hardcoded number:	    let price = 0;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:30:hardcoded string:	    let { paymentType = "EMI", productType, student, couponDetails, productCombination, identifier, orderPunchingType = "", user, workshopChannel, loggedInMobile } = req.body;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:31:hardcoded variable:	    let draftOrder = await DraftOrder.findById(identifier);
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:32:hardcoded string:	    const draftOrderId = get(draftOrder, 'draftOrderId');
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:35:hardcoded number:	    student = isArray(student) ? student[0] : student;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:37:hardcoded string:	    let { initialClass, finalClass, validity, tablet = null, subCourse, productLearningType, initialGradeProductLearningType = "", finalGradeProductLearningType = "", isAdvanceOrder } = student;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:42:hardcoded variable:	    let grade = initialClass;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:43:hardcoded variable:	    let brand = null;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:44:hardcoded string:	    const isDevEnv = ["local","development"].includes(process.env.NODE_ENV)
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:45:hardcoded string:	    if (isDevEnv && ["SBXMGZ","SCXMGJ"].includes(tablet)){
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:46:hardcoded string:	        brand = 'D4'
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:50:hardcoded number:	            if (grade === 11 && finalClass === 12) {
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:51:hardcoded string:	                grade = '11+12';
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:53:hardcoded number:	            if (grade == 13) {
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:54:hardcoded string:	                grade = "13+"
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:56:hardcoded object:	            let { sdCardSku = {}, liveSku = {}, crpHybridSku = {} } = await getAdvanceOrderSkus({
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:68:hardcoded string:	            grade += (grade === '11+12') ? 2 : 1;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:74:hardcoded string:	                if(sku.grade == finalClass || sku.grade == '11+12'){
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:76:hardcoded string:	                    sku["price"] = sku.basePrice
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:79:hardcoded string:	                    sku["price"] = sku.continuousPrice
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:83:hardcoded number:	             price = courseSkus.reduce((total, sku) => parseInt(sku.basePrice) + total, 0)
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:85:hardcoded string:	                sku["price"] = sku.basePrice
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:89:hardcoded string:	            courseSkus[i]["combinationType"] = courseSkus[i]["category"]
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:90:hardcoded string:	            courseSkus[i]["itemId"] = getSkuItemId(courseSkus[i]);
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:94:hardcoded object:	            tabletSku = await getPostgresTabletSku({ tabletId: tablet });
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:97:hardcoded array:	        tabletSku = isArray(tabletSku) ? tabletSku : [tabletSku];
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:101:hardcoded array:	            if (tabletSku[i]) {
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:102:hardcoded number:	                const { price = 0, quantity = 1, type } = tabletSku[i];
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:104:hardcoded string:	                tabletSku[i]["combinationType"] = type
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:105:hardcoded string:	                tabletSku[i]["itemId"] = getSkuItemId(tabletSku[i]);
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:108:hardcoded string:	        if (process.env.NODE_ENV !== 'production') {
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:109:hardcoded array:	            bookSku = await getBooksSku({ grade, subCourse }) || [];
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:110:hardcoded array:	            bookSku = isArray(bookSku) ? bookSku : [bookSku];
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:112:hardcoded array:	                if (bookSku[i]) {
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:113:hardcoded array:	                    const { type } = bookSku[i];
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:114:hardcoded string:	                    bookSku[i]["combinationType"] = type
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:115:hardcoded string:	                    bookSku[i]['itemId'] = getSkuItemId()
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:119:hardcoded string:	            booksPrice = bookSku.reduce((acc, curr) => acc + parseInt(get(curr, 'basePrice', 0)), 0);
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:121:hardcoded array:	        const products = [courseSkus, tabletSku];
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:122:hardcoded variable:	        const formattedProducts = flattenDeep(products).filter(prdct => prdct);
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:123:hardcoded object:	        let maxPrice = getMaxPrice({ formattedProducts, initialClass, isAdvanceOrder });
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:124:hardcoded object:	        let minPrice = getMinimumRange({ req, maxPrice, tabletSku, paymentType,productCombination })
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:126:hardcoded string:	        student["formValues"] = { ...student };
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:127:hardcoded string:	        student["items"] = formattedProducts;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:128:hardcoded object:	        const skuProductDetails = { tabletSku, maxPrice, minPrice, productCombination, productLearningType}
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:129:hardcoded object:	        const discountDetails = await getDiscountDetails({identifier, productDetails : skuProductDetails, workshopChannel, loggedInMobile});
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:130:hardcoded string:	        const { discountedPrice, voucher = "", minimumPrice, areBonusPointsUsed = false, bonusPointsDiscount = 0 } = discountDetails;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:139:hardcoded array:	            students: [student],
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:141:hardcoded array:	            mentoringDetails: [oneToManySku],
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:151:hardcoded variable:	const storeProductDetails = async (req, res) => {
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:152:hardcoded string:	    let { identifier, productDetails, productCombination = "", studentDetails } = req.body;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:153:hardcoded string:	    const { email } = get(req, 'user', {});
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:154:hardcoded string:	    logger.info({ method: 'storeProductDetails', msg: `Storing Product Details for _id:${identifier}` });
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:158:hardcoded string:	            throw new BadRequestError(`Parameters - ${identifier ? '' : 'identifier'} ${productDetails ? '' : 'productDetails'} Missing`);
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:159:hardcoded variable:	        const draftOrder = await checkIfDraftOrderExists(identifier);
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:162:hardcoded object:	            const { isOmsOrder, customerDetails } = draftOrder;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:163:hardcoded object:	            const { productType, isGstIn, student = {} } = productDetails;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:164:hardcoded string:	            const { validity = "", subCourse, product, productLearningType, initialGradeProductLearningType = "", finalGradeProductLearningType = "", initialClass = "", finalClass = "", isAdvanceOrder} = student;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:165:hardcoded variable:	            const isOmsEligibleOrder = await checkIsOmsOrder(productType, isOmsOrder, validity);
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:166:hardcoded object:	            const { redeemedCashback, unutilizedCashbacks, amountToCustomer, amountToSalesPerson } = await manageCashbacks(draftOrder, productDetails);
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:167:hardcoded object:	            let { orgFormattedName, orderPunchingType } = draftOrder
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:182:hardcoded string:	            if (get(config, 'isStudentProfileAvailable') === "true" && productDetails.students && productDetails.students.length) {
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:187:hardcoded array:	            const { formattedProducts = [], formattedStudents = [] } = await attachSiblingDetails(productDetails, productType, draftOrder, studentDetails);
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:188:hardcoded string:	            productDetails["students"] = formattedStudents;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:189:hardcoded string:	            productDetails["products"] = formattedProducts;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:191:hardcoded object:	            const orderPunchingCategory = getAdvacneOrderPunchingCategory( { initialClass, finalClass, initialGradeProductLearningType, finalGradeProductLearningType, productLearningType, isAdvanceOrder } );
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:194:hardcoded string:	            let bookInvoicing = 'not_applicable';
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:195:hardcoded array:	            let addOnLineItems = [];
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:196:hardcoded string:	            // if (['local'].includes(process.env.NODE_ENV)) {
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:198:hardcoded string:	            //     bookInvoicing = 'applicable';
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:203:hardcoded variable:	            const updateObj = {
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:206:hardcoded array:	                addOnLineItems: addOnLineItems || [],
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:210:hardcoded string:	                finalPrice: get(productDetails, 'finalPrice', 0),
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:211:hardcoded string:	                status: "product_saved",
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:212:hardcoded array:	                [`actionDetails.productSavedAt`]: new Date(),
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:213:hardcoded array:	                [`actionDetails.productSavedBy`]: email,
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:215:hardcoded string:	                "customerDetails.gstDetails.isGstIn": isGstIn,
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:218:hardcoded variable:	            const transactionId = await reserveBonusPoints(draftOrder);
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:219:hardcoded string:	            if (transactionId !== "") {
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:220:hardcoded string:	                updateObj["bonusPointsDetails.transactionId"] = transactionId;
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:223:hardcoded string:	            await DraftOrder.findOneAndUpdate({ '_id': identifier }, {
microservices-middleware/server/src/productmanagement/aakashadvanceordermanagement/aakashAdvanceOrderController.js:226:hardcoded object:	            return res.json({ productDetails, cashbackDetails: { redeemedCashback, unutilizedCashbacks } });
