microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridRoutes.js:5:hardcoded object:	const router = Router({ mergeParams: true });
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridRoutes.js:8:hardcoded string:	    const baseRoute = '/aakashCrpHybrid';
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridRoutes.js:10:hardcoded object:	    router.route(`${baseRoute}/storeProductDetails`)
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridRoutes.js:16:hardcoded object:	    router.route(`${baseRoute}/product/combo`)
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashCrpHybridOrderSplit.js:3:hardcoded variable:	const formattedAakashCrpHybridLineItems = async (orderDetails) => {
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashCrpHybridOrderSplit.js:4:hardcoded object:	    const { productDetails, orderPunchingCategory } = orderDetails;
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashCrpHybridOrderSplit.js:5:hardcoded array:	    const { students = [], paymentType, student } = productDetails;
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashCrpHybridOrderSplit.js:6:hardcoded object:	    let lineItems = {};
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashCrpHybridOrderSplit.js:9:hardcoded number:	        const { items, formValues, studentId } = students[0];
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashCrpHybridOrderSplit.js:10:hardcoded string:	        const {productLearningType=""} = formValues
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashCrpHybridOrderSplit.js:12:hardcoded string:	            throw new Error(" Order Split Failed: Aakash CRP Hybrid Order Punching LineItems Are Empty");
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashCrpHybridOrderSplit.js:14:hardcoded variable:	        const splittedLineItems = await getLineItems(items, formValues, paymentType, studentId)
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashCrpHybridOrderSplit.js:15:hardcoded object:	        const { parentLineItems, childLineItems } = splittedLineItems || {};
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashCrpHybridOrderSplit.js:17:hardcoded string:	        if (isEmpty(parentLineItems) || isEmpty(childLineItems) && productLearningType != 'aakash_test_series') {
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashCrpHybridOrderSplit.js:18:hardcoded string:	            throw new Error(" Order Split Failed: Aakash CRP Hybrid Order Punching LineItems Are Empty");
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashCrpHybridOrderSplit.js:21:hardcoded string:	            throw new Error(" Order Split Failed: Total lineItems Count Is Not Equal To Splitted Line Items Count ");
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashCrpHybridOrderSplit.js:28:hardcoded string:	        throw new Error(error || "Error in splitting line Items");
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashCrpHybridOrderSplit.js:33:hardcoded variable:	const getLineItems = async (items, student, paymentType, studentId) => {
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashCrpHybridOrderSplit.js:34:hardcoded object:	    const { productLearningType, initialClass, subCourse } = student;
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashCrpHybridOrderSplit.js:35:hardcoded array:	    let parentLineItems = [], childLineItems = [], tabletItem = [], skuItems = [], sdCardItem = [];
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashCrpHybridOrderSplit.js:38:hardcoded string:	        if (item.subType === "tablet") {
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashCrpHybridOrderSplit.js:40:hardcoded string:	        } else if (item.subType === "sd_card") {
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashCrpHybridOrderSplit.js:47:hardcoded string:	    if(productLearningType == 'aakash_test_series') {
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashCrpHybridOrderSplit.js:51:hardcoded array:	            childLineItems =   []
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashCrpHybridOrderSplit.js:55:hardcoded array:	            parentLineItems = [...tabletItem, ...skuItems]
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashCrpHybridOrderSplit.js:56:hardcoded array:	            childLineItems = []
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashCrpHybridOrderSplit.js:59:hardcoded string:	    if ((!isEmpty(tabletItem) || !isEmpty(sdCardItem)) && productLearningType == 'aakash_byjus_live_hybrid_program') {
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashCrpHybridOrderSplit.js:60:hardcoded array:	        parentLineItems = [...tabletItem, ...sdCardItem]
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashCrpHybridOrderSplit.js:66:hardcoded array:	        childLineItems: Array.isArray(childLineItems) ? childLineItems : [childLineItems]
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:4:hardcoded string:	const { DraftOrder } = require('@byjus-orders/nexemplum/oms');
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:17:hardcoded variable:	const getComboProduct = async (req, res) => {
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:18:hardcoded string:	    logger.info({ method: 'getComboProduct' }, { message: "Fetching Combo Product for aakash neo live hybrid" });
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:21:hardcoded variable:	    let tabletSku = null;
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:22:hardcoded number:	    let totalPrice = 0;
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:23:hardcoded variable:	    let bookSku = null;
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:24:hardcoded number:	    let booksPrice = 0;
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:25:hardcoded array:	    let courseSkus = [];
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:26:hardcoded number:	    let price = 0;
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:27:hardcoded string:	    let { paymentType = "EMI", productType, student, couponDetails, productCombination, identifier, orderPunchingType = "", user } = req.body;
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:28:hardcoded variable:	    let draftOrder = await DraftOrder.findById(identifier);
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:29:hardcoded string:	    const draftOrderId = get(draftOrder, 'draftOrderId');
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:30:hardcoded string:	    console.log("req",req.body);
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:33:hardcoded number:	    student = isArray(student) ? student[0] : student;
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:35:hardcoded object:	    let { initialClass, finalClass, validity, tablet = null, subCourse, productLearningType } = student;
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:40:hardcoded variable:	    let grade = initialClass;
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:41:hardcoded string:	    const isDevEnv = ["local","development"].includes(process.env.NODE_ENV)
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:42:hardcoded variable:	    let brand = null;
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:43:hardcoded string:	    if (isDevEnv && ["SBXMGZ","SCXMGJ"].includes(tablet)){
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:44:hardcoded string:	        brand = 'D4'
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:49:hardcoded number:	            if (grade === 11 && finalClass === 12) {
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:50:hardcoded string:	                grade = '11+12';
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:52:hardcoded number:	            // if(grade === 13 && finalClass === 13) {
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:53:hardcoded string:	            //     grade = '12+';
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:55:hardcoded number:	            if (grade == 13) {
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:56:hardcoded string:	                grade = "13+"
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:58:hardcoded variable:	            let skuPayload = {
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:67:hardcoded string:	            if (productLearningType === 'aakash_test_series') {
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:68:hardcoded object:	                let { testSeriesSku = {} } = await getAakashTestSeriesSkus(skuPayload);
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:72:hardcoded object:	                let { sdCardSku = {}, liveSku = {}, crpSku = {} } = await getAakashByjusLiveHybridCoursesSkus(skuPayload);
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:75:hardcoded string:	             grade += (grade === '11+12') ? 2 : 1;
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:76:hardcoded string:	            // if(grade !='11+12')
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:85:hardcoded string:	                if(sku.grade == finalClass || sku.grade == '11+12'){
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:87:hardcoded string:	                    sku["price"] = sku.basePrice
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:90:hardcoded string:	                    sku["price"] = sku.continuousPrice
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:94:hardcoded number:	             price = courseSkus.reduce((total, sku) => parseInt(sku.basePrice) + total, 0)
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:96:hardcoded string:	                sku["price"] = sku.basePrice
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:100:hardcoded string:	            courseSkus[i]["combinationType"] = courseSkus[i]["category"]
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:101:hardcoded string:	            courseSkus[i]["itemId"] = getSkuItemId(courseSkus[i]);
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:105:hardcoded object:	            tabletSku = await getPostgresTabletSku({ tabletId: tablet });
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:108:hardcoded array:	        tabletSku = isArray(tabletSku) ? tabletSku : [tabletSku];
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:112:hardcoded array:	            if (tabletSku[i]) {
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:113:hardcoded number:	                const { price = 0, quantity = 1, type } = tabletSku[i];
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:115:hardcoded string:	                tabletSku[i]["combinationType"] = type
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:116:hardcoded string:	                tabletSku[i]["itemId"] = getSkuItemId(tabletSku[i]);
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:119:hardcoded string:	        if (process.env.NODE_ENV !== 'production') {
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:120:hardcoded array:	            bookSku = await getBooksSku({ grade, subCourse }) || [];
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:121:hardcoded array:	            bookSku = isArray(bookSku) ? bookSku : [bookSku];
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:123:hardcoded array:	                if (bookSku[i]) {
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:124:hardcoded array:	                    const { type } = bookSku[i];
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:125:hardcoded string:	                    bookSku[i]["combinationType"] = type
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:126:hardcoded string:	                    bookSku[i]['itemId'] = getSkuItemId()
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:130:hardcoded string:	            booksPrice = bookSku.reduce((acc, curr) => acc + parseInt(get(curr, 'basePrice', 0)), 0);
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:132:hardcoded variable:	        let maxPrice = totalPrice;
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:133:hardcoded object:	        let minPrice = getMinimumRange({ req, maxPrice, tabletSku, paymentType,productCombination })
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:135:hardcoded array:	        const products = [courseSkus, tabletSku];
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:136:hardcoded variable:	        const formattedProducts = flattenDeep(products).filter(prdct => prdct);
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:138:hardcoded string:	        student["formValues"] = { ...student };
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:139:hardcoded string:	        student["items"] = formattedProducts;
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:140:hardcoded object:	        const skuProductDetails = { tabletSku, maxPrice, minPrice, productCombination }
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:141:hardcoded object:	        const discountDetails = await getDiscountDetails({identifier, productDetails : skuProductDetails});
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:142:hardcoded string:	        const { discountedPrice, voucher = "", minimumPrice, areBonusPointsUsed = false, bonusPointsDiscount = 0 } = discountDetails;
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:151:hardcoded array:	            students: [student],
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:153:hardcoded array:	            mentoringDetails: [oneToManySku],
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:159:hardcoded string:	        console.log("error",error);
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:164:hardcoded variable:	const storeProductDetails = async (req, res) => {
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:165:hardcoded string:	    let { identifier, productDetails, productCombination = "", studentDetails } = req.body;
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:166:hardcoded string:	    const { email } = get(req, 'user', {});
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:167:hardcoded string:	    logger.info({ method: 'storeProductDetails', msg: `Storing Product Details for _id:${identifier}` });
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:171:hardcoded string:	            throw new BadRequestError(`Parameters - ${identifier ? '' : 'identifier'} ${productDetails ? '' : 'productDetails'} Missing`);
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:172:hardcoded variable:	        const draftOrder = await checkIfDraftOrderExists(identifier);
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:175:hardcoded object:	            const { isOmsOrder, customerDetails } = draftOrder;
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:176:hardcoded object:	            const { productType, isGstIn, student = {} } = productDetails;
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:177:hardcoded string:	            const { validity = "", subCourse, product, productLearningType = "" } = student;
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:178:hardcoded variable:	            const isOmsEligibleOrder = await checkIsOmsOrder(productType, isOmsOrder, validity);
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:179:hardcoded object:	            const { redeemedCashback, unutilizedCashbacks, amountToCustomer, amountToSalesPerson } = await manageCashbacks(draftOrder, productDetails);
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:180:hardcoded object:	            let { orgFormattedName, orderPunchingType } = draftOrder
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:195:hardcoded string:	            if (get(config, 'isStudentProfileAvailable') === "true" && productDetails.students && productDetails.students.length) {
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:200:hardcoded array:	            const { formattedProducts = [], formattedStudents = [] } = await attachSiblingDetails(productDetails, productType, draftOrder, studentDetails);
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:201:hardcoded string:	            productDetails["students"] = formattedStudents;
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:202:hardcoded string:	            productDetails["products"] = formattedProducts;
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:203:hardcoded string:	            const orderPunchingCategory = productLearningType === "aakash_test_series" ? AakashNeo.testSeries.orderPunchingCategory : AakashNeo.crp.category;
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:206:hardcoded string:	            let bookInvoicing = 'not_applicable';
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:207:hardcoded array:	            let addOnLineItems = [];
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:208:hardcoded string:	            if (['local'].includes(process.env.NODE_ENV)) {
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:210:hardcoded string:	                bookInvoicing = 'applicable';
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:215:hardcoded variable:	            const updateObj = {
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:218:hardcoded array:	                addOnLineItems: addOnLineItems || [],
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:222:hardcoded string:	                finalPrice: get(productDetails, 'finalPrice', 0),
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:223:hardcoded string:	                status: "product_saved",
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:224:hardcoded array:	                [`actionDetails.productSavedAt`]: new Date(),
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:225:hardcoded array:	                [`actionDetails.productSavedBy`]: email,
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:227:hardcoded string:	                "customerDetails.gstDetails.isGstIn": isGstIn,
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:230:hardcoded variable:	            const transactionId = await reserveBonusPoints(draftOrder);
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:231:hardcoded string:	            if (transactionId !== "") {
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:232:hardcoded string:	                updateObj["bonusPointsDetails.transactionId"] = transactionId;
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:235:hardcoded string:	            await DraftOrder.findOneAndUpdate({ '_id': identifier }, {
microservices-middleware/server/src/productmanagement/aakashByjusLiveHybrid/aakashByjusLiveHybridController.js:238:hardcoded object:	            return res.json({ productDetails, cashbackDetails: { redeemedCashback, unutilizedCashbacks } });
