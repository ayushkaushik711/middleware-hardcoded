microservices-middleware/server/src/productmanagement/hometuition/orderSplit.js:1:hardcoded object:const { get, concat, map, flattenDeep } = require('lodash');
microservices-middleware/server/src/productmanagement/hometuition/orderSplit.js:2:hardcoded file path:const logger = require('../../../lib/bunyan-logger')('orderSplit.js');
microservices-middleware/server/src/productmanagement/hometuition/orderSplit.js:4:hardcoded variable:const formattedHomeTuitionLineItems = async (orderDetails) => {
microservices-middleware/server/src/productmanagement/hometuition/orderSplit.js:5:hardcoded string:    logger.info({ method: 'formatLineItems' }, 'Checking if Order is eligible to be splitted');
microservices-middleware/server/src/productmanagement/hometuition/orderSplit.js:6:hardcoded object:    const { productDetails, orderPunchingCategory } = orderDetails;
microservices-middleware/server/src/productmanagement/hometuition/orderSplit.js:7:hardcoded array:    const { students = [], tablets = [] } = productDetails;
microservices-middleware/server/src/productmanagement/hometuition/orderSplit.js:8:hardcoded object:    let lineItems = {};
microservices-middleware/server/src/productmanagement/hometuition/orderSplit.js:11:hardcoded string:        const items = flattenDeep(map(students, 'items'));
microservices-middleware/server/src/productmanagement/hometuition/orderSplit.js:13:hardcoded string:        logger.info("HOME TUITION LOGGER : EMI : " + orderPunchingCategory);
microservices-middleware/server/src/productmanagement/hometuition/orderSplit.js:14:hardcoded variable:        const splittedLineItems = await getLineItems(items)
microservices-middleware/server/src/productmanagement/hometuition/orderSplit.js:15:hardcoded string:        logger.info("HOME TUITION LOGGER : splittedLineItems : " + splittedLineItems);
microservices-middleware/server/src/productmanagement/hometuition/orderSplit.js:17:hardcoded object:        const { parentLineItems, childLineItems } = splittedLineItems || {};
microservices-middleware/server/src/productmanagement/hometuition/orderSplit.js:18:hardcoded string:        const orderType = childLineItems.length ? 'split_order' : 'single_order';
microservices-middleware/server/src/productmanagement/hometuition/orderSplit.js:19:hardcoded string:        logger.info("%j", { method: 'formatLineItems' }, { orderType, lineItems: JSON.stringify(splittedLineItems) });
microservices-middleware/server/src/productmanagement/hometuition/orderSplit.js:26:hardcoded string:        logger.info("%j", { method: 'formatLineItems', message: "Error in splitting line Items" });
microservices-middleware/server/src/productmanagement/hometuition/orderSplit.js:27:hardcoded string:        throw new Error(error || "Error in splitting line Items");
microservices-middleware/server/src/productmanagement/hometuition/orderSplit.js:33:hardcoded variable:const getLineItems = (items) => {
microservices-middleware/server/src/productmanagement/hometuition/orderSplit.js:35:hardcoded array:    let parentLineItems = [], childLineItems = []
microservices-middleware/server/src/productmanagement/hometuition/orderSplit.js:37:hardcoded number:    if (items.length > 0) {
microservices-middleware/server/src/productmanagement/hometuition/orderSplit.js:38:hardcoded string:        parentLineItems = items.filter(item => item && item.type == "product")
microservices-middleware/server/src/productmanagement/hometuition/orderSplit.js:39:hardcoded string:        childLineItems = items.filter(item => item && item.type == "service")
microservices-middleware/server/src/productmanagement/hometuition/orderSplit.js:42:hardcoded array:            childLineItems = []
microservices-middleware/server/src/productmanagement/hometuition/orderSplit.js:45:hardcoded string:        throw new Error("LineItems Missing");
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:1:hardcoded object:const { get, flattenDeep, isArray, isNaN } = require('lodash')
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:3:hardcoded object:const { getTrialProductAndPrice, getQuarterlyProductAndPrice, getMonthlyProductAndPrice } = require('./dto');
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:4:hardcoded object:const { getDiscountDetails } = require('./../vouchermanagement/voucherHelper');
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:5:hardcoded file path:const logger = require('../../../lib/bunyan-logger')('Home Tuition Product Explorer');
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:6:hardcoded object:const { productConstant } = require('../utils/productConstants')
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:8:hardcoded variable:const getCourseSku = async (student, isUpgradeOrder, productCombination) => {
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:10:hardcoded array:    let courseSku = []
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:11:hardcoded object:    let { validity } = student
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:12:hardcoded string:    if (validity == 'trial_pack') {
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:14:hardcoded string:    } else if (validity == 'quarterly_pack') {
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:16:hardcoded string:    } else if (validity == '1_month_pack') {
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:22:hardcoded variable:const getUpdatedPrice = async (details) => {
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:23:hardcoded object:    let { req, totalPrice, paymentType } = details;
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:24:hardcoded string:    let { tabletSku, identifier, student, accountType, initialClass, productCombination, couponDetails = '', updatedStudentDetails=[]} = req.body;
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:25:hardcoded string:    let { validity="" } = student ? student : updatedStudentDetails[0]||{};
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:27:hardcoded string:    let isTrial = ['trial_pack'].includes(validity) ? true : false
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:28:hardcoded number:    let maxPrice = isTrial? (totalPrice/1000) * 1000 : Math.ceil((totalPrice/1000))*1000;
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:29:hardcoded object:    let minPrice = isTrial? maxPrice : getMinimumRange({ req, maxPrice, tabletSku, paymentType, couponDetails, productCombination, validity });
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:31:hardcoded object:    const skuProductDetails = { initialClass, tabletSku, maxPrice, minPrice, productCombination }
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:32:hardcoded object:    const discountDetails = await getDiscountDetails({identifier, productDetails : skuProductDetails});
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:33:hardcoded string:    const { discountedPrice, voucher = "", minimumPrice, areBonusPointsUsed = false, bonusPointsDiscount = 0 } = discountDetails;
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:46:hardcoded variable:const getMinimumRange = (productDetails) => {
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:47:hardcoded string:    logger.info({ method: 'getMinimumRange' }, 'Calculating Minimum price');
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:48:hardcoded object:    let { req, maxPrice, tabletSku, paymentType } = productDetails
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:49:hardcoded variable:    const user = req.user;
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:53:hardcoded array:    tabletSku = isArray(tabletSku) ? tabletSku : [tabletSku];
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:56:hardcoded variable:    const tabletTotalPrice = tabletSku ? tabletSku.reduce((sum, sku) => {
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:57:hardcoded string:        return sum + (parseInt(get(sku, 'quantity', 1)) * parseInt(get(sku, 'price', 0)));
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:58:hardcoded number:    }, 0) : 0;
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:61:hardcoded variable:    const applicablePriceForDiscount = parseInt(maxPrice) - parseInt(tabletTotalPrice);
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:64:hardcoded string:    if (paymentType === 'EMI') {
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:71:hardcoded variable:    let minPrice = applicablePriceForDiscount - (applicablePriceForDiscount * minPricePercentage);
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:72:hardcoded number:    minPrice = (Math.floor(minPrice / 1000)) * 1000;
microservices-middleware/server/src/productmanagement/hometuition/assembler.js:76:hardcoded string:    logger.info({ method: 'getMinimumRange', minPrice }, 'Minimum Price');
microservices-middleware/server/src/productmanagement/hometuition/controller.js:1:hardcoded object:const { get, isEmpty, isArray } = require('lodash');
microservices-middleware/server/src/productmanagement/hometuition/controller.js:3:hardcoded file path:const logger = require('../../../lib/bunyan-logger')('Home Tuition Product Explorer');
microservices-middleware/server/src/productmanagement/hometuition/controller.js:4:hardcoded object:const { BadRequestError } = require('../../../lib/errors');
microservices-middleware/server/src/productmanagement/hometuition/controller.js:5:hardcoded object:const { getCourseSku } = require('./assembler')
microservices-middleware/server/src/productmanagement/hometuition/controller.js:6:hardcoded object:const { getTotalSkuAndPrice } = require('../../productmanagement/service/totalSkusPrice')
microservices-middleware/server/src/productmanagement/hometuition/controller.js:7:hardcoded object:const { getUpdatedStudentDetails } = require('../byjusneo/assembler')
microservices-middleware/server/src/productmanagement/hometuition/controller.js:8:hardcoded object:const { getUpdatedPrice } = require('./assembler')
microservices-middleware/server/src/productmanagement/hometuition/controller.js:9:hardcoded object:const { attachHomeTuitionCenterAndBatchDetails } = require('./helper')
microservices-middleware/server/src/productmanagement/hometuition/controller.js:12:hardcoded variable:const getSingleProduct = async (req, res) => {
microservices-middleware/server/src/productmanagement/hometuition/controller.js:13:hardcoded string:    logger.info({ method: 'getSingleProduct' }, { message: "Fetching Mlp Single Product" });
microservices-middleware/server/src/productmanagement/hometuition/controller.js:15:hardcoded string:    let { paymentType = 'EMI', productType, productCombination, student, identifier, 
microservices-middleware/server/src/productmanagement/hometuition/controller.js:20:hardcoded number:        student = isArray(student) ? student[0] : student
microservices-middleware/server/src/productmanagement/hometuition/controller.js:22:hardcoded variable:        let courseSku = await getCourseSku(student, isUpgradeOrder, productCombination) 
microservices-middleware/server/src/productmanagement/hometuition/controller.js:23:hardcoded object:        const { formattedProducts, totalPrice } = getTotalSkuAndPrice({ courseSku }) 
microservices-middleware/server/src/productmanagement/hometuition/controller.js:28:hardcoded string:        if(student.validity === '1_month_pack'){
microservices-middleware/server/src/productmanagement/hometuition/controller.js:29:hardcoded string:            let tabletSku = courseSku.find(item=>item.category==="tablet");
microservices-middleware/server/src/productmanagement/hometuition/controller.js:30:hardcoded string:            req.body["tabletSku"] = tabletSku;
microservices-middleware/server/src/productmanagement/hometuition/controller.js:33:hardcoded object:        const details = { req, totalPrice}
microservices-middleware/server/src/productmanagement/hometuition/controller.js:44:hardcoded array:            students: [student],
microservices-middleware/server/src/productmanagement/hometuition/dto.js:1:hardcoded object:const { Op } = require("sequelize");
microservices-middleware/server/src/productmanagement/hometuition/dto.js:3:hardcoded object:const { getUpdatedCourseSku } = require('./../byjusneo/assembler')
microservices-middleware/server/src/productmanagement/hometuition/dto.js:4:hardcoded object:const { getSalesSku, getSalesSkuWithAttribute } = require('../../productmanagement/dto')
microservices-middleware/server/src/productmanagement/hometuition/dto.js:5:hardcoded object:const { getPostgresTabletSku } = require('../dto')
microservices-middleware/server/src/productmanagement/hometuition/dto.js:6:hardcoded object:const { getPostgresBoard } = require('../service/commonHelper')
microservices-middleware/server/src/productmanagement/hometuition/dto.js:7:hardcoded object:const { isDevEnv } = require('../../../lib/featureHelper')
microservices-middleware/server/src/productmanagement/hometuition/dto.js:9:hardcoded variable:const getTrialProductAndPrice = async (student, isUpgradeOrder, productCombination) => {
microservices-middleware/server/src/productmanagement/hometuition/dto.js:10:hardcoded array:    let skuArray = [];
microservices-middleware/server/src/productmanagement/hometuition/dto.js:11:hardcoded object:    const { initialClass, board, stateBoard } = student
microservices-middleware/server/src/productmanagement/hometuition/dto.js:12:hardcoded variable:    const grade = initialClass
microservices-middleware/server/src/productmanagement/hometuition/dto.js:14:hardcoded variable:    let query = {
microservices-middleware/server/src/productmanagement/hometuition/dto.js:15:hardcoded string:        validity: '12',
microservices-middleware/server/src/productmanagement/hometuition/dto.js:16:hardcoded string:        validityType: 'day',
microservices-middleware/server/src/productmanagement/hometuition/dto.js:20:hardcoded variable:    const complimentarySku = await getDocSku({
microservices-middleware/server/src/productmanagement/hometuition/dto.js:21:hardcoded string:        category: "doubts_on_chat",
microservices-middleware/server/src/productmanagement/hometuition/dto.js:22:hardcoded string:        package: "doc_complimentary", 
microservices-middleware/server/src/productmanagement/hometuition/dto.js:23:hardcoded string:        validity: "40",
microservices-middleware/server/src/productmanagement/hometuition/dto.js:24:hardcoded string:        validityType: 'day'
microservices-middleware/server/src/productmanagement/hometuition/dto.js:25:hardcoded number:    }, 30)
microservices-middleware/server/src/productmanagement/hometuition/dto.js:26:hardcoded string:    query ["board"] = await getPostgresBoard({ grade, board, state: stateBoard, query, productCombination })
microservices-middleware/server/src/productmanagement/hometuition/dto.js:31:hardcoded number:        const isK5 = parseInt(initialClass) < 6 ? true : false 
microservices-middleware/server/src/productmanagement/hometuition/dto.js:32:hardcoded string:        const streamingSku = board == 'CBSE' || isK5 
microservices-middleware/server/src/productmanagement/hometuition/dto.js:35:hardcoded string:            subType: "streaming",
microservices-middleware/server/src/productmanagement/hometuition/dto.js:36:hardcoded string:            category: "mlp"
microservices-middleware/server/src/productmanagement/hometuition/dto.js:39:hardcoded string:            subType: 'streaming',
microservices-middleware/server/src/productmanagement/hometuition/dto.js:40:hardcoded string:            category: 'online_premium_app'
microservices-middleware/server/src/productmanagement/hometuition/dto.js:43:hardcoded variable:        const trialSku = await getSalesSku({
microservices-middleware/server/src/productmanagement/hometuition/dto.js:45:hardcoded string:            category: "home_tuition"
microservices-middleware/server/src/productmanagement/hometuition/dto.js:50:hardcoded variable:        const trialUpgradeSku = await getSalesSku({
microservices-middleware/server/src/productmanagement/hometuition/dto.js:52:hardcoded string:            category: "home_tuition_upgrade"
microservices-middleware/server/src/productmanagement/hometuition/dto.js:58:hardcoded variable:    const courseSku = await getUpdatedCourseSku(skuArray)
microservices-middleware/server/src/productmanagement/hometuition/dto.js:62:hardcoded variable:const getQuarterlyProductAndPrice = async (student, isUpgradeOrder, productCombination) => {
microservices-middleware/server/src/productmanagement/hometuition/dto.js:63:hardcoded array:    let skuArray = [];
microservices-middleware/server/src/productmanagement/hometuition/dto.js:64:hardcoded object:    const { initialClass, board, stateBoard, session, tablet: tabletId } = student
microservices-middleware/server/src/productmanagement/hometuition/dto.js:65:hardcoded number:    const currentYear = (new Date()).getFullYear() + 1;
microservices-middleware/server/src/productmanagement/hometuition/dto.js:66:hardcoded variable:    const grade = initialClass
microservices-middleware/server/src/productmanagement/hometuition/dto.js:68:hardcoded variable:    let query = {
microservices-middleware/server/src/productmanagement/hometuition/dto.js:72:hardcoded variable:    const complimentarySku = await getDocSku({
microservices-middleware/server/src/productmanagement/hometuition/dto.js:73:hardcoded string:        category: "doubts_on_chat",
microservices-middleware/server/src/productmanagement/hometuition/dto.js:74:hardcoded string:        package: "doc_complimentary", 
microservices-middleware/server/src/productmanagement/hometuition/dto.js:75:hardcoded string:        validity: '3',
microservices-middleware/server/src/productmanagement/hometuition/dto.js:76:hardcoded string:        validityType: 'month'
microservices-middleware/server/src/productmanagement/hometuition/dto.js:77:hardcoded number:    }, 30) 
microservices-middleware/server/src/productmanagement/hometuition/dto.js:81:hardcoded variable:        const streamingSku = await getSalesSku({
microservices-middleware/server/src/productmanagement/hometuition/dto.js:83:hardcoded string:            board: {[Op.or]: [null, "" ]},
microservices-middleware/server/src/productmanagement/hometuition/dto.js:84:hardcoded string:            subType: "streaming",
microservices-middleware/server/src/productmanagement/hometuition/dto.js:85:hardcoded string:            category: 'online_premium_app',
microservices-middleware/server/src/productmanagement/hometuition/dto.js:87:hardcoded string:            validityType: 'year'
microservices-middleware/server/src/productmanagement/hometuition/dto.js:90:hardcoded string:        query ["board"] = await getPostgresBoard({ grade, board, state: stateBoard, query, productCombination })
microservices-middleware/server/src/productmanagement/hometuition/dto.js:91:hardcoded variable:        const quarterlySku = await getHomeTuitionSku({
microservices-middleware/server/src/productmanagement/hometuition/dto.js:93:hardcoded string:            category: "home_tuition",
microservices-middleware/server/src/productmanagement/hometuition/dto.js:94:hardcoded string:            validity: '90',
microservices-middleware/server/src/productmanagement/hometuition/dto.js:95:hardcoded string:            validityType: 'day'
microservices-middleware/server/src/productmanagement/hometuition/dto.js:100:hardcoded string:        query ["board"] = await getPostgresBoard({ grade, board, state: stateBoard, query })
microservices-middleware/server/src/productmanagement/hometuition/dto.js:101:hardcoded variable:        const quarterlyUpgradeSku = await getHomeTuitionSku({
microservices-middleware/server/src/productmanagement/hometuition/dto.js:103:hardcoded string:            category: "home_tuition_upgrade",
microservices-middleware/server/src/productmanagement/hometuition/dto.js:104:hardcoded string:            validity: '90',
microservices-middleware/server/src/productmanagement/hometuition/dto.js:105:hardcoded string:            validityType: 'day'
microservices-middleware/server/src/productmanagement/hometuition/dto.js:111:hardcoded object:        const tabletSku = await getPostgresTabletSku({ tabletId })
microservices-middleware/server/src/productmanagement/hometuition/dto.js:114:hardcoded variable:    const courseSku = await getUpdatedCourseSku(skuArray)
microservices-middleware/server/src/productmanagement/hometuition/dto.js:118:hardcoded variable:const getDocSku = async (query, session) => {
microservices-middleware/server/src/productmanagement/hometuition/dto.js:119:hardcoded object:    let includeQuery = { where: { frequency : `${session}` }}
microservices-middleware/server/src/productmanagement/hometuition/dto.js:120:hardcoded variable:    let product = await getSalesSkuWithAttribute(query, includeQuery)
microservices-middleware/server/src/productmanagement/hometuition/dto.js:124:hardcoded variable:const getHomeTuitionSku = async (query, session) => {
microservices-middleware/server/src/productmanagement/hometuition/dto.js:126:hardcoded object:    let includeQuery = { where: { frequency : `${session}` }}
microservices-middleware/server/src/productmanagement/hometuition/dto.js:127:hardcoded variable:    let product = await getSalesSkuWithAttribute(query, includeQuery)
microservices-middleware/server/src/productmanagement/hometuition/dto.js:131:hardcoded variable:const getMonthlyProductAndPrice = async (student, isUpgradeOrder, productCombination) => {
microservices-middleware/server/src/productmanagement/hometuition/dto.js:132:hardcoded array:    let skuArray = [];
microservices-middleware/server/src/productmanagement/hometuition/dto.js:133:hardcoded object:    const { initialClass, board, stateBoard, session, tablet: tabletId } = student
microservices-middleware/server/src/productmanagement/hometuition/dto.js:134:hardcoded number:    const currentYear = (new Date()).getFullYear() + 1;
microservices-middleware/server/src/productmanagement/hometuition/dto.js:135:hardcoded variable:    const grade = initialClass
microservices-middleware/server/src/productmanagement/hometuition/dto.js:137:hardcoded variable:    let query = {
microservices-middleware/server/src/productmanagement/hometuition/dto.js:141:hardcoded variable:    const complimentarySku = await getDocSku({
microservices-middleware/server/src/productmanagement/hometuition/dto.js:142:hardcoded string:        category: "doubts_on_chat",
microservices-middleware/server/src/productmanagement/hometuition/dto.js:143:hardcoded string:        package: "doc_complimentary", 
microservices-middleware/server/src/productmanagement/hometuition/dto.js:144:hardcoded string:        validity: "40",
microservices-middleware/server/src/productmanagement/hometuition/dto.js:145:hardcoded string:        validityType: 'day'
microservices-middleware/server/src/productmanagement/hometuition/dto.js:146:hardcoded number:    }, 30)
microservices-middleware/server/src/productmanagement/hometuition/dto.js:150:hardcoded string:        query ["board"] = await getPostgresBoard({ grade, board, state: stateBoard, query, productCombination })
microservices-middleware/server/src/productmanagement/hometuition/dto.js:151:hardcoded variable:        const streamingSku = await getSalesSku({
microservices-middleware/server/src/productmanagement/hometuition/dto.js:153:hardcoded string:            subType: "streaming",
microservices-middleware/server/src/productmanagement/hometuition/dto.js:154:hardcoded string:            category: 'online_premium_app',
microservices-middleware/server/src/productmanagement/hometuition/dto.js:155:hardcoded string:            validity: "40",
microservices-middleware/server/src/productmanagement/hometuition/dto.js:156:hardcoded string:            validityType: 'day'
microservices-middleware/server/src/productmanagement/hometuition/dto.js:159:hardcoded variable:        const monthlySku = await getHomeTuitionSku({
microservices-middleware/server/src/productmanagement/hometuition/dto.js:161:hardcoded string:            category: "home_tuition",
microservices-middleware/server/src/productmanagement/hometuition/dto.js:162:hardcoded string:            validity: '1',
microservices-middleware/server/src/productmanagement/hometuition/dto.js:163:hardcoded string:            validityType: 'Month'
microservices-middleware/server/src/productmanagement/hometuition/dto.js:167:hardcoded string:        query["board"] = await getPostgresBoard({ grade, board, state: stateBoard, query });
microservices-middleware/server/src/productmanagement/hometuition/dto.js:168:hardcoded variable:        const monthlyUpgradeSku = await getHomeTuitionSku({
microservices-middleware/server/src/productmanagement/hometuition/dto.js:170:hardcoded string:            category: "home_tuition_upgrade",
microservices-middleware/server/src/productmanagement/hometuition/dto.js:171:hardcoded string:            validity: '1',
microservices-middleware/server/src/productmanagement/hometuition/dto.js:172:hardcoded string:            validityType: 'Month'
microservices-middleware/server/src/productmanagement/hometuition/dto.js:178:hardcoded object:        const tabletSku = await getPostgresTabletSku({ tabletId })
microservices-middleware/server/src/productmanagement/hometuition/dto.js:181:hardcoded variable:    const courseSku = await getUpdatedCourseSku(skuArray)
microservices-middleware/server/src/productmanagement/hometuition/routes.js:1:hardcoded file path:const Router = require('express-promise-router');
microservices-middleware/server/src/productmanagement/hometuition/routes.js:2:hardcoded file path:const controller = require('./controller');
microservices-middleware/server/src/productmanagement/hometuition/routes.js:3:hardcoded file path:const helper = require('./helper')
microservices-middleware/server/src/productmanagement/hometuition/routes.js:5:hardcoded object:const router = Router({ mergeParams: true });
microservices-middleware/server/src/productmanagement/hometuition/routes.js:8:hardcoded string:    const baseRoute = '/hometuition/product'
microservices-middleware/server/src/productmanagement/hometuition/routes.js:10:hardcoded object:    router.route(`${baseRoute}/single`)
microservices-middleware/server/src/productmanagement/hometuition/routes.js:15:hardcoded object:    router.route(`${baseRoute}/storeProductDetails`)
microservices-middleware/server/src/productmanagement/hometuition/helper.js:1:hardcoded object:const { isEmpty, isArray, flattenDeep, get } = require('lodash');
microservices-middleware/server/src/productmanagement/hometuition/helper.js:3:hardcoded file path:const logger = require('../../../lib/bunyan-logger')('Home Tution Explorer');
microservices-middleware/server/src/productmanagement/hometuition/helper.js:4:hardcoded object:const { BadRequestError } = require('../../../lib/errors');
microservices-middleware/server/src/productmanagement/hometuition/helper.js:5:hardcoded file path:const config = require('../../../config');
microservices-middleware/server/src/productmanagement/hometuition/helper.js:6:hardcoded string:const { DraftOrder } = require('@byjus-orders/nexemplum/oms');
microservices-middleware/server/src/productmanagement/hometuition/helper.js:7:hardcoded object:const { checkIfDraftOrderExists } = require('../../../utility/draftOrderUtility')
microservices-middleware/server/src/productmanagement/hometuition/helper.js:8:hardcoded object:const { attachSiblingDetails, getStudentProfileDetails, validatingFOCPremiumAccount } = require("../productHelper");
microservices-middleware/server/src/productmanagement/hometuition/helper.js:9:hardcoded object:const { getCohortId } = require("../../configmanagement/configController");
microservices-middleware/server/src/productmanagement/hometuition/helper.js:10:hardcoded object:const { callNucleusApi, callUxosApi, callStmsApi } = require('../../../utility/externalApiUtility');
microservices-middleware/server/src/productmanagement/hometuition/helper.js:11:hardcoded object:const { getBoardForState } = require('../service/boardAndState')
microservices-middleware/server/src/productmanagement/hometuition/helper.js:13:hardcoded variable:const storeProductDetails = async (req, res) => {
microservices-middleware/server/src/productmanagement/hometuition/helper.js:14:hardcoded object:    let { identifier, productDetails, studentDetails, isPrivilegedUser } = req.body;
microservices-middleware/server/src/productmanagement/hometuition/helper.js:16:hardcoded string:    const { email } = get(req, 'user', {});
microservices-middleware/server/src/productmanagement/hometuition/helper.js:17:hardcoded string:    logger.info({ method: 'storeProductDetails', msg: `Storing Product Details for _id:${identifier}` });
microservices-middleware/server/src/productmanagement/hometuition/helper.js:21:hardcoded string:            throw new BadRequestError(`Parameters - ${identifier ? '' : 'identifier'} ${productDetails ? '' : 'productDetails'} Missing`);
microservices-middleware/server/src/productmanagement/hometuition/helper.js:22:hardcoded variable:        const draftOrder = await checkIfDraftOrderExists(identifier);
microservices-middleware/server/src/productmanagement/hometuition/helper.js:25:hardcoded object:            const { customerDetails } = draftOrder;
microservices-middleware/server/src/productmanagement/hometuition/helper.js:26:hardcoded object:            const { productType, isUpgradeOrder, upgradeOrderId } = productDetails;
microservices-middleware/server/src/productmanagement/hometuition/helper.js:29:hardcoded string:            if (get(config, 'isStudentProfileAvailable') === "true" &&
microservices-middleware/server/src/productmanagement/hometuition/helper.js:35:hardcoded array:            const { formattedProducts = [], formattedStudents = [] } = await attachSiblingDetails(productDetails,
microservices-middleware/server/src/productmanagement/hometuition/helper.js:37:hardcoded string:            productDetails["students"] = formattedStudents;
microservices-middleware/server/src/productmanagement/hometuition/helper.js:38:hardcoded string:            productDetails["products"] = formattedProducts;
microservices-middleware/server/src/productmanagement/hometuition/helper.js:43:hardcoded variable:            let updateObj = {
microservices-middleware/server/src/productmanagement/hometuition/helper.js:46:hardcoded string:                orderPunchingCategory: "home_tuition",
microservices-middleware/server/src/productmanagement/hometuition/helper.js:47:hardcoded string:                finalPrice: get(productDetails, 'finalPrice', 0),
microservices-middleware/server/src/productmanagement/hometuition/helper.js:48:hardcoded string:                status: "product_saved",
microservices-middleware/server/src/productmanagement/hometuition/helper.js:49:hardcoded array:                [`actionDetails.productSavedAt`]: new Date(),
microservices-middleware/server/src/productmanagement/hometuition/helper.js:50:hardcoded array:                [`actionDetails.productSavedBy`]: email
microservices-middleware/server/src/productmanagement/hometuition/helper.js:55:hardcoded string:                    orderPunchingType: "upgrade_order",
microservices-middleware/server/src/productmanagement/hometuition/helper.js:57:hardcoded string:                        oldCourse: 'tlp',
microservices-middleware/server/src/productmanagement/hometuition/helper.js:58:hardcoded string:                        newCourse: "home_tuition",
microservices-middleware/server/src/productmanagement/hometuition/helper.js:64:hardcoded string:            await DraftOrder.findOneAndUpdate({ '_id': identifier }, {
microservices-middleware/server/src/productmanagement/hometuition/helper.js:67:hardcoded object:            return res.json({ productDetails });
microservices-middleware/server/src/productmanagement/hometuition/helper.js:74:hardcoded variable:const getActiveBatches = async (req, res) => {
microservices-middleware/server/src/productmanagement/hometuition/helper.js:75:hardcoded string:    let { centreId, batchType, initialClass, board, stateBoard = "other", productType = "" } = req.body
microservices-middleware/server/src/productmanagement/hometuition/helper.js:76:hardcoded string:    if (!centreId || !batchType || !initialClass || !board) throw new BadRequestError("Missing Parameter");
microservices-middleware/server/src/productmanagement/hometuition/helper.js:78:hardcoded string:    board = ["4", "5"].includes(initialClass) ? null : board === "STATE" ? getBoardForState(stateBoard) : board
microservices-middleware/server/src/productmanagement/hometuition/helper.js:79:hardcoded string:    const isDevEnv = ['local', 'development'].includes(process.env.NODE_ENV)
microservices-middleware/server/src/productmanagement/hometuition/helper.js:82:hardcoded variable:        const cohortId = await getCohortId(initialClass, board)
microservices-middleware/server/src/productmanagement/hometuition/helper.js:83:hardcoded variable:        const payload = {
microservices-middleware/server/src/productmanagement/hometuition/helper.js:92:hardcoded string:        batchesList = await callStmsApi(uri, 'POST', payload)
microservices-middleware/server/src/productmanagement/hometuition/helper.js:95:hardcoded number:            return res.status(200).json(batchesList)
microservices-middleware/server/src/productmanagement/hometuition/helper.js:98:hardcoded string:            throw new Error("No active batches are available.Please mail support-optech@byjus.com")
microservices-middleware/server/src/productmanagement/hometuition/helper.js:102:hardcoded string:        logger.error({ method: 'getHomeTuitionBatch', error })
microservices-middleware/server/src/productmanagement/hometuition/helper.js:103:hardcoded number:        return res.status(500).json({ message: error.message })
microservices-middleware/server/src/productmanagement/hometuition/helper.js:107:hardcoded variable:const attachHomeTuitionCenterAndBatchDetails = (student) => {
microservices-middleware/server/src/productmanagement/hometuition/helper.js:108:hardcoded object:    const { state, stateName, city, cityName, centre, centreName, requestedBatchId, batchType, courseAliasId, cohortId, pincode } = student
microservices-middleware/server/src/productmanagement/hometuition/helper.js:110:hardcoded variable:    let centreDetails = {
microservices-middleware/server/src/productmanagement/hometuition/helper.js:111:hardcoded string:        "stateId": state,
microservices-middleware/server/src/productmanagement/hometuition/helper.js:112:hardcoded string:        "state": stateName,
microservices-middleware/server/src/productmanagement/hometuition/helper.js:113:hardcoded string:        "cityId": city,
microservices-middleware/server/src/productmanagement/hometuition/helper.js:114:hardcoded string:        "city": cityName,
microservices-middleware/server/src/productmanagement/hometuition/helper.js:115:hardcoded string:        "centreId": centre,
microservices-middleware/server/src/productmanagement/hometuition/helper.js:116:hardcoded string:        "centre": centreName,
microservices-middleware/server/src/productmanagement/hometuition/helper.js:117:hardcoded string:        "requestedBatchId": requestedBatchId,
microservices-middleware/server/src/productmanagement/hometuition/helper.js:118:hardcoded string:        "requestId": null,
microservices-middleware/server/src/productmanagement/hometuition/helper.js:119:hardcoded string:        "batchType": batchType,
microservices-middleware/server/src/productmanagement/hometuition/helper.js:120:hardcoded string:        "courseAliasId": courseAliasId,
microservices-middleware/server/src/productmanagement/hometuition/helper.js:121:hardcoded string:        "cohortId": cohortId,
microservices-middleware/server/src/productmanagement/hometuition/helper.js:122:hardcoded string:        "pincode": pincode
microservices-middleware/server/src/productmanagement/hometuition/helper.js:124:hardcoded string:    student["centreDetails"] = centreDetails;
