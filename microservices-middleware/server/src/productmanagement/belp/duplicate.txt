microservices-middleware/server/src/productmanagement/belp/service.js:1:hardcoded object:const { get, concat, map, flattenDeep, find, isEmpty, includes } = require('lodash');
microservices-middleware/server/src/productmanagement/belp/service.js:2:hardcoded object:const { splitOrderConstants } = require('../../ordermanagement/utils/orderConstant');
microservices-middleware/server/src/productmanagement/belp/service.js:3:hardcoded file path:const logger = require('../../../lib/bunyan-logger')('orderSplit.js');
microservices-middleware/server/src/productmanagement/belp/service.js:4:hardcoded string:const { ProductDetail } = require('@byjus-orders/nexemplum/oms');
microservices-middleware/server/src/productmanagement/belp/service.js:6:hardcoded variable:const formatBelpLineItems = async (orderDetails) => {
microservices-middleware/server/src/productmanagement/belp/service.js:7:hardcoded string:    logger.info({ method: 'formatLineItems' }, 'Checking if byjus math order is eligible to be splitted');
microservices-middleware/server/src/productmanagement/belp/service.js:8:hardcoded object:    const { productDetails, paymentDetails, orderPunchingType } = orderDetails;
microservices-middleware/server/src/productmanagement/belp/service.js:9:hardcoded string:    const { productType = '', students = [], mentoring, tablets: seperateTablets = [], products = [], mentoringDetails } = productDetails;
microservices-middleware/server/src/productmanagement/belp/service.js:10:hardcoded string:    const { type: paymentType = '', totalAmount, totalPrepaidAmount, totalPostpaidAmount, payments } = paymentDetails;
microservices-middleware/server/src/productmanagement/belp/service.js:11:hardcoded string:    const { productSelectionType = "", validity } = students[0] || {};
microservices-middleware/server/src/productmanagement/belp/service.js:12:hardcoded object:    let lineItems = {};
microservices-middleware/server/src/productmanagement/belp/service.js:13:hardcoded variable:    const actualPaymentType = getPaymentType(paymentDetails);
microservices-middleware/server/src/productmanagement/belp/service.js:15:hardcoded string:     * and productType = "SINGLE" or "COMBO" or "SIBLING",
microservices-middleware/server/src/productmanagement/belp/service.js:19:hardcoded string:    logger.info({ method: 'formatLineItems' }, { message: "Checking if eligible for splitting", paymentType, productType });
microservices-middleware/server/src/productmanagement/belp/service.js:21:hardcoded string:    const isUmrnGenerated = actualPaymentType === "EMI" ? checkUmrnGenerated(payments) : false;
microservices-middleware/server/src/productmanagement/belp/service.js:24:hardcoded string:    if (productSelectionType == 'belp') {
microservices-middleware/server/src/productmanagement/belp/service.js:25:hardcoded string:        const items = flattenDeep(map(students, 'items'));
microservices-middleware/server/src/productmanagement/belp/service.js:26:hardcoded number:        let student = students[0] || {};
microservices-middleware/server/src/productmanagement/belp/service.js:27:hardcoded object:        const splittedLineItems = await getBfsLineItems({ student, items, productSelectionType, actualPaymentType, productType });
microservices-middleware/server/src/productmanagement/belp/service.js:28:hardcoded object:        const { parentLineItems, childLineItems } = splittedLineItems || {};
microservices-middleware/server/src/productmanagement/belp/service.js:29:hardcoded string:        const orderType = childLineItems.length ? 'split_order' : 'single_order';
microservices-middleware/server/src/productmanagement/belp/service.js:30:hardcoded string:        logger.info("%j", { method: 'formatLineItems' }, { orderType, lineItems: JSON.stringify(splittedLineItems) });
microservices-middleware/server/src/productmanagement/belp/service.js:35:hardcoded string:    } else if (orderPunchingType == "UPGRADE") {
microservices-middleware/server/src/productmanagement/belp/service.js:36:hardcoded string:        const items = flattenDeep(map(students, 'items'));
microservices-middleware/server/src/productmanagement/belp/service.js:38:hardcoded string:            "parentLineItems": items,
microservices-middleware/server/src/productmanagement/belp/service.js:39:hardcoded string:            "childLineItems": []
microservices-middleware/server/src/productmanagement/belp/service.js:46:hardcoded variable:const getBfsLineItems = async (orderDetails) => {
microservices-middleware/server/src/productmanagement/belp/service.js:47:hardcoded object:    const { student = {}, items, productSelectionType, actualPaymentType, productType } = orderDetails;
microservices-middleware/server/src/productmanagement/belp/service.js:48:hardcoded string:    let studentId = student.studentId || ""
microservices-middleware/server/src/productmanagement/belp/service.js:49:hardcoded array:    let parentLineItems = [];
microservices-middleware/server/src/productmanagement/belp/service.js:50:hardcoded array:    let childLineItems = [];
microservices-middleware/server/src/productmanagement/belp/service.js:52:hardcoded string:    let tablets = items.filter(item => item && item.itemType == "tablet");
microservices-middleware/server/src/productmanagement/belp/service.js:53:hardcoded string:    let courses = items.filter(item => item && item.itemType == "course"
microservices-middleware/server/src/productmanagement/belp/service.js:54:hardcoded string:     && item.category != "epic" && item.category != "tynker_jr");
microservices-middleware/server/src/productmanagement/belp/service.js:55:hardcoded string:    let epicSku = items.filter(item => item && item.category == "epic");
microservices-middleware/server/src/productmanagement/belp/service.js:56:hardcoded string:    let tynkerSku = items.filter(item => item && item.category == "tynker_jr");
microservices-middleware/server/src/productmanagement/belp/service.js:57:hardcoded string:    let tykerUlSku = items.filter(item => item && item.category == "tynker_ul");
microservices-middleware/server/src/productmanagement/belp/service.js:60:hardcoded object:    const splittedLineItems = splitLineItems({ student, courses, tablets, epicSku, tynkerSku, tykerUlSku });
microservices-middleware/server/src/productmanagement/belp/service.js:61:hardcoded string:    parentLineItems = concat(parentLineItems, get(splittedLineItems, 'parentLineItems'));
microservices-middleware/server/src/productmanagement/belp/service.js:62:hardcoded string:    childLineItems = concat(childLineItems, get(splittedLineItems, 'childLineItems'));
microservices-middleware/server/src/productmanagement/belp/service.js:63:hardcoded string:    if (actualPaymentType == 'EMI') {
microservices-middleware/server/src/productmanagement/belp/service.js:64:hardcoded number:        const { grade, course } = courses[0];
microservices-middleware/server/src/productmanagement/belp/service.js:68:hardcoded object:    return { parentLineItems, childLineItems }
microservices-middleware/server/src/productmanagement/belp/service.js:71:hardcoded variable:const checkUmrnGenerated = (payment) => {
microservices-middleware/server/src/productmanagement/belp/service.js:72:hardcoded variable:    let isUmrn = false;
microservices-middleware/server/src/productmanagement/belp/service.js:73:hardcoded string:    const emiDetails = payment.find(ele => ele.type === "EMI" && splitOrderConstants.ALLOWED_PAYMENT_PROVIDERS_FOR_UMRN_CHECK.includes(ele.provider));
microservices-middleware/server/src/productmanagement/belp/service.js:75:hardcoded object:        const { additionalDetails = {} } = emiDetails;
microservices-middleware/server/src/productmanagement/belp/service.js:76:hardcoded string:        const umrn = get(additionalDetails, "umrn", "");
microservices-middleware/server/src/productmanagement/belp/service.js:77:hardcoded string:        const registrationStatus = get(additionalDetails, "registrationStatus", "");
microservices-middleware/server/src/productmanagement/belp/service.js:79:hardcoded string:        if (registrationStatus.includes("dest_register_success")) {
microservices-middleware/server/src/productmanagement/belp/service.js:86:hardcoded variable:const getPaymentType = (paymentDetails) => {
microservices-middleware/server/src/productmanagement/belp/service.js:87:hardcoded object:    const { type, payments } = paymentDetails;
microservices-middleware/server/src/productmanagement/belp/service.js:88:hardcoded variable:    let paymentType = type;
microservices-middleware/server/src/productmanagement/belp/service.js:90:hardcoded object:        const { type, provider } = payment;
microservices-middleware/server/src/productmanagement/belp/service.js:92:hardcoded string:        if (["BAJAJ", "PAYU", "PINE_LABS", "BYJUS_SUBSCRIBE", "RAZORPAY"].indexOf(provider) >= 0 && type === "EMI") {
microservices-middleware/server/src/productmanagement/belp/service.js:93:hardcoded string:            paymentType = "NON_EMI";
microservices-middleware/server/src/productmanagement/belp/service.js:99:hardcoded variable:const getExtensionSku = async (grade, course, studentId) => {
microservices-middleware/server/src/productmanagement/belp/service.js:100:hardcoded string:    let query = { type: 'extension', course };
microservices-middleware/server/src/productmanagement/belp/service.js:102:hardcoded string:        query["grade"] = grade
microservices-middleware/server/src/productmanagement/belp/service.js:104:hardcoded variable:    const extensionSku = await ProductDetail.findOne(query).lean();
microservices-middleware/server/src/productmanagement/belp/service.js:113:hardcoded array:        return [];
microservices-middleware/server/src/productmanagement/belp/service.js:117:hardcoded variable:const splitLineItems = (productDetails) => {
microservices-middleware/server/src/productmanagement/belp/service.js:118:hardcoded array:    const { student, courses = [], tablets = [], epicSku, orderPunchingType, isNeoClass, tynkerSku, tykerUlSku } = productDetails || {}
microservices-middleware/server/src/productmanagement/belp/service.js:119:hardcoded string:    logger.info("%j", { method: 'splitLineItems' }, { message: `Slitting line Items by taking 1 tablet and 1 initial course` });
microservices-middleware/server/src/productmanagement/belp/service.js:120:hardcoded object:    const { initialClass, finalClass, validity, productSelectionType } = student || {};
microservices-middleware/server/src/productmanagement/belp/service.js:121:hardcoded variable:    const mergedItems = concat(courses, tablets);
microservices-middleware/server/src/productmanagement/belp/service.js:122:hardcoded array:    let parentLineItems = [];
microservices-middleware/server/src/productmanagement/belp/service.js:123:hardcoded array:    let childLineItems = [];
microservices-middleware/server/src/productmanagement/belp/service.js:124:hardcoded string:    const initialCourse = find(courses, { "grade": initialClass }) || courses[0];
microservices-middleware/server/src/productmanagement/belp/service.js:126:hardcoded number:    /**Create parentLineItems as combination of 1st course and 1st tablet */
microservices-middleware/server/src/productmanagement/belp/service.js:127:hardcoded string:    childLineItems = mergedItems.filter(course => course.type === "service");
microservices-middleware/server/src/productmanagement/belp/service.js:129:hardcoded string:        const childItemIds = map(childLineItems, 'skuId');
microservices-middleware/server/src/productmanagement/belp/service.js:131:hardcoded string:        if (!childItemIds.includes(get(item, 'skuId', ''))) {
microservices-middleware/server/src/productmanagement/belp/controller.js:1:hardcoded object:const { get, isEmpty, isArray, isNaN, flattenDeep } = require('lodash');
microservices-middleware/server/src/productmanagement/belp/controller.js:2:hardcoded file path:const moment = require('moment');
microservices-middleware/server/src/productmanagement/belp/controller.js:4:hardcoded file path:const logger = require('../../../lib/bunyan-logger')('BLC Product Explorer');
microservices-middleware/server/src/productmanagement/belp/controller.js:5:hardcoded object:const { isDevEnv, isLocalEnv } = require('../../../lib/featureHelper')
microservices-middleware/server/src/productmanagement/belp/controller.js:6:hardcoded object:const { BadRequestError } = require('../../../lib/errors');
microservices-middleware/server/src/productmanagement/belp/controller.js:8:hardcoded object:const { getUpdatedBelpMPrice, getUpdatedBelpTlpPrice } = require('./helper');
microservices-middleware/server/src/productmanagement/belp/controller.js:9:hardcoded object:const { getBelpSdCard, getBelpTabletSku, getBelpMathComplimentarySku } = require('./dto')
microservices-middleware/server/src/productmanagement/belp/controller.js:10:hardcoded object:const { getDiscountDetails } = require('../vouchermanagement/voucherHelper');
microservices-middleware/server/src/productmanagement/belp/controller.js:11:hardcoded object:const { getEpicCourseSku } = require('../epicmanagement/epicHelper')
microservices-middleware/server/src/productmanagement/belp/controller.js:12:hardcoded object:const { getTynkerCourseSku, getTynkerUlCourseSku } = require('../tynkerManagement/tynkerHelper');
microservices-middleware/server/src/productmanagement/belp/controller.js:13:hardcoded number:const { BYJUS_MATH_MIN_PRICE, BELP_K3_GRADES, ELIGIBLE_TYNKER_UL_GRADES } = require('../utils/productConstants')
microservices-middleware/server/src/productmanagement/belp/controller.js:14:hardcoded object:const { getRegSku } = require("../dto");
microservices-middleware/server/src/productmanagement/belp/controller.js:17:hardcoded variable:const getTotalPrice = async (details) => {
microservices-middleware/server/src/productmanagement/belp/controller.js:18:hardcoded object:    let { finalPrice, tabletSku } = details
microservices-middleware/server/src/productmanagement/belp/controller.js:20:hardcoded variable:    let totalPrice = parseInt(finalPrice);
microservices-middleware/server/src/productmanagement/belp/controller.js:21:hardcoded array:    tabletSku = isArray(tabletSku) ? tabletSku : [tabletSku];
microservices-middleware/server/src/productmanagement/belp/controller.js:24:hardcoded number:            const { price = 0, quantity = 1 } = sku;
microservices-middleware/server/src/productmanagement/belp/controller.js:31:hardcoded variable:const getSingleProduct = async (req, res) => {
microservices-middleware/server/src/productmanagement/belp/controller.js:32:hardcoded string:    logger.info({ method: 'getSingleProduct' }, { message: "Fetching Single Product" });
microservices-middleware/server/src/productmanagement/belp/controller.js:36:hardcoded string:    let { identifier, paymentType = "EMI", productType, productCombination, isEpicEnabled,
microservices-middleware/server/src/productmanagement/belp/controller.js:38:hardcoded object:    let { student } = req.body
microservices-middleware/server/src/productmanagement/belp/controller.js:39:hardcoded variable:    const user = req.user;
microservices-middleware/server/src/productmanagement/belp/controller.js:44:hardcoded number:        student = isArray(student) ? student[0] : student
microservices-middleware/server/src/productmanagement/belp/controller.js:45:hardcoded object:        let { tablet, initialClass, validity, board } = student;
microservices-middleware/server/src/productmanagement/belp/controller.js:47:hardcoded object:        belpSdCardSku = await getBelpSdCard({ initialClass, student, validity, tablet, board });
microservices-middleware/server/src/productmanagement/belp/controller.js:49:hardcoded number:        // this condition works for complimentary mathn sku in belp for 16 sessions
microservices-middleware/server/src/productmanagement/belp/controller.js:50:hardcoded number:        if (BELP_K3_GRADES.includes(initialClass) && isGauntletTwoUser && !isGauntletBDAUser) {
microservices-middleware/server/src/productmanagement/belp/controller.js:51:hardcoded object:            bfsCourseSku = await getBelpMathComplimentarySku({ initialClass, board, validity, productType, student })
microservices-middleware/server/src/productmanagement/belp/controller.js:54:hardcoded object:        epicSku = await getEpicCourseSku({ validity, tablet, initialClass, finalClass: initialClass });
microservices-middleware/server/src/productmanagement/belp/controller.js:56:hardcoded number:        // This condition works for tynker ulimited sku, this sku only picking grade 2 to 7, for other grade will be picked tynker jr sku
microservices-middleware/server/src/productmanagement/belp/controller.js:57:hardcoded object:        tynkerSku = ELIGIBLE_TYNKER_UL_GRADES.includes(initialClass) ? await getTynkerUlCourseSku({ validity, initialClass, finalClass: initialClass }) : await getTynkerCourseSku({ validity, initialClass, finalClass: initialClass })
microservices-middleware/server/src/productmanagement/belp/controller.js:59:hardcoded object:        tabletSku = tablet ? await getBelpTabletSku({ tabletId: tablet }) : null;
microservices-middleware/server/src/productmanagement/belp/controller.js:61:hardcoded object:        const byjusMathPrice = getUpdatedBelpMPrice({ tabletSku, belpSdCardSku, productCombination, user, tynkerSku, epicSku, bfsCourseSku });
microservices-middleware/server/src/productmanagement/belp/controller.js:62:hardcoded object:        const { maxByjusMathPrice, minByjusMathPrice } = byjusMathPrice || {};
microservices-middleware/server/src/productmanagement/belp/controller.js:63:hardcoded variable:        let maxPrice = maxByjusMathPrice;
microservices-middleware/server/src/productmanagement/belp/controller.js:64:hardcoded variable:        let minPrice = minByjusMathPrice;
microservices-middleware/server/src/productmanagement/belp/controller.js:66:hardcoded array:        const products = [belpSdCardSku, bfsCourseSku, tabletSku, epicSku, tynkerSku, await getRegSku({initialClass, productCombination})];
microservices-middleware/server/src/productmanagement/belp/controller.js:68:hardcoded variable:        const formattedProducts = flattenDeep(products).filter(prdct => prdct);
microservices-middleware/server/src/productmanagement/belp/controller.js:71:hardcoded string:        student["formValues"] = { ...student };
microservices-middleware/server/src/productmanagement/belp/controller.js:72:hardcoded string:        student["items"] = formattedProducts;
microservices-middleware/server/src/productmanagement/belp/controller.js:73:hardcoded object:        const skuProductDetails = { initialClass, tabletSku, maxPrice, minPrice, productCombination }
microservices-middleware/server/src/productmanagement/belp/controller.js:74:hardcoded object:        const discountDetails = await getDiscountDetails({ identifier, productDetails: skuProductDetails });
microservices-middleware/server/src/productmanagement/belp/controller.js:75:hardcoded string:        const { discountedPrice, voucher = "", minimumPrice, areBonusPointsUsed = false, bonusPointsDiscount = 0 } = discountDetails;
microservices-middleware/server/src/productmanagement/belp/controller.js:84:hardcoded array:            students: [student],
microservices-middleware/server/src/productmanagement/belp/controller.js:87:hardcoded number:                count: 0,
microservices-middleware/server/src/productmanagement/belp/controller.js:88:hardcoded array:                items: []
microservices-middleware/server/src/productmanagement/belp/controller.js:103:hardcoded variable:const getComboProduct = async (req, res) => {
microservices-middleware/server/src/productmanagement/belp/controller.js:104:hardcoded string:    logger.info({ method: 'getComboProduct' }, { message: "Fetching Combo Product" });
microservices-middleware/server/src/productmanagement/belp/controller.js:106:hardcoded array:    let belpSdCardSku, bfsCourseSku, tabletSku, booksSku = [], epicSku = [], tynkerSku = [];
microservices-middleware/server/src/productmanagement/belp/controller.js:107:hardcoded number:    let skuPrice = 0;
microservices-middleware/server/src/productmanagement/belp/controller.js:108:hardcoded array:    let skuArray = [];
microservices-middleware/server/src/productmanagement/belp/controller.js:110:hardcoded string:    let { paymentType = "EMI", productType, student, productCombination, identifier, isPrivilegedUser, isEpicEnabled,
microservices-middleware/server/src/productmanagement/belp/controller.js:113:hardcoded variable:    const user = req.user;
microservices-middleware/server/src/productmanagement/belp/controller.js:115:hardcoded number:    student = isArray(student) ? student[0] : student;
microservices-middleware/server/src/productmanagement/belp/controller.js:116:hardcoded object:    let { initialClass, finalClass, validity, tablet, byjusClassFinalGrade, tlpFinalGrade, board, belpProductType } = student;
microservices-middleware/server/src/productmanagement/belp/controller.js:121:hardcoded variable:    let grade = initialClass;
microservices-middleware/server/src/productmanagement/belp/controller.js:122:hardcoded variable:    let initialValidity = validity
microservices-middleware/server/src/productmanagement/belp/controller.js:123:hardcoded number:    let price = 0;
microservices-middleware/server/src/productmanagement/belp/controller.js:126:hardcoded variable:        let updatedBelpProductType = belpProductType
microservices-middleware/server/src/productmanagement/belp/controller.js:128:hardcoded object:            belpSdCardSku = await getBelpSdCard({ initialClass: grade, belpProductType, student, validity, board });
microservices-middleware/server/src/productmanagement/belp/controller.js:129:hardcoded number:            // this condition works for complimentary mathn sku in belp for 16 sessions
microservices-middleware/server/src/productmanagement/belp/controller.js:130:hardcoded number:            if (BELP_K3_GRADES.includes(initialClass) && isGauntletTwoUser && !isGauntletBDAUser) {
microservices-middleware/server/src/productmanagement/belp/controller.js:132:hardcoded object:                    bfsCourseSku = await getBelpMathComplimentarySku({ initialClass: grade, board, validity, productType, student });
microservices-middleware/server/src/productmanagement/belp/controller.js:136:hardcoded number:            // This condition works for tynker ulimited sku, this sku only picking grade 2 to 7, for other grade will be picked tynker jr sku
microservices-middleware/server/src/productmanagement/belp/controller.js:138:hardcoded object:                tynkerSku = await getTynkerUlCourseSku({ validity, tablet, initialClass, finalClass, grade })
microservices-middleware/server/src/productmanagement/belp/controller.js:141:hardcoded object:                tynkerSku = await getTynkerCourseSku({ validity, tablet, initialClass, finalClass, grade })
microservices-middleware/server/src/productmanagement/belp/controller.js:145:hardcoded number:            grade += 1;
microservices-middleware/server/src/productmanagement/belp/controller.js:148:hardcoded object:        epicSku = await getEpicCourseSku({ validity: initialValidity, tablet, initialClass, finalClass });
microservices-middleware/server/src/productmanagement/belp/controller.js:151:hardcoded object:        tabletSku = tablet ? await getBelpTabletSku({ tabletId: tablet }) : null;
microservices-middleware/server/src/productmanagement/belp/controller.js:158:hardcoded object:                const { category } = sku;
microservices-middleware/server/src/productmanagement/belp/controller.js:159:hardcoded string:                if (['btlp'].includes(category)) {
microservices-middleware/server/src/productmanagement/belp/controller.js:160:hardcoded string:                    sku["price"] = getUpdatedBelpTlpPrice({
microservices-middleware/server/src/productmanagement/belp/controller.js:166:hardcoded string:                    price += sku["price"];
microservices-middleware/server/src/productmanagement/belp/controller.js:170:hardcoded string:                    sku["price"] = sku.basePrice
microservices-middleware/server/src/productmanagement/belp/controller.js:173:hardcoded string:                    sku["price"] = sku.continuousPrice
microservices-middleware/server/src/productmanagement/belp/controller.js:179:hardcoded number:        let minByjusMathPrice = 0, minPrice = 0, maxPrice = 0;
microservices-middleware/server/src/productmanagement/belp/controller.js:181:hardcoded number:        const tabPrice = (tabletSku) ? parseInt(tabletSku.basePrice) : 0;
microservices-middleware/server/src/productmanagement/belp/controller.js:182:hardcoded object:        maxPrice = await getTotalPrice({ finalPrice: price, tabletSku });
microservices-middleware/server/src/productmanagement/belp/controller.js:184:hardcoded number:        minPrice = ((Math.floor((minByjusMathPrice) * BYJUS_MATH_MIN_PRICE / 1000)) * 1000) + tabPrice
microservices-middleware/server/src/productmanagement/belp/controller.js:186:hardcoded array:        const products = [skuArray, tabletSku, await getRegSku({initialClass, productCombination})];
microservices-middleware/server/src/productmanagement/belp/controller.js:187:hardcoded variable:        const formattedProducts = flattenDeep(products).filter(prdct => prdct);
microservices-middleware/server/src/productmanagement/belp/controller.js:189:hardcoded string:        student["formValues"] = { ...student };
microservices-middleware/server/src/productmanagement/belp/controller.js:190:hardcoded string:        student["items"] = formattedProducts;
microservices-middleware/server/src/productmanagement/belp/controller.js:191:hardcoded string:        student["belpProductType"] = updatedBelpProductType;
microservices-middleware/server/src/productmanagement/belp/controller.js:192:hardcoded object:        const skuProductDetails = { initialClass, tabletSku, maxPrice, minPrice, productCombination }
microservices-middleware/server/src/productmanagement/belp/controller.js:193:hardcoded object:        const discountDetails = await getDiscountDetails({ identifier, productDetails: skuProductDetails });
microservices-middleware/server/src/productmanagement/belp/controller.js:194:hardcoded string:        const { discountedPrice, voucher = "", minimumPrice, areBonusPointsUsed = false, bonusPointsDiscount = 0 } = discountDetails;
microservices-middleware/server/src/productmanagement/belp/controller.js:203:hardcoded array:            students: [student],
microservices-middleware/server/src/productmanagement/belp/controller.js:206:hardcoded number:                count: 0,
microservices-middleware/server/src/productmanagement/belp/controller.js:207:hardcoded array:                items: []
microservices-middleware/server/src/productmanagement/belp/dto.js:1:hardcoded object:const { get} = require('lodash');
microservices-middleware/server/src/productmanagement/belp/dto.js:2:hardcoded object:const { Op } = require("sequelize");
microservices-middleware/server/src/productmanagement/belp/dto.js:4:hardcoded string:const { SalesSkuMaster } = require('@byjus-orders/npgexemplum')
microservices-middleware/server/src/productmanagement/belp/dto.js:5:hardcoded object:const { getSkuItemId } = require('../productHelper');
microservices-middleware/server/src/productmanagement/belp/dto.js:6:hardcoded object:const { getErrorMsg } = require('../productHelper');
microservices-middleware/server/src/productmanagement/belp/dto.js:7:hardcoded object:const  { NotFoundError } = require('../../../lib/errors')
microservices-middleware/server/src/productmanagement/belp/dto.js:8:hardcoded object:const { isDevEnv, isLocalEnv } = require('../../../lib/featureHelper')
microservices-middleware/server/src/productmanagement/belp/dto.js:10:hardcoded variable:const getPostgresCourseSKU = async (details) => {
microservices-middleware/server/src/productmanagement/belp/dto.js:11:hardcoded object:    const { category, grade, validity, scheme, subType, board = null, subCourse, tablet, course} = details
microservices-middleware/server/src/productmanagement/belp/dto.js:13:hardcoded variable:    const query = {
microservices-middleware/server/src/productmanagement/belp/dto.js:14:hardcoded string:        status: "active",
microservices-middleware/server/src/productmanagement/belp/dto.js:17:hardcoded string:        type : "product",
microservices-middleware/server/src/productmanagement/belp/dto.js:18:hardcoded object:        grade: `${grade}`,
microservices-middleware/server/src/productmanagement/belp/dto.js:19:hardcoded object:        validity: `${validity}`
microservices-middleware/server/src/productmanagement/belp/dto.js:21:hardcoded string:    if (subType !== 'sd_card') {
microservices-middleware/server/src/productmanagement/belp/dto.js:22:hardcoded string:        query["scheme"] = scheme
microservices-middleware/server/src/productmanagement/belp/dto.js:23:hardcoded string:        query["board"] = (board === "STATE" || scheme === "16_R" || scheme === "16" ) ? "" : board;
microservices-middleware/server/src/productmanagement/belp/dto.js:24:hardcoded string:        query["subCourse"] = subCourse;
microservices-middleware/server/src/productmanagement/belp/dto.js:25:hardcoded string:        query["type"] = 'service';
microservices-middleware/server/src/productmanagement/belp/dto.js:26:hardcoded string:        query["course"] = course;
microservices-middleware/server/src/productmanagement/belp/dto.js:28:hardcoded string:        query["brand"] = 'D4';
microservices-middleware/server/src/productmanagement/belp/dto.js:29:hardcoded string:        query["board"] = ['-1', '0','1', '2', '3', '4', '5', -1, 0, 1, 2, 3, 4, 5].includes(grade) ? null : board;
microservices-middleware/server/src/productmanagement/belp/dto.js:32:hardcoded variable:    const product = await SalesSkuMaster.findOne({
microservices-middleware/server/src/productmanagement/belp/dto.js:40:hardcoded string:            itemType: 'course'
microservices-middleware/server/src/productmanagement/belp/dto.js:44:hardcoded object:        const errorMsg = getErrorMsg({ grade, board, validity, type });
microservices-middleware/server/src/productmanagement/belp/dto.js:48:hardcoded variable:const getBelpSdCard = async (details) => {
microservices-middleware/server/src/productmanagement/belp/dto.js:49:hardcoded object:    const { initialClass, student, validity, tablet, board } = details || {}
microservices-middleware/server/src/productmanagement/belp/dto.js:50:hardcoded variable:    let grade = initialClass;
microservices-middleware/server/src/productmanagement/belp/dto.js:53:hardcoded string:            category: "btlp",
microservices-middleware/server/src/productmanagement/belp/dto.js:55:hardcoded string:            subType : "sd_card",
microservices-middleware/server/src/productmanagement/belp/dto.js:58:hardcoded string:            board: board === 'STATE' ? student.state : board
microservices-middleware/server/src/productmanagement/belp/dto.js:61:hardcoded string:    courseSku["combinationType"] = get(courseSku, "type", "").toLowerCase();
microservices-middleware/server/src/productmanagement/belp/dto.js:62:hardcoded string:    courseSku["itemId"] = getSkuItemId(courseSku);
microservices-middleware/server/src/productmanagement/belp/dto.js:63:hardcoded number:    if (initialClass !== -2) {
microservices-middleware/server/src/productmanagement/belp/dto.js:64:hardcoded string:        courseSku['basePrice'] = coursePrice;
microservices-middleware/server/src/productmanagement/belp/dto.js:65:hardcoded string:        courseSku['price'] = grade == initialClass ? coursePrice : courseSku.continuousPrice;
microservices-middleware/server/src/productmanagement/belp/dto.js:70:hardcoded variable:const getBelpMathComplimentarySku = async(productDetails) => {
microservices-middleware/server/src/productmanagement/belp/dto.js:71:hardcoded object:    const { initialClass, board } = productDetails || {};
microservices-middleware/server/src/productmanagement/belp/dto.js:72:hardcoded object:    let { validity } = productDetails || {};
microservices-middleware/server/src/productmanagement/belp/dto.js:75:hardcoded string:        status: "active",
microservices-middleware/server/src/productmanagement/belp/dto.js:76:hardcoded string:        category: "byjus_math",
microservices-middleware/server/src/productmanagement/belp/dto.js:79:hardcoded string:        course:"K3",
microservices-middleware/server/src/productmanagement/belp/dto.js:80:hardcoded string:        subType: 'live',
microservices-middleware/server/src/productmanagement/belp/dto.js:81:hardcoded string:        subCourse: "1:6",
microservices-middleware/server/src/productmanagement/belp/dto.js:83:hardcoded string:        scheme: validity.toString() === "2023" ? "16_R" : "16"
microservices-middleware/server/src/productmanagement/belp/dto.js:87:hardcoded string:    bfsCourseSku["combinationType"] = get(bfsCourseSku, "type", "").toLowerCase();
microservices-middleware/server/src/productmanagement/belp/dto.js:88:hardcoded string:    bfsCourseSku["itemId"] = getSkuItemId(bfsCourseSku);
microservices-middleware/server/src/productmanagement/belp/dto.js:89:hardcoded string:    bfsCourseSku['price'] = bfSkuPrice;
microservices-middleware/server/src/productmanagement/belp/dto.js:94:hardcoded variable:const getBelpTabletSku = async (details) => {
microservices-middleware/server/src/productmanagement/belp/dto.js:95:hardcoded object:    let { tabletId, studentId, uniqueTabletId } = details
microservices-middleware/server/src/productmanagement/belp/dto.js:96:hardcoded number:    let price = 0
microservices-middleware/server/src/productmanagement/belp/dto.js:97:hardcoded variable:    const tabletSku = await SalesSkuMaster.findOne({
microservices-middleware/server/src/productmanagement/belp/dto.js:99:hardcoded string:            [Op.or]: [{ "skuId": tabletId }, { "ohProductId": tabletId }],
microservices-middleware/server/src/productmanagement/belp/dto.js:100:hardcoded string:            status: 'active'
microservices-middleware/server/src/productmanagement/belp/dto.js:112:hardcoded string:            itemType: 'tablet',
microservices-middleware/server/src/productmanagement/belp/dto.js:114:hardcoded string:            skuSource: 'SalesSkuMaster'
microservices-middleware/server/src/productmanagement/belp/dto.js:118:hardcoded object:        throw new NotFoundError(`Tablet with SKU Id:${tabletId} is not found`);
microservices-middleware/server/src/productmanagement/belp/routes.js:1:hardcoded file path:const Router = require('express-promise-router');
microservices-middleware/server/src/productmanagement/belp/routes.js:2:hardcoded file path:const explorer = require('./controller');
microservices-middleware/server/src/productmanagement/belp/routes.js:3:hardcoded file path:const controller = require('../bfsProductManagement/bfsMentoringDetails');
microservices-middleware/server/src/productmanagement/belp/routes.js:4:hardcoded object:const { storeCalculatedPriceMw, getCustomPrice } = require('../productHelper')
microservices-middleware/server/src/productmanagement/belp/routes.js:6:hardcoded object:const router = Router({ mergeParams: true });
microservices-middleware/server/src/productmanagement/belp/routes.js:9:hardcoded string:    const baseRoute = '/belp';
microservices-middleware/server/src/productmanagement/belp/routes.js:12:hardcoded string:    const productTypes = ['single', 'combo']
microservices-middleware/server/src/productmanagement/belp/routes.js:14:hardcoded object:        router.use(`${baseRoute}/product/${productType}`,
microservices-middleware/server/src/productmanagement/belp/routes.js:18:hardcoded object:    router.route(`${baseRoute}/product/single`)
microservices-middleware/server/src/productmanagement/belp/routes.js:24:hardcoded object:    router.route(`${baseRoute}/product/combo`)
microservices-middleware/server/src/productmanagement/belp/helper.js:1:hardcoded object:const { isArray, isEmpty } = require('lodash');
microservices-middleware/server/src/productmanagement/belp/helper.js:2:hardcoded object:const { BYJUS_MATH_MIN_PRICE, productConstant } = require('../utils/productConstants');
microservices-middleware/server/src/productmanagement/belp/helper.js:5:hardcoded variable:const getUpdatedBelpMPrice = (productDetails) => {
microservices-middleware/server/src/productmanagement/belp/helper.js:6:hardcoded object:    const { tabletSku = {}, belpSdCardSku, tynkerSku = {}, epicSku = {}, bfsCourseSku = {} } = productDetails || {};
microservices-middleware/server/src/productmanagement/belp/helper.js:7:hardcoded number:    let maxByjusMathPrice = 0, minByjusMathPrice = 0;
microservices-middleware/server/src/productmanagement/belp/helper.js:9:hardcoded number:    const tabPrice = (tabletSku) ? parseInt(tabletSku.basePrice) : 0;
microservices-middleware/server/src/productmanagement/belp/helper.js:10:hardcoded number:    maxByjusMathPrice += (tabletSku) ? parseInt(tabletSku.basePrice) + parseInt(belpSdCardSku.basePrice) + tynkerSku.basePrice + epicSku.basePrice : 0;
microservices-middleware/server/src/productmanagement/belp/helper.js:16:hardcoded number:    let minPrice = 0;
microservices-middleware/server/src/productmanagement/belp/helper.js:18:hardcoded number:    minByjusMathPrice = ((Math.floor((minPrice) * BYJUS_MATH_MIN_PRICE / 1000)) * 1000) + tabPrice
microservices-middleware/server/src/productmanagement/belp/helper.js:20:hardcoded variable:    const byjusMathPrice = {
microservices-middleware/server/src/productmanagement/belp/helper.js:27:hardcoded variable:const getUpdatedBelpTlpPrice = (details) => {
microservices-middleware/server/src/productmanagement/belp/helper.js:30:hardcoded object:    const { validity } = student;
microservices-middleware/server/src/productmanagement/belp/helper.js:32:hardcoded variable:    const isDiscountApplicable = validity == productConstant.DISCOUNT_ALLOWED_YEAR && initialClass != finalClass ? true : false;
microservices-middleware/server/src/productmanagement/belp/helper.js:35:hardcoded number:        let skuPrice = 0;
microservices-middleware/server/src/productmanagement/belp/helper.js:37:hardcoded number:         * for 2023 tlp skus, discount has to be applied
microservices-middleware/server/src/productmanagement/belp/helper.js:50:hardcoded variable:const getCurrentYearDiscTlpPrice = (details) => {
microservices-middleware/server/src/productmanagement/belp/helper.js:51:hardcoded object:    const { sku, student } = details;
microservices-middleware/server/src/productmanagement/belp/helper.js:52:hardcoded object:    const { validity: skuValidity } = sku;
microservices-middleware/server/src/productmanagement/belp/helper.js:53:hardcoded object:    const { validity: initialValidity } = student;
microservices-middleware/server/src/productmanagement/belp/helper.js:57:hardcoded number:    } else if (skuValidity == initialValidity + 1) {
microservices-middleware/server/src/productmanagement/belp/helper.js:65:hardcoded variable:const getBelpTlpPrice = (details) => {
microservices-middleware/server/src/productmanagement/belp/helper.js:66:hardcoded object:    const { sku, student } = details;
microservices-middleware/server/src/productmanagement/belp/helper.js:67:hardcoded object:    const { validity: skuValidity } = sku;
microservices-middleware/server/src/productmanagement/belp/helper.js:68:hardcoded object:    const { validity: initialValidity } = student;
microservices-middleware/server/src/productmanagement/belp/helper.js:71:hardcoded number:        let skuPrice = 0
