microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoRoutes.js:1:hardcoded file path:const Router = require('express-promise-router');
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoRoutes.js:2:hardcoded file path:const controller = require('./aakashNeoController');
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoRoutes.js:3:hardcoded object:const { getCustomPrice, storeCalculatedPriceMw, validateCalculatedPriceMw } = require('../productHelper')
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoRoutes.js:5:hardcoded object:const router = Router({ mergeParams: true });
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoRoutes.js:10:hardcoded string:    const baseRoute = '/aakashNeo';
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoRoutes.js:13:hardcoded string:    const productTypes = ['combo']
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoRoutes.js:15:hardcoded object:        router.use(`${baseRoute}/product/${productType}`,
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoRoutes.js:19:hardcoded object:    router.route(`${baseRoute}/storeProductDetails`)
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoRoutes.js:25:hardcoded object:    router.route(`${baseRoute}/product/combo`)
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoRoutes.js:32:hardcoded object:    router.route(`${baseRoute}/getAakashNeoBatchDetails`)
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:1:hardcoded string:const FDN_CLASSES = ['8', '9', '10'];
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:4:hardcoded string:    productCombination: "byjus_aakash_neo",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:5:hardcoded string:    productSelectionType: "byjus_aakash_neo",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:8:hardcoded string:        type: "service",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:9:hardcoded string:        subType: "live",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:10:hardcoded string:        category: "aakash_neo_classes",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:11:hardcoded string:        FDNCategory:"aaksh_fnd_neo_classes",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:12:hardcoded string:        orderPunchingType: "normal_order",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:13:hardcoded string:        orgFormattedName: "aakash",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:14:hardcoded string:        orderPunchingCategory: "aakash_neo_classes"
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:17:hardcoded string:        type: "product",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:18:hardcoded string:        subType: "sd_card",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:19:hardcoded string:        category: "aakash",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:20:hardcoded string:        FDNCategory:"aakash_fnd_tlp",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:21:hardcoded string:        orderPunchingCategory: "aakash_tlp"
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:24:hardcoded string:        type: "service",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:25:hardcoded string:        subType: "extension",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:26:hardcoded string:        category: "aakash_extension",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:29:hardcoded string:        type: "service",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:30:hardcoded string:        subType: "crp",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:31:hardcoded string:        category: "aakash_crp_hybrid",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:32:hardcoded string:        tabCategory: "aakash_tab_crp_hybrid"
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:35:hardcoded string:        type: "service",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:36:hardcoded string:        subType: "streaming",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:37:hardcoded string:        category: "aakash_test_series_streaming",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:38:hardcoded string:        orderPunchingCategory:"aakash_test_series"
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:41:hardcoded string:        orderPunchingType:"advance_order",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:42:hardcoded string:        tlpOnlyCategory:"aakash_tlp",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:43:hardcoded string:        tlpOnlyK12Category:"aakash_tlp",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:44:hardcoded string:        tlpPlusLiveCategory:"aakash_neo_classes",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:45:hardcoded string:        liveOnlyK12Category:"aakash_neo_classes",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:46:hardcoded string:        liveOnlyCategory:"aakash_neo_classes",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:47:hardcoded string:        liveCrp: "aakash_crp_hybrid",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:48:hardcoded string:        tabCrp : "aakash_tab_crp_hybrid"
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:51:hardcoded string:        type: "service",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:52:hardcoded string:        subType: "live",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:53:hardcoded string:        achieverCategory: "aakash_achiever",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:54:hardcoded string:        scholarCategory: "aakash_scholar",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:57:hardcoded string:        "JEE": { "11": 209, "12": 208, "11+12": 209, "13+": 210 },
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:58:hardcoded string:        "NEET": { "11": 211, "12": 213, "11+12": 211, "13+": 212 },
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:59:hardcoded string:        "JEE/NEET": { "11": 53, "12": 206, "11+12": 53, "13+": 207 },
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:60:hardcoded string:        "JEE-ACHIEVER":{ "11": 209, "12": 208, "11+12": 209, "13+": 210 },
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:61:hardcoded string:        "NEET-SCHOLAR":{ "11": 211, "12": 213, "11+12": 211, "13+": 212 },
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:62:hardcoded string:        "8": 252,
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:63:hardcoded string:        "9": 232,
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:64:hardcoded string:        "10": 231
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:67:hardcoded string:        type: "service",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:68:hardcoded string:        subType: "live",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:69:hardcoded string:        category: "doubts_on_chat",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:70:hardcoded string:        validityType: "month",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:71:hardcoded string:        orgFormattedName:"aakash"
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:74:hardcoded string:        type: "service",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:75:hardcoded string:        subType: "streaming",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:76:hardcoded string:        category: "aakash_streaming",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeo.js:77:hardcoded string:        orgFormattedName:"aakash"
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:1:hardcoded object:const { get, isEmpty, isArray, isNaN, flattenDeep } = require('lodash');
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:2:hardcoded file path:const logger = require('../../../lib/bunyan-logger')('AakashNeo Controller');
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:4:hardcoded string:const { DraftOrder } = require('@byjus-orders/nexemplum/oms');
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:5:hardcoded object:const { callTutorPlusApiForNeoBatches } = require('../../../utility/apis/tutorPlusUtility');
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:7:hardcoded object:const { NotFoundError, BadRequestError } = require('../../../lib/errors');
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:8:hardcoded object:const { manageCashbacks } = require('../../cashbackmanagement/cashbackHelper');
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:9:hardcoded file path:const config = require('../../../config');
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:10:hardcoded object:const { getAakashByjusCoursesSkus, getAakashTlpSkus, getSkuItemId, getPostgresTabletSku, getBooksSku, getMinimumRange, getNeoClasses, getNeoClassLanguageOfInstruction, getliveTrueBatches, getBatchesBasedOnSubTag } = require('./aakashNeoHelper');
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:11:hardcoded object:const { checkIsOmsOrder, attachSiblingDetails, getStudentProfileDetails, validatingFOCPremiumAccount } = require("../productHelper");
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:12:hardcoded object:const { getDiscountDetails } = require('../vouchermanagement/voucherHelper');
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:13:hardcoded object:const { checkIfDraftOrderExists } = require('../../../utility/draftOrderUtility');
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:14:hardcoded object:const { reserveBonusPoints } = require('../../paymentmanagement/byjuswallet/bonusPoints');
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:15:hardcoded object:const { getBooksSkuFromProductDetails } = require('../../bookmanagement/stationarySkuPriceCalculation');
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:16:hardcoded file path:const AakashNeo = require('./aakashNeo');
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:17:hardcoded object:const { getRegSku } = require("../dto");
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:19:hardcoded variable:const getComboProduct = async (req, res) => {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:20:hardcoded string:    logger.info({ method: 'getComboProduct' }, { message: "Fetching Combo Product for aakash neo live " });
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:23:hardcoded variable:    let tabletSku = null;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:24:hardcoded number:    let totalPrice = 0;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:25:hardcoded variable:    let bookSku = null;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:26:hardcoded number:    let booksPrice = 0;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:27:hardcoded array:    let courseSkus = [];
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:28:hardcoded number:    let price = 0;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:29:hardcoded variable:    let brand = null;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:30:hardcoded string:    let { paymentType = "EMI", productType, student, couponDetails, productCombination, identifier, orderPunchingType = "", user, isAcceleratorProgram = false, workshopChannel, loggedInMobile } = req.body;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:31:hardcoded variable:    let draftOrder = await DraftOrder.findById(identifier);
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:32:hardcoded string:    const draftOrderId = get(draftOrder, 'draftOrderId');
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:35:hardcoded number:    student = isArray(student) ? student[0] : student;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:37:hardcoded string:    let { initialClass, finalClass, validity, tablet = null, subCourse, productLearningType, isSdCardOrder = false, tlpFinalClass = "" } = student;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:38:hardcoded string:    if ( [ "JEE-ACHIEVER", "NEET-SCHOLAR" ].includes( subCourse ) ) {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:44:hardcoded variable:    let grade = initialClass;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:45:hardcoded string:    const isDevEnv = ["local","development"].includes(process.env.NODE_ENV)
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:46:hardcoded string:    if (isDevEnv && ["SBXMGZ","SCXMGJ"].includes(tablet)){
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:47:hardcoded string:        brand = 'D4'
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:52:hardcoded number:            if (grade === 11 && finalClass === 12) {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:53:hardcoded string:                grade = '11+12';
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:55:hardcoded string:            if(grade === 10 && finalClass === 10 && tlpFinalClass == '12'){
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:56:hardcoded number:                finalClass = 12;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:58:hardcoded number:            if (grade == 13) {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:59:hardcoded string:                grade = "13+"
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:61:hardcoded object:            let { sdCardSku = {}, liveSku = {}, streamingSku = {} } = await getAakashByjusCoursesSkus({
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:73:hardcoded string:            if(productLearningType === 'aakash_byjus_live'){
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:74:hardcoded string:                if(tlpFinalClass && tlpFinalClass == '12' && grade === "11+12"){
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:77:hardcoded string:                    (!isSdCardOrder) ? (subCourse && ( subCourse === 'NEET-SCHOLAR' || subCourse === 'JEE-ACHIEVER' ) ? courseSkus.push(liveSku) : courseSkus.push(liveSku, streamingSku)) : courseSkus.push(liveSku, sdCardSku)
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:82:hardcoded string:            grade += (grade === '11+12') ? 2 : 1;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:88:hardcoded string:                if(sku.grade == finalClass || sku.grade == '11+12'){
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:90:hardcoded string:                    sku["price"] = sku.basePrice
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:93:hardcoded string:                    sku["price"] = sku.continuousPrice
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:97:hardcoded number:             price = courseSkus.reduce((total, sku) => parseInt(sku.basePrice) + total, 0)
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:99:hardcoded string:                sku["price"] = sku.basePrice
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:103:hardcoded string:            courseSkus[i]["combinationType"] = courseSkus[i]["category"]
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:104:hardcoded string:            courseSkus[i]["itemId"] = getSkuItemId(courseSkus[i]);
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:108:hardcoded object:            tabletSku = await getPostgresTabletSku({ tabletId: tablet });
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:111:hardcoded array:        tabletSku = isArray(tabletSku) ? tabletSku : [tabletSku];
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:115:hardcoded array:            if (tabletSku[i]) {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:116:hardcoded number:                const { price = 0, quantity = 1, type } = tabletSku[i];
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:118:hardcoded string:                tabletSku[i]["combinationType"] = type
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:119:hardcoded string:                tabletSku[i]["itemId"] = getSkuItemId(tabletSku[i]);
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:122:hardcoded string:        if (process.env.NODE_ENV !== 'production') {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:123:hardcoded array:            bookSku = await getBooksSku({ grade, subCourse }) || [];
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:124:hardcoded array:            bookSku = isArray(bookSku) ? bookSku : [bookSku];
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:126:hardcoded array:                if (bookSku[i]) {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:127:hardcoded array:                    const { type } = bookSku[i];
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:128:hardcoded string:                    bookSku[i]["combinationType"] = type
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:129:hardcoded string:                    bookSku[i]['itemId'] = getSkuItemId()
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:133:hardcoded string:            booksPrice = bookSku.reduce((acc, curr) => acc + parseInt(get(curr, 'basePrice', 0)), 0);
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:135:hardcoded variable:        let maxPrice = totalPrice;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:136:hardcoded object:        let minPrice = getMinimumRange({ req, maxPrice, tabletSku, paymentType,productCombination })
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:138:hardcoded array:        const products = [courseSkus, tabletSku, await getRegSku({initialClass, productCombination})];
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:139:hardcoded variable:        const formattedProducts = flattenDeep(products).filter(prdct => prdct);
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:141:hardcoded string:        student["formValues"] = { ...student };
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:142:hardcoded string:        student["items"] = formattedProducts;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:143:hardcoded object:        const skuProductDetails = { tabletSku, maxPrice, minPrice, productCombination, productLearningType }
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:144:hardcoded object:        const discountDetails = await getDiscountDetails({identifier, productDetails : skuProductDetails, workshopChannel, loggedInMobile });
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:145:hardcoded string:        const { discountedPrice, voucher = "", minimumPrice, areBonusPointsUsed = false, bonusPointsDiscount = 0 } = discountDetails;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:154:hardcoded array:            students: [student],
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:156:hardcoded array:            mentoringDetails: [oneToManySku],
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:166:hardcoded variable:const storeProductDetails = async (req, res) => {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:167:hardcoded string:    let { identifier, productDetails, productCombination = "", studentDetails } = req.body;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:168:hardcoded string:    const { email } = get(req, 'user', {});
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:169:hardcoded string:    logger.info({ method: 'storeProductDetails', msg: `Storing Product Details for _id:${identifier}` });
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:173:hardcoded string:            throw new BadRequestError(`Parameters - ${identifier ? '' : 'identifier'} ${productDetails ? '' : 'productDetails'} Missing`);
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:174:hardcoded variable:        const draftOrder = await checkIfDraftOrderExists(identifier);
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:177:hardcoded object:            const { isOmsOrder, customerDetails } = draftOrder;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:178:hardcoded object:            const { productType, isGstIn, student = {}, isAcceleratorProgram = false } = productDetails;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:179:hardcoded string:            const { validity = "", subCourse, product, productLearningType } = student;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:180:hardcoded variable:            const isOmsEligibleOrder = await checkIsOmsOrder(productType, isOmsOrder, validity);
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:181:hardcoded object:            const { redeemedCashback, unutilizedCashbacks, amountToCustomer, amountToSalesPerson } = await manageCashbacks(draftOrder, productDetails);
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:182:hardcoded object:            let { orgFormattedName, orderPunchingType } = draftOrder
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:197:hardcoded string:            if (get(config, 'isStudentProfileAvailable') === "true" && productDetails.students && productDetails.students.length) {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:202:hardcoded array:            const { formattedProducts = [], formattedStudents = [] } = await attachSiblingDetails(productDetails, productType, draftOrder, studentDetails);
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:203:hardcoded string:            productDetails["students"] = formattedStudents;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:204:hardcoded string:            productDetails["products"] = formattedProducts;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:205:hardcoded object:            const orderPunchingCategory = decideOrderPunchingCategory({ productLearningType, subCourse, isAcceleratorProgram })
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:208:hardcoded string:            let bookInvoicing = 'not_applicable';
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:209:hardcoded array:            let addOnLineItems = [];
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:210:hardcoded string:            if (['local'].includes(process.env.NODE_ENV)) {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:212:hardcoded string:                bookInvoicing = 'applicable';
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:217:hardcoded variable:            const updateObj = {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:220:hardcoded array:                addOnLineItems: addOnLineItems || [],
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:224:hardcoded string:                finalPrice: get(productDetails, 'finalPrice', 0),
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:225:hardcoded string:                status: "product_saved",
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:226:hardcoded array:                [`actionDetails.productSavedAt`]: new Date(),
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:227:hardcoded array:                [`actionDetails.productSavedBy`]: email,
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:229:hardcoded string:                "customerDetails.gstDetails.isGstIn": isGstIn,
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:232:hardcoded variable:            const transactionId = await reserveBonusPoints(draftOrder);
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:233:hardcoded string:            if (transactionId !== "") {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:234:hardcoded string:                updateObj["bonusPointsDetails.transactionId"] = transactionId;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:237:hardcoded string:            await DraftOrder.findOneAndUpdate({ '_id': identifier }, {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:240:hardcoded object:            return res.json({ productDetails, cashbackDetails: { redeemedCashback, unutilizedCashbacks } });
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:247:hardcoded variable:const getAakashNeoBatchDetails = async (req, res) => {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:249:hardcoded string:        const isDevEnv = (["development", "local"].includes(process.env.NODE_ENV));
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:250:hardcoded string:        logger.info({ method: "getAakashNeoBatchDetails" }, req.body);
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:251:hardcoded string:        let { identifier, initialClass, board = "", finalClass, productType, subCourse, productCombination, courseType = "regular", validity, productLearningType, user, classType, countryId = null, grade } = req.body;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:253:hardcoded variable:        let isFoundation = AakashNeo.FDN_CLASSES.includes(initialClass)
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:254:hardcoded array:        const cohort_id = isFoundation ? AakashNeo.cohortMap[initialClass] : AakashNeo.cohortMap[subCourse][grade];
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:256:hardcoded string:        if (!cohort_id || cohort_id === "") throw new Error("Cohort Id is missing please mail optech@byjus.com to get it added.")
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:260:hardcoded string:        if (!initialClass || !productCombination) throw new BadRequestError("Parameter missing");
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:262:hardcoded variable:        let draftOrder = await getDraftOrder(identifier);
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:264:hardcoded object:        response = await callTutorPlusApiForNeoBatches(`cohort_id=${cohort_id}`);
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:266:hardcoded string:        if (!response.batches) throw new Error("Tutor Plus API call failed.Please try again later")
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:267:hardcoded string:        if (isEmpty(response.batches)) throw new Error("Courses are not available on tutorPlus side. Please mail optech@byjus.com")
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:271:hardcoded string:        if (classType == "neo") response = await getNeoClasses(response, initialClass)
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:273:hardcoded string:        if (classType == "neo") response = await getNeoClassLanguageOfInstruction(response, cohort_id)
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:275:hardcoded string:        response = (["local"].includes(process.env.NODE_ENV)) ? (response =await getBatchesBasedOnSubTag(response,productLearningType,subCourse)) : response
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:277:hardcoded string:        if (isEmpty(response.batches)) throw new Error(" Requested Courses are not available on tutorPlus side. Please mail optech@byjus.com")
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:281:hardcoded string:        logger.error({ method: 'getAakashNeoBatchDetails', error });
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:282:hardcoded string:        return res.status(500).json({ message: error.message || "Something went wrong. Please try again later" });
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:286:hardcoded variable:const getDraftOrder = async (identifier) => {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:299:hardcoded object:const decideOrderPunchingCategory = ({productLearningType, subCourse, isAcceleratorProgram}) => {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:302:hardcoded string:    if(isAcceleratorProgram && ["JEE-ACHIEVER","NEET-SCHOLAR"].includes(subCourse)){
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:303:hardcoded string:        if(subCourse === "JEE-ACHIEVER"){
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:306:hardcoded string:        if(subCourse === "NEET-SCHOLAR"){
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoController.js:310:hardcoded string:        orderPunchingCategory = productLearningType == 'aakash_byjus_live' ? AakashNeo.live.orderPunchingCategory 
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:1:hardcoded object:const { isEmpty, get, isArray, isNaN, flattenDeep } = require('lodash');
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:2:hardcoded object:const { Op } = require("sequelize");
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:3:hardcoded object:const { nanoid } = require('nanoid');
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:4:hardcoded object:const { isDevEnv } = require('../../../lib/featureHelper')
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:5:hardcoded file path:const logger = require('../../../lib/bunyan-logger')('AakashNeo Helper');
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:7:hardcoded string:const { SalesSkuMaster, SalesSkuAttribute } = require('@byjus-orders/npgexemplum')
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:8:hardcoded object:const { NotFoundError } = require('../../../lib/errors');
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:10:hardcoded object:const { productConstant } = require('../../productmanagement/utils/productConstants');
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:11:hardcoded file path:const AakashNeo = require('./aakashNeo');
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:13:hardcoded variable:const getAakashByjusCoursesSkus = async (details) => {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:16:hardcoded string:        tlpFinalClass = "",brand } = details;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:19:hardcoded string:    if (grade == '11+12') {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:20:hardcoded number:        validity += 1;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:23:hardcoded string:    let accProgCategory = "";
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:24:hardcoded string:    if (subCourse === "JEE-ACHIEVER") {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:27:hardcoded string:    if (subCourse === "NEET-SCHOLAR") {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:31:hardcoded variable:    const queryForLive = {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:38:hardcoded string:        status: 'active',
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:40:hardcoded string:            [Op.or]: [null, ""]
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:43:hardcoded variable:    const queryForSdcard = {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:50:hardcoded string:        status: 'active',
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:53:hardcoded variable:    const queryForAccProgLive = {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:55:hardcoded string:        subCourse: subCourse === "JEE-ACHIEVER" ? "JEE" : subCourse === "NEET-SCHOLAR" ? "NEET" : subCourse,
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:60:hardcoded string:        status: 'active',
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:62:hardcoded variable:    const queryForAccProgSdCard = {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:64:hardcoded string:        subCourse: subCourse === "JEE-ACHIEVER" ? "JEE" : subCourse === "NEET-SCHOLAR" ? "NEET" : subCourse,
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:69:hardcoded string:        status: 'active',
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:71:hardcoded variable:    const queryForStreaming = {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:78:hardcoded string:        status: 'active',
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:87:hardcoded string:            queryForSdcard["category"] = AakashNeo.sdCard.FDNCategory;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:88:hardcoded string:            queryForLive["category"] = AakashNeo.live.FDNCategory;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:91:hardcoded string:    if ((productLearningType === 'aakash_byjus_live' && !isAcceleratorProgram) || (isAcceleratorProgram && !["JEE-ACHIEVER", "NEET-SCHOLAR"].includes(subCourse))) {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:94:hardcoded variable:        let liveSku = await getSkus(queryForLive)
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:95:hardcoded string:        if ((tlpFinalClass && tlpFinalClass == "12" && grade == "11+12")){
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:97:hardcoded object:            return { sdCardSku }
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:104:hardcoded object:        return { liveSku, streamingSku, sdCardSku };
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:105:hardcoded string:    } else if (productLearningType === 'aakash_byjus_live' && isAcceleratorProgram) {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:106:hardcoded variable:        let liveSku = await getSkus(queryForAccProgLive)
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:107:hardcoded variable:        let sdCardSku = await getSkus(queryForAccProgSdCard)
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:108:hardcoded object:        return { liveSku, sdCardSku };
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:110:hardcoded variable:        let sdCardSku = await getSkus(queryForSdcard)
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:111:hardcoded object:        return { sdCardSku };
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:115:hardcoded variable:const getPostgresTabletSku = async (details) => {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:116:hardcoded object:    let { tabletId, studentId, uniqueTabletId } = details
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:117:hardcoded number:    let price = 0
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:118:hardcoded variable:    const tabletSku = await SalesSkuMaster.findOne({
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:120:hardcoded string:            [Op.or]: [{ "skuId": tabletId }, { "ohProductId": tabletId }]
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:132:hardcoded string:            itemType: 'tablet',
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:137:hardcoded object:        throw new NotFoundError(`Tablet with SKU Id:${tabletId} is not found`);
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:141:hardcoded variable:const getErrorMsg = function (queryDetails) {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:142:hardcoded object:    const { grade, subCourse, validity, type, category } = queryDetails || {};
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:145:hardcoded string:    ${subCourse ? `Course: ${subCourse}` : ''}
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:146:hardcoded string:    ${grade ? `Grade: ${grade}` : ''}
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:147:hardcoded string:    ${type ? `Type: ${type}` : ''}
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:148:hardcoded string:    ${validity ? `Validity: ${validity}` : ''}
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:149:hardcoded string:    ${category ? `Category: ${category}` : ''}
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:153:hardcoded variable:const getSkuItemId = (product) => {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:154:hardcoded number:    const itemId = nanoid(24)
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:158:hardcoded variable:const getSkus = async (query) => {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:159:hardcoded variable:    let sku = await SalesSkuMaster.findOne({
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:164:hardcoded variable:        const errorMsg = getErrorMsg(query);
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:170:hardcoded variable:const getDocSkus = async (queryForDoc) => {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:171:hardcoded variable:    let docSku = await SalesSkuMaster.findOne({
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:176:hardcoded variable:        const errorMsg = getErrorMsg(queryForDoc);
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:179:hardcoded object:        const {frequency, renewal_mode} = await SalesSkuAttribute.findOne({
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:180:hardcoded string:            attributes: ['frequency', 'renewal_mode'],
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:199:hardcoded variable:const getBooksSku = async (details) => {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:200:hardcoded variable:    const env = process.env.NODE_ENV;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:201:hardcoded string:    if (['local', 'development'].includes(env)) {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:202:hardcoded string:        let { subCourse = '', grade } = details;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:203:hardcoded variable:        let booksSku = null;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:204:hardcoded number:        let price = 0;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:206:hardcoded variable:        let query = {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:207:hardcoded string:            status: 'active',
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:208:hardcoded string:            category: 'book',
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:209:hardcoded string:            course: 'K12',
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:220:hardcoded string:            price = booksSku['basePrice'];
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:225:hardcoded string:            itemType: 'book'
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:232:hardcoded variable:const getSummedUpPrice = (entity) => {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:233:hardcoded variable:    const totalPrice = entity ? entity.reduce((sum, sku) => {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:234:hardcoded string:        return sum + (parseInt(get(sku, 'quantity', 1)) * parseInt(get(sku, 'price', 0)));
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:235:hardcoded number:    }, 0) : 0;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:240:hardcoded variable:const getMinimumRange = (productDetails) => {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:241:hardcoded string:    logger.info({ method: 'getMinimumRange' }, 'Calculating Minimum price');
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:242:hardcoded object:    let { maxPrice, tabletSku, paymentType, req, productCombination } = productDetails
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:243:hardcoded object:    let { user } = req;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:244:hardcoded string:    const campaign = (get(user, 'campaign', '') || '').toUpperCase();
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:245:hardcoded string:    const vertical = (get(user, "vertical", ""))
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:246:hardcoded string:    const loggedInUserRole = (get(user, 'role', '') || '');
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:249:hardcoded variable:    const env = process.env.NODE_ENV;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:250:hardcoded array:    tabletSku = isArray(tabletSku) ? tabletSku : [tabletSku];
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:253:hardcoded variable:    const tabletTotalPrice = getSummedUpPrice(tabletSku);
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:256:hardcoded variable:    const applicablePriceForDiscount = parseInt(maxPrice) - parseInt(tabletTotalPrice);
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:259:hardcoded string:    if (paymentType === 'EMI') {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:271:hardcoded object:    if (productConstant.UPGRADE_VERTICAL_TRIAL_CAMPAIGN_BDA_PRODUCT_COMBINATION.includes(productCombination) && productConstant.UPGRADE_VERTICAL_TRIAL_CAMPAIGN_BDA_VERTICAL({vertical, campaign}) && productConstant.UPGRADE_VERTICAL_TRIAL_CAMPAIGN_BDA_ROLE.includes(loggedInUserRole)) {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:280:hardcoded variable:    let minPrice = applicablePriceForDiscount - (applicablePriceForDiscount * minPricePercentage);
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:282:hardcoded number:    /**Rounding-off min-price to nearest 1000 */
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:283:hardcoded number:    minPrice = (Math.floor(minPrice / 1000)) * 1000;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:287:hardcoded string:    logger.info({ method: 'getMinimumRange', minPrice }, 'Minimum Price');
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:293:hardcoded variable:const getliveTrueBatches = async (response) => {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:294:hardcoded variable:    let result = response
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:296:hardcoded string:        response = response["batches"].filter(batch => batch.live_on_kart == true)
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:297:hardcoded object:        return { ...result, batches: response }
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:299:hardcoded string:        logger.error({ method: 'getliveTrueBatches', error });
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:300:hardcoded string:        return res.status(500).json({ message: error.message || "Something went wrong. Please try again later" });
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:304:hardcoded variable:const getNeoClasses = async (response, initialClass) => {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:305:hardcoded variable:    let result = response
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:307:hardcoded string:        response = response["batches"].filter(batch => batch.course_type == "neo")
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:308:hardcoded object:        return { ...result, batches: response }
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:310:hardcoded string:        logger.error({ method: 'getNeoClasses', error });
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:311:hardcoded string:        return res.status(500).json({ message: error.message || "Something went wrong. Please try again later" });
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:315:hardcoded variable:const getNeoClassLanguageOfInstruction = (response, cohortId) => {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:316:hardcoded object:    const { meta = {} } = response || {}
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:317:hardcoded array:    const { cohort_tutor_languages = [] } = meta || {}
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:318:hardcoded variable:    const languageObject = cohort_tutor_languages.filter(lang => lang.cohort_id == cohortId);
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:319:hardcoded number:    const { tutor_languages = [] } = languageObject.length ? languageObject[0] : {}
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:321:hardcoded variable:    const language = tutor_languages.map(lang => {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:328:hardcoded object:    return { ...response, language: language }
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:331:hardcoded variable:const getExtensionSkus = async (details) => {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:332:hardcoded string:    const { initialClass, finalClass, subCourse = '', studentId = '' } = details;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:333:hardcoded variable:    let grade = initialClass;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:334:hardcoded string:    if (initialClass == '11' && finalClass == '12') {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:335:hardcoded string:        grade = '11+12'
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:337:hardcoded variable:    const queryForExtension = {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:348:hardcoded variable:    let extensionSku = await SalesSkuMaster.findOne({
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:353:hardcoded variable:        const errorMsg = getErrorMsg(queryForExtension);
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:363:hardcoded variable:const getAakashTestSeriesSkus = async (details) => {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:364:hardcoded object:    let { grade, subCourse, validity, subType } = details;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:367:hardcoded string:    if (grade == '11+12') {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:368:hardcoded number:        validity += 1;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:372:hardcoded variable:    const queryForTestSeries = {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:380:hardcoded string:        status: 'active',
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:382:hardcoded variable:    let testSeriesSku = await getSkus(queryForTestSeries)
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:383:hardcoded object:    return { testSeriesSku };
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:386:hardcoded variable:const getAakashByjusLiveHybridCoursesSkus = async (details) => {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:388:hardcoded object:    let { initialClass, finalClass, grade, productCombination, subCourse, validity, productLearningType, subType,brand } = details;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:391:hardcoded string:    if (grade == '11+12') {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:392:hardcoded number:        validity += 1;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:397:hardcoded variable:    const queryForLive = {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:404:hardcoded string:        status: 'active',
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:406:hardcoded string:            [Op.or]: [null, ""]
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:409:hardcoded variable:    const queryForSdcard = {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:416:hardcoded string:        status: 'active',
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:419:hardcoded variable:    const queryForCrp = {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:426:hardcoded string:        status: 'active',
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:428:hardcoded string:    if (productLearningType === 'aakash_byjus_live_hybrid_program') {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:429:hardcoded variable:        let liveSku = await getSkus(queryForLive)
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:430:hardcoded variable:        let sdCardSku = await getSkus(queryForSdcard)
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:431:hardcoded variable:        let crpSku = await getSkus(queryForCrp)
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:432:hardcoded object:        return { liveSku, sdCardSku, crpSku };
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:436:hardcoded variable:        let sdCardSku = await getSkus(queryForSdcard)
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:437:hardcoded object:        return { sdCardSku };
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:440:hardcoded variable:const getAakashByjusCrpTabHybridSkus = async (details) => {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:442:hardcoded object:    let { grade, subCourse, validity, productLearningType ,brand} = details;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:445:hardcoded string:    if (grade == '11+12') {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:446:hardcoded number:        validity += 1;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:451:hardcoded variable:    const queryForSdcard = {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:458:hardcoded string:        status: 'active',
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:461:hardcoded variable:    const queryForCrp = {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:468:hardcoded string:        status: 'active',
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:470:hardcoded string:    if (productLearningType === 'aakash_byjus_tab_hybrid_program') {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:471:hardcoded variable:        let sdCardSku = await getSkus(queryForSdcard)
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:472:hardcoded variable:        let crpSku = await getSkus(queryForCrp)
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:473:hardcoded object:        return { sdCardSku, crpSku };
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:477:hardcoded variable:const getPaymentType = (paymentDetails) => {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:478:hardcoded string:    const { type = "", payments = [], paymentType } = paymentDetails;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:479:hardcoded variable:    let updatedPaymentType = type;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:481:hardcoded object:        const { type, provider } = payment;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:483:hardcoded string:        if (["BAJAJ", "PAYU", "PINE_LABS", "BYJUS_SUBSCRIBE", "RAZORPAY"].indexOf(provider) >= 0 && type === "EMI") {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:484:hardcoded string:            updatedPaymentType = "NON_EMI";
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:490:hardcoded variable:const getAakashDoubtsOnChatSkus = async (details) => {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:492:hardcoded object:    let { duration } = details;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:494:hardcoded variable:    const queryForDoc = {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:500:hardcoded string:        status: 'active',
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:502:hardcoded variable:        let docSku = await getDocSkus(queryForDoc)
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:506:hardcoded variable:const getBatchesBasedOnSubTag = async (response, productLearningType, subCourse) => {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:507:hardcoded variable:    let result = response
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:509:hardcoded string:        if (productLearningType === "aakash_byjus_live_hybrid_program") {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:510:hardcoded string:            response = response["batches"].filter(batch => batch.course_sub_tag == 'Hybrid')
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:511:hardcoded string:        } else if (productLearningType === "aakash_byjus_live" && ["NEET-SCHOLAR", "JEE-ACHIEVER"].includes(subCourse)) {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:512:hardcoded string:            response = response["batches"].filter(batch => batch.course_sub_tag == 'Accelerator')
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:513:hardcoded string:        } else if (productLearningType === "aakash_byjus_live") {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:514:hardcoded string:            response = response["batches"].filter(batch => batch.course_sub_tag == 'Regular')
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:518:hardcoded object:        return { ...result, batches: response }
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:520:hardcoded string:        logger.error({ method: 'getBatchesBasedOnSubTag', error });
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoHelper.js:521:hardcoded string:        return res.status(500).json({ message: error.message || "Something went wrong. Please try again later" });
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:1:hardcoded object:const { isEmpty } = require('lodash');
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:2:hardcoded object:const { orderPunchingCategory } = require('../../upgradeordermanagement/aakashNeo/aakashNeoUpgrade');
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:3:hardcoded file path:const logger = require('../../../lib/bunyan-logger')('aakashNeoOrderSplit')
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:5:hardcoded object:const { getExtensionSkus, getPaymentType } = require('./aakashNeoHelper')
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:7:hardcoded variable:const formattedAakashNeoLineItems = async (orderDetails,identifier,prospectId) => {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:8:hardcoded string:    const { productDetails, orderPunchingCategory = "", paymentDetails = {} } = orderDetails;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:9:hardcoded array:    const { students = [], paymentType, student } = productDetails;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:10:hardcoded object:    let lineItems = {};
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:11:hardcoded object:    const actualPaymentType = getPaymentType({ paymentDetails, paymentType });
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:14:hardcoded number:        const { items = [], formValues, studentId } = students[0];
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:16:hardcoded string:            throw new Error("Order Split Failed: Aakash Neo Order Punching LineItems Are Empty");
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:19:hardcoded variable:        const splittedLineItems = await getLineItems(items, formValues, actualPaymentType, studentId, orderPunchingCategory, prospectId)
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:21:hardcoded object:        const { parentLineItems, childLineItems } = splittedLineItems || {};
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:23:hardcoded string:            throw new Error(" Order Split Failed: Aakash Neo Order LineItems Are Empty");
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:30:hardcoded string:        throw new Error(error || "Error in splitting line Items");
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:37:hardcoded variable:const getLineItems = async (items, student, paymentType, studentId, orderPunchingCategory,prospectId) => {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:38:hardcoded string:    const { productLearningType, initialClass, finalClass, subCourse, tlpExtension = false, tlpFinalClass = ""  } = student;
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:39:hardcoded array:    let parentLineItems = [], childLineItems = [], tabletItem = [], skuItems = [], sdCardItem = [], streamingItems = [], registrationItem = {};
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:40:hardcoded string:    logger.info({ method:'getLineItems', message: 'Before split: items', items });
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:43:hardcoded string:        if (item.subType === "tablet") {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:45:hardcoded string:        } else if (item.subType === "sd_card") {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:47:hardcoded string:        } else if (item.category === "aakash_streaming") {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:49:hardcoded string:        } else if (item.subType === "registration") {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:56:hardcoded string:    if (productLearningType == 'aakash_byjus_live') {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:59:hardcoded string:            if (paymentType === 'NON_EMI') {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:60:hardcoded array:                parentLineItems = isEmpty(tabletItem) ? [...skuItems, ...streamingItems] : tabletItem
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:61:hardcoded array:                childLineItems = isEmpty(tabletItem) ? [] : [...skuItems, ...streamingItems]
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:65:hardcoded object:                    extensionSku = await getExtensionSkus({ initialClass, finalClass, subCourse, studentId })
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:67:hardcoded array:                parentLineItems = isEmpty(tabletItem) ? [...skuItems, ...streamingItems] : tabletItem
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:68:hardcoded array:                childLineItems = isEmpty(tabletItem) ? [extensionSku] : [...skuItems, ...streamingItems]
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:74:hardcoded array:                parentLineItems = [...tabletItem, ...sdCardItem]
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:77:hardcoded string:            if(tlpExtension && tlpFinalClass && tlpFinalClass == '12') {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:83:hardcoded string:    if (productLearningType == 'aakash_byjus_tlp' && !isEmpty(tabletItem)) {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:84:hardcoded string:        if (paymentType == 'NON_EMI') {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:85:hardcoded array:            parentLineItems = [...tabletItem, ...sdCardItem]
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:86:hardcoded array:            childLineItems = []
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:88:hardcoded string:        if (paymentType == 'EMI') {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:89:hardcoded array:            parentLineItems = [...tabletItem, ...sdCardItem]
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:90:hardcoded object:            let extensionSkus = await getExtensionSkus({ initialClass, finalClass, subCourse, studentId })
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:95:hardcoded string:    if (productLearningType == 'aakash_byjus_tlp' && isEmpty(tabletItem)) {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:96:hardcoded string:        if (paymentType == 'NON_EMI') {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:97:hardcoded array:            parentLineItems = [...sdCardItem]
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:98:hardcoded array:            childLineItems = []
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:100:hardcoded string:        if (paymentType == 'EMI') {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:101:hardcoded number:            if (sdCardItem.length > 1) {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:110:hardcoded array:                parentLineItems = [...sdCardItem]
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:111:hardcoded object:                let extensionSkus = await getExtensionSkus({ initialClass, finalClass, subCourse, studentId })
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:117:hardcoded string:    if (['aakash_achiever', 'aakash_scholar'].includes(orderPunchingCategory)) {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:118:hardcoded array:        parentLineItems = !isEmpty(tabletItem) ? [...sdCardItem, ...tabletItem] : [...sdCardItem]
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:119:hardcoded array:        childLineItems = [...skuItems]
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:122:hardcoded string:    logger.info({ method:`getLineItems-prospectId-${prospectId}`, message: 'After split: parentLineItems', parentLineItems });
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:123:hardcoded string:    logger.info({ method:`getLineItems-prospectId-${prospectId}`, message: 'After split: childLineItems', childLineItems });
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:125:hardcoded variable:    const noOfParentItems = parentLineItems.length
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:126:hardcoded variable:    const noOfChildItems = childLineItems.length
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:127:hardcoded variable:    const noOfItems = items.length
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:128:hardcoded variable:    let isExtensionPresent = false
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:130:hardcoded string:        if (item.subType == "extension" || item.category == "aakash_extension") {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:136:hardcoded number:        (isExtensionPresent && (noOfItems + 1 != noOfChildItems + noOfParentItems))) {
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:137:hardcoded string:        throw new Error("formatting AakashNeoLineItems failed: Total no of items are not equal to no of child and parent Items");
microservices-middleware/server/src/productmanagement/aakashneomanagement/aakashNeoOrderSplit.js:142:hardcoded array:        childLineItems: Array.isArray(childLineItems) ? childLineItems : [childLineItems]
