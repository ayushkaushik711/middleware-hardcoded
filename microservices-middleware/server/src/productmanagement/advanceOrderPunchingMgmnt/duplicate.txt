microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:1:hardcoded object:const { get, concat, map, flattenDeep, isEmpty } = require('lodash');
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:2:hardcoded object:const { splitOrderConstants } = require('../../ordermanagement/utils/orderConstant');
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:3:hardcoded file path:const logger = require('../../../lib/bunyan-logger')('orderSplit.js');
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:4:hardcoded string:const { ProductDetail, DraftOrder } = require('@byjus-orders/nexemplum/oms')
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:5:hardcoded file path:const Aakash = require('../../../config/products/AakashLive');
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:6:hardcoded number:const { INITIAL_VALIDITY_1_YEAR_COURSE } = require('../utils/AdvancedOrderPunchingConstants');
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:8:hardcoded variable:const formatAdvanceOrderLineItems = async (orderDetails, identifier) => {
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:9:hardcoded string:    logger.info({ method: 'formatAakashLiveLineItems' }, 'Checking if Order is eligible to be splitted');
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:10:hardcoded string:    const { productDetails, paymentDetails, orderPunchingType, orderPunchingCategory="" } = orderDetails;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:11:hardcoded string:    const { productType = '', students = [], tablets: seperateTablets = [] } = productDetails;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:12:hardcoded string:    const { type: paymentType = '', totalAmount, totalPrepaidAmount, payments } = paymentDetails;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:13:hardcoded object:    let lineItems = {};
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:14:hardcoded variable:    const actualPaymentType = getPaymentType(paymentDetails);
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:16:hardcoded string:    logger.info({ method: 'formatAakashLiveLineItems' }, { message: "Checking if eligible for splitting", paymentType, productType });
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:18:hardcoded string:    const isUmrnGenerated = actualPaymentType === "EMI" ? checkUmrnGenerated(payments) : false;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:21:hardcoded string:    if (actualPaymentType === "NON_EMI" && orderPunchingCategory === Aakash.live.orderPunchingCategory) {
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:24:hardcoded number:            let student = students[0];
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:28:hardcoded object:            let { parentLineItems, childLineItems } = splittedLineItems || {};
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:29:hardcoded array:            //let extensionSku = [];
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:30:hardcoded string:            const orderType = childLineItems.length ? 'split_order' : 'single_order';
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:31:hardcoded string:            logger.info("%j", { method: 'formatAakashLiveLineItems' }, { orderType, lineItems: JSON.stringify(splittedLineItems) });
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:39:hardcoded string:            logger.info("%j", { method: 'formatAakashLiveLineItems', message: "Error in splitting line Items" });
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:40:hardcoded string:            throw new Error(error || "Error in splitting line Items");
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:44:hardcoded string:    else if (actualPaymentType === "EMI" && !isUmrnGenerated &&
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:46:hardcoded number:        splitOrderConstants.ALLOWED_PRODUCT_TYPES.indexOf(productType.toUpperCase()) >= 0) {
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:48:hardcoded variable:            const splittedLineItems = await splitEmiOrder(orderDetails);
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:49:hardcoded object:            const { parentLineItems, childLineItems } = splittedLineItems || {};
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:50:hardcoded string:            const orderType = childLineItems.length ? 'split_order' : 'single_order';
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:56:hardcoded string:            logger.info("%j", { method: 'formatAakashLiveLineItems', message: "Error in splitting line Items" });
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:57:hardcoded string:            throw new Error(error || "Error in splitting line Items");
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:61:hardcoded string:        const items = flattenDeep(map(students, 'items'));
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:64:hardcoded string:            "parentLineItems": items,
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:65:hardcoded string:            "childLineItems": []
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:67:hardcoded string:        logger.info("%j", { method: 'formatAakashLiveLineItems' }, { orderType: 'single_order', lineItems });
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:77:hardcoded variable:const checkUmrnGenerated = (payment) => {
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:78:hardcoded variable:    let isUmrn = false;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:79:hardcoded string:    const emiDetails = payment.find(ele => ele.type === "EMI" && splitOrderConstants.ALLOWED_PAYMENT_PROVIDERS_FOR_UMRN_CHECK.includes(ele.provider));
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:81:hardcoded object:        const { additionalDetails = {} } = emiDetails;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:82:hardcoded string:        const umrn = get(additionalDetails, "umrn", "");
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:83:hardcoded string:        const registrationStatus = get(additionalDetails, "registrationStatus", "");
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:85:hardcoded string:        if (registrationStatus.includes("dest_register_success")) {
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:92:hardcoded variable:const getPaymentType = (paymentDetails) => {
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:93:hardcoded object:    const { type, payments } = paymentDetails;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:94:hardcoded variable:    let paymentType = type;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:96:hardcoded object:        const { type, provider } = payment;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:98:hardcoded string:        if (["BAJAJ", "PAYU", "PINE_LABS", "BYJUS_SUBSCRIBE", "RAZORPAY"].indexOf(provider) >= 0 && type === "EMI") {
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:99:hardcoded string:            paymentType = "NON_EMI";
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:105:hardcoded variable:const splitEmiOrder = async (orderDetails) => {
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:106:hardcoded string:    logger.info("%j", { method: 'splitEmiOrder' }, 'EMI mode of Payment-Checking for line items splitting');
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:107:hardcoded string:    const { productDetails, paymentDetails, orderPunchingType, orderPunchingCategory = "" } = orderDetails;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:108:hardcoded object:    let { productType, students, products } = productDetails;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:109:hardcoded object:    let { type: paymentType, totalAmount, totalPrepaidAmount, totalPostpaidAmount, payments } = paymentDetails;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:110:hardcoded string:    let emiPayments = payments.filter(ele => ele.type == 'EMI');
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:111:hardcoded string:    const { provider = "" } = emiPayments[0] || {};
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:112:hardcoded variable:    let allowedDp = (splitOrderConstants.BYJUS_EMI_PROVIDER.includes(provider)) ? splitOrderConstants.ALLOWED_DP_FOR_BYJUS_EMI_NO_TABLET : splitOrderConstants.ALLOWED_DP_NO_TABLET;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:119:hardcoded array:    let parentLineItems = [];
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:120:hardcoded array:    let childLineItems = [];
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:123:hardcoded number:    for (let i = 0; i < students.length; i++) {
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:124:hardcoded array:        let student = students[i];
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:125:hardcoded variable:        let index = i;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:127:hardcoded array:        let extensionSku = [];
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:128:hardcoded array:        const { items = [], studentId, productSelectionType } = student;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:129:hardcoded string:        let tablets = items.filter(item => item && item.itemType == "tablet");
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:130:hardcoded string:        let courses = items.filter(item => item && item.itemType == "course");
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:131:hardcoded variable:        const courseCount = courses.length;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:132:hardcoded variable:        const tabletCount = tablets.length;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:133:hardcoded string:        logger.info("%j", { method: 'splitEmiOrder' }, { message: `${productType} Items:${index + 1}`, student, tabletCount, courseCount });
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:139:hardcoded string:            parentLineItems = get(splittedLineItems, 'parentLineItems');
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:140:hardcoded string:            childLineItems = get(splittedLineItems, 'childLineItems');
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:142:hardcoded number:                const { grade, course } = courses[0];
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:159:hardcoded variable:const getExtensionSku = async (grade, course, studentId) => {
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:160:hardcoded string:    let query = { type: 'extension', course };
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:162:hardcoded string:        query["grade"] = grade
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:164:hardcoded variable:    const extensionSku = await ProductDetail.findOne(query).lean();
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:173:hardcoded array:        return [];
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:178:hardcoded variable:const aakashAdvanceOrderPunchingLineItems = (student, orderPunchingCategory) => {
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:179:hardcoded array:    const { items = [] } = student;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:180:hardcoded array:    let parentLineItems = [];
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:181:hardcoded array:    let childLineItems = [];
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:182:hardcoded string:    let tablets = items.filter(item => item && item.itemType == "tablet");
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:183:hardcoded string:    parentLineItems = items.filter(item => ([Aakash.sdCard.type.toLowerCase()].includes(item.combinationType) || ["10"].includes(item.grade)));
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:186:hardcoded array:        childLineItems = items.filter(item => ([Aakash.live.type.toLowerCase()].includes(item.combinationType)) || [Aakash.acheiver.category].includes(item.category));
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:189:hardcoded string:        throw new Error(" Order Split Failed: Aakash Advanced Order LineItems Are Empty");
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:196:hardcoded variable:const updateOrderPunchingTypeAndCategory = async (details) => {
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:197:hardcoded object:    const {orderDetails, identifier}=details;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:198:hardcoded object:    const { productDetails } = orderDetails;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:199:hardcoded array:    const { students = [], productType } = productDetails;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:200:hardcoded number:    let student = students[0];
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:202:hardcoded object:    let { initialClass, finalClass, validity, formValues,productSelectionType } = student;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:203:hardcoded object:    let { productLearningType, initialGradeProductCategory } = formValues;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:204:hardcoded string:    if (productLearningType === "AAKASH_LIVE" && initialGradeProductCategory === "AAKASH_LIVE") {
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:205:hardcoded string:        if (initialClass === "11" && finalClass === "12" && validity == INITIAL_VALIDITY_1_YEAR_COURSE)
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:211:hardcoded object:                { new: true }
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:213:hardcoded string:    } else if ( productType === "combo" && productSelectionType === "byjus_tlp"){
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:214:hardcoded string:        if (["10","11","12"].includes(initialClass) && ["12","13+"].includes(finalClass) && validity == INITIAL_VALIDITY_1_YEAR_COURSE)
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:220:hardcoded object:                { new: true }
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderSplit.js:229:hardcoded object:            { new: true }
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:1:hardcoded string:const { ProductDetail, PremiumAccount, DraftOrder, LeadoOrder } = require("@byjus-orders/nexemplum/oms")
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:2:hardcoded file path:const moment = require('moment');
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:3:hardcoded file path:const logger = require('../../../lib/bunyan-logger')('Product Helper');
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:4:hardcoded file path:const Aakash = require('../../../config/products/AakashLive');
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:5:hardcoded object:const { productConstant } = require('../utils/productConstants');
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:7:hardcoded number:const { START_DATE, CURRENT_DATE, END_DATE, INITIAL_VALIDITY_2_YEAR_COURSE, INITIAL_VALIDITY_1_YEAR_COURSE, DOP_10_SD_CARD_PRICE, DOP_11_12_SD_CARD_PRICE } = require('../utils/AdvancedOrderPunchingConstants');
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:9:hardcoded variable:const getCourseSkuForAdvancedPunching = async (productDetails) => {
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:10:hardcoded string:    let { productType, subCourse, grade, validity, productCombination = "", type, tabletId = "", productLearningTypes = '' } = productDetails;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:11:hardcoded string:    tabletId = tabletId.split("-")[1]
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:12:hardcoded string:    productType = productType ? productType.toUpperCase() : '';
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:15:hardcoded variable:    let query = {
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:18:hardcoded string:    query['validity'] = `MAY ${validity}`;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:20:hardcoded string:    if (grade == "11+12")
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:21:hardcoded string:        query['validity'] = `MAY ${validity + 1}`;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:23:hardcoded string:    if (["11", "12", "11+12", "Streaming 11+12", "Streaming 11", "Streaming 12", "13", "14", "12+", "13+"].indexOf(grade) >= 0) {
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:24:hardcoded string:        query["course"] = subCourse;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:27:hardcoded string:    if (["byjus_tlp"].includes(productCombination)) {
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:28:hardcoded string:        query["$or"] = [{ type: { $exists: false } }, { type: { $in: ["", "btlp"] } }]
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:29:hardcoded string:        query["board"] = "CBSE"
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:34:hardcoded string:            query["type"] = Aakash.sdCard.type
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:36:hardcoded string:            query["type"] = Aakash.live.type
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:39:hardcoded variable:    const product = await ProductDetail.findOne(query).lean();
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:44:hardcoded string:            itemType: 'course'
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:48:hardcoded object:        const errorMsg = getErrorMsg({ grade, board, state, validity, course });
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:53:hardcoded variable:const isAdavanceOrderPunchingEnabled = async (details) => {
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:54:hardcoded object:    let { initialClass, finalClass, validity, productLearningType, initialGradeProductCategory, subCourse } = details;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:56:hardcoded variable:    const withingdvanceOrderSpan = moment(CURRENT_DATE).isBetween(START_DATE, END_DATE)
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:58:hardcoded string:    if (!["JEE", "NEET", "JEE/NEET"].includes(subCourse)) {
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:65:hardcoded string:    if (productLearningType === "AAKASH_LIVE") {
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:67:hardcoded string:        if (initialGradeProductCategory === "AAKASH_LIVE") {
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:68:hardcoded string:            if (initialClass === "11" && finalClass === "12" && validity == INITIAL_VALIDITY_1_YEAR_COURSE)
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:70:hardcoded string:        } else if (initialGradeProductCategory === "byjus_tlp") {
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:71:hardcoded string:            if (initialClass === "10" && finalClass === "12" && validity == INITIAL_VALIDITY_1_YEAR_COURSE)
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:73:hardcoded string:            if (initialClass === "11" && finalClass === "12" && validity == INITIAL_VALIDITY_1_YEAR_COURSE)
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:75:hardcoded string:            if (initialClass === "12" && finalClass === "13+" && validity == INITIAL_VALIDITY_1_YEAR_COURSE)
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:79:hardcoded string:    if (productLearningType === "byjus_classes") {
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:80:hardcoded string:        if (initialClass === "10" && finalClass === "12" && validity == INITIAL_VALIDITY_1_YEAR_COURSE)
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:89:hardcoded variable:const isDiscountedOrderPunchingEnabled = async (details) => {
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:90:hardcoded object:    let { initialClass, finalClass, validity, productCombination, subCourse } = details;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:93:hardcoded variable:    const withinDiscountedOrderSpan = moment(CURRENT_DATE).isBetween(START_DATE, END_DATE)
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:95:hardcoded string:    if (!["JEE", "NEET", "JEE/NEET"].includes(subCourse)) {
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:102:hardcoded string:    if (productCombination === "byjus_tlp" && validity == 2022) {
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:103:hardcoded string:        if (initialClass === "10" && finalClass === "12" && validity == INITIAL_VALIDITY_1_YEAR_COURSE)
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:105:hardcoded string:        if (initialClass === "11" && finalClass === "12" && validity == INITIAL_VALIDITY_1_YEAR_COURSE)
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:107:hardcoded string:        if (initialClass === "12" && finalClass === "13+" && validity == INITIAL_VALIDITY_1_YEAR_COURSE)
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:112:hardcoded number://Requirement on Jan 2022 : Every sales person reporting to A Particular Senior manager and punching order on an existing profile should have one year extra validity and should be able to sell (byjus_aakash & btlp, 11+12 / 12 grade, 2023 validity) on a lower price.
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:113:hardcoded variable:const isDiscountSaleApplicable = (details) => {
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:114:hardcoded object:    let { seniorManager, isExistingProfile, productCombination, initialClass, finalClass, selVal, email, featureEnableList } = details;
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:115:hardcoded number:    if(selVal == 2022)
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:117:hardcoded string:    if (featureEnableList.aakash_discount_sales_for_bda && isExistingProfile && ["byjus_aakash", "byjus_tlp", "tlp"].includes(productCombination) ) {
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:118:hardcoded string:        if (initialClass === "11" && finalClass === "12")
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:120:hardcoded string:            if (initialClass === "12" && finalClass === "12")
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:126:hardcoded variable:const getErrorMsg = function (queryDetails) {
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:127:hardcoded object:    const { grade, board, state, validity, course, type, miscellaneous } = queryDetails || {};
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:130:hardcoded string:    ${course ? `Course: ${course}` : ''}
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:131:hardcoded string:    ${grade ? `Grade: ${grade}` : ''}
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:132:hardcoded string:    ${board ? `Board: ${board}` : ''}
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:133:hardcoded string:    ${state ? `State: ${state}` : ''}
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:134:hardcoded string:    ${type ? `Type: ${type}` : ''}
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:135:hardcoded string:    ${validity ? `Validity: ${validity}` : ''}
microservices-middleware/server/src/productmanagement/advanceOrderPunchingMgmnt/advanceOrderProductHelper.js:136:hardcoded string:    ${miscellaneous && miscellaneous.length ? `Miscellaneous Courses: ${miscellaneous}` : ''}
