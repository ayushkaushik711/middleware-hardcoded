microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:1:hardcoded object:const { get, isEmpty, isArray, isNaN, flattenDeep } = require('lodash');
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:2:hardcoded file path:const logger = require('../../../lib/bunyan-logger')('AakashNeo Controller');
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:4:hardcoded string:const { DraftOrder } = require('@byjus-orders/nexemplum/oms');
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:6:hardcoded object:const { NotFoundError, BadRequestError } = require('../../../lib/errors');
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:7:hardcoded object:const { manageCashbacks } = require('../../cashbackmanagement/cashbackHelper');
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:8:hardcoded file path:const config = require('../../../config');
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:9:hardcoded object:const { getAakashDoubtsOnChatSkus, getSkuItemId, getPostgresTabletSku, getBooksSku, getMinimumRange } = require('../aakashneomanagement/aakashNeoHelper');
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:10:hardcoded object:const { checkIsOmsOrder, attachSiblingDetails, getStudentProfileDetails, validatingFOCPremiumAccount } = require("../productHelper");
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:11:hardcoded object:const { getDiscountDetails } = require('../vouchermanagement/voucherHelper');
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:12:hardcoded object:const { checkIfDraftOrderExists } = require('../../../utility/draftOrderUtility');
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:13:hardcoded object:const { reserveBonusPoints } = require('../../paymentmanagement/byjuswallet/bonusPoints');
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:14:hardcoded file path:const AakashNeo = require('../aakashneomanagement/aakashNeo');
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:16:hardcoded variable:const getComboProduct = async (req, res) => {
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:17:hardcoded string:    logger.info({ method: 'getComboProduct' }, { message: "Fetching Aakash Doc Product" });
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:20:hardcoded variable:    let tabletSku = null;
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:21:hardcoded number:    let totalPrice = 0;
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:22:hardcoded array:    let courseSkus = [];
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:23:hardcoded number:    let price = 0;
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:24:hardcoded string:    let { paymentType = "EMI", productType, student, couponDetails, productCombination, identifier, orderPunchingType = "", user } = req.body;
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:25:hardcoded variable:    let draftOrder = await DraftOrder.findById(identifier);
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:26:hardcoded string:    console.log("req",req.body);
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:29:hardcoded number:    student = isArray(student) ? student[0] : student;
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:31:hardcoded string:    let { initialClass, finalClass, validity, tablet = null, productLearningType, duration= "" } = student;
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:36:hardcoded variable:    let grade = initialClass;
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:39:hardcoded object:            let { docSku = {} } = await getAakashDoubtsOnChatSkus({ duration });
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:42:hardcoded number:             price = courseSkus.reduce((total, sku) => parseInt(sku.basePrice) + total, 0)
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:44:hardcoded string:                sku["price"] = sku.basePrice
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:45:hardcoded string:                sku["combinationType"] = sku["category"]
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:46:hardcoded string:                sku["itemId"] = getSkuItemId(sku);
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:51:hardcoded object:            tabletSku = await getPostgresTabletSku({ tabletId: tablet });
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:54:hardcoded array:        tabletSku = isArray(tabletSku) ? tabletSku : [tabletSku];
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:58:hardcoded array:            if (tabletSku[i]) {
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:59:hardcoded number:                const { price = 0, quantity = 1, type } = tabletSku[i];
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:61:hardcoded string:                tabletSku[i]["combinationType"] = type
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:62:hardcoded string:                tabletSku[i]["itemId"] = getSkuItemId(tabletSku[i]);
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:66:hardcoded variable:        let maxPrice = totalPrice;
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:67:hardcoded object:        let minPrice = getMinimumRange({ req, maxPrice, tabletSku, paymentType,productCombination })
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:69:hardcoded array:        const products = [courseSkus, tabletSku];
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:70:hardcoded variable:        const formattedProducts = flattenDeep(products).filter(prdct => prdct);
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:72:hardcoded string:        student["formValues"] = { ...student };
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:73:hardcoded string:        student["items"] = formattedProducts;
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:74:hardcoded object:        const skuProductDetails = { tabletSku, maxPrice, minPrice, productCombination }
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:75:hardcoded object:        const discountDetails = await getDiscountDetails({identifier, productDetails : skuProductDetails});
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:76:hardcoded string:        const { discountedPrice, voucher = "", minimumPrice, areBonusPointsUsed = false, bonusPointsDiscount = 0 } = discountDetails;
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:85:hardcoded array:            students: [student],
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:87:hardcoded array:            mentoringDetails: [oneToManySku],
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:93:hardcoded string:        console.log("error",error);
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:98:hardcoded variable:const storeProductDetails = async (req, res) => {
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:99:hardcoded string:    let { identifier, productDetails, productCombination = "", studentDetails } = req.body;
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:100:hardcoded string:    const { email } = get(req, 'user', {});
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:101:hardcoded string:    logger.info({ method: 'storeProductDetails', msg: `Storing Product Details for _id:${identifier}` });
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:105:hardcoded string:            throw new BadRequestError(`Parameters - ${identifier ? '' : 'identifier'} ${productDetails ? '' : 'productDetails'} Missing`);
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:106:hardcoded variable:        const draftOrder = await checkIfDraftOrderExists(identifier);
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:109:hardcoded object:            const { isOmsOrder, customerDetails } = draftOrder;
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:110:hardcoded object:            const { productType, isGstIn, student = {} } = productDetails;
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:111:hardcoded string:            const { validity = "", subCourse, product, productLearningType } = student;
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:112:hardcoded variable:            const isOmsEligibleOrder = await checkIsOmsOrder(productType, isOmsOrder, validity);
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:113:hardcoded object:            const { redeemedCashback, unutilizedCashbacks, amountToCustomer, amountToSalesPerson } = await manageCashbacks(draftOrder, productDetails);
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:114:hardcoded object:            let { orgFormattedName, orderPunchingType } = draftOrder
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:129:hardcoded string:            if (get(config, 'isStudentProfileAvailable') === "true" && productDetails.students && productDetails.students.length) {
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:134:hardcoded array:            const { formattedProducts = [], formattedStudents = [] } = await attachSiblingDetails(productDetails, productType, draftOrder, studentDetails);
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:135:hardcoded string:            productDetails["students"] = formattedStudents;
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:136:hardcoded string:            productDetails["products"] = formattedProducts;
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:137:hardcoded variable:            const orderPunchingCategory = AakashNeo.doc.category;
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:140:hardcoded string:            let bookInvoicing = 'not_applicable';
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:144:hardcoded variable:            const updateObj = {
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:147:hardcoded array:                addOnLineItems: [],
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:151:hardcoded string:                finalPrice: get(productDetails, 'finalPrice', 0),
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:152:hardcoded string:                status: "product_saved",
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:153:hardcoded array:                [`actionDetails.productSavedAt`]: new Date(),
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:154:hardcoded array:                [`actionDetails.productSavedBy`]: email,
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:156:hardcoded string:                "customerDetails.gstDetails.isGstIn": isGstIn,
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:159:hardcoded variable:            const transactionId = await reserveBonusPoints(draftOrder);
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:160:hardcoded string:            if (transactionId !== "") {
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:161:hardcoded string:                updateObj["bonusPointsDetails.transactionId"] = transactionId;
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:164:hardcoded string:            await DraftOrder.findOneAndUpdate({ '_id': identifier }, {
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatController.js:167:hardcoded object:            return res.json({ productDetails, cashbackDetails: { redeemedCashback, unutilizedCashbacks } });
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatRoutes.js:1:hardcoded file path:const Router = require('express-promise-router');
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatRoutes.js:2:hardcoded file path:const controller = require('./aakashDoubtsOnChatController');
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatRoutes.js:3:hardcoded object:const { storeCalculatedPriceMw, validateCalculatedPriceMw } = require('../productHelper');
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatRoutes.js:6:hardcoded object:const router = Router({ mergeParams: true });
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatRoutes.js:9:hardcoded string:    const baseRoute = '/aakashDoubtsOnChat';
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatRoutes.js:11:hardcoded object:    router.route(`${baseRoute}/storeProductDetails`)
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatRoutes.js:17:hardcoded object:    router.route(`${baseRoute}/product/combo`)
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatOrderSplit.js:1:hardcoded object:const { isEmpty } = require('lodash');
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatOrderSplit.js:3:hardcoded variable:const formattedAakashDocLineItems = async (orderDetails) => {
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatOrderSplit.js:4:hardcoded object:    const { productDetails, orderPunchingCategory } = orderDetails;
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatOrderSplit.js:5:hardcoded array:    const { students = [], paymentType, student } = productDetails;
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatOrderSplit.js:6:hardcoded object:    let lineItems = {};
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatOrderSplit.js:9:hardcoded number:        const { items, formValues, studentId } = students[0];
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatOrderSplit.js:11:hardcoded string:            throw new Error(" Order Split Failed: Aakash Doubts On Chat Order Punching LineItems Are Empty");
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatOrderSplit.js:13:hardcoded variable:        const splittedLineItems = await getLineItems(items, formValues, paymentType, studentId)
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatOrderSplit.js:14:hardcoded object:        const { parentLineItems, childLineItems } = splittedLineItems || {};
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatOrderSplit.js:17:hardcoded string:            throw new Error(" Order Split Failed: Aakash Doubts On Chat Order Punching LineItems Are Empty");
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatOrderSplit.js:20:hardcoded string:            throw new Error(" Order Split Failed: Total lineItems Count Is Not Equal To Splitted Line Items Count ");
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatOrderSplit.js:27:hardcoded string:        throw new Error(error || "Error in splitting line Items");
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatOrderSplit.js:32:hardcoded variable:const getLineItems = async (items, student, paymentType, studentId) => {
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatOrderSplit.js:33:hardcoded object:    const { productLearningType } = student;
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatOrderSplit.js:34:hardcoded array:    let parentLineItems = [], childLineItems = [], tabletItem = [], skuItems = []
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatOrderSplit.js:37:hardcoded string:        if (item.subType === "tablet") {
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatOrderSplit.js:43:hardcoded array:        parentLineItems = isEmpty(tabletItem) ? [...skuItems] : [...skuItems, ...tabletItem]
microservices-middleware/server/src/productmanagement/aakashDoubtsOnChatManagement/aakashDoubtsOnChatOrderSplit.js:44:hardcoded array:        childLineItems = []
