microservices-middleware/server/src/productmanagement/bdlc/orderSplit.js:7:hardcoded variable:	const formattedByjusDigitalLearningLineItems = async (orderDetails) => {
microservices-middleware/server/src/productmanagement/bdlc/orderSplit.js:8:hardcoded string:	    logger.info({ method: 'formatLineItems' }, 'Checking if Order is eligible to be splitted');
microservices-middleware/server/src/productmanagement/bdlc/orderSplit.js:9:hardcoded object:	    const { productDetails, orderPunchingCategory, paymentDetails } = orderDetails;
microservices-middleware/server/src/productmanagement/bdlc/orderSplit.js:10:hardcoded variable:	    const paymentType = getPaymentType(paymentDetails)
microservices-middleware/server/src/productmanagement/bdlc/orderSplit.js:11:hardcoded string:	    const { students = [], tablets = [], productType = "" } = productDetails;
microservices-middleware/server/src/productmanagement/bdlc/orderSplit.js:12:hardcoded string:	    const initialClass = get(students[0], "initialClass", "")
microservices-middleware/server/src/productmanagement/bdlc/orderSplit.js:13:hardcoded object:	    let lineItems = {};
microservices-middleware/server/src/productmanagement/bdlc/orderSplit.js:16:hardcoded string:	        const items = flattenDeep(map(students, 'items'));
microservices-middleware/server/src/productmanagement/bdlc/orderSplit.js:18:hardcoded object:	        logger.info(`BYJUS DIGITAL LEARNING LOGGER : ${paymentType} : ` + orderPunchingCategory);
microservices-middleware/server/src/productmanagement/bdlc/orderSplit.js:19:hardcoded object:	        const splittedLineItems = await getLineItems({ items, paymentType, initialClass, productType })
microservices-middleware/server/src/productmanagement/bdlc/orderSplit.js:20:hardcoded string:	        logger.info("BYJUS DIGITEL LEARNING LOGGER : splittedLineItems : " + splittedLineItems);
microservices-middleware/server/src/productmanagement/bdlc/orderSplit.js:22:hardcoded object:	        const { parentLineItems, childLineItems } = splittedLineItems || {};
microservices-middleware/server/src/productmanagement/bdlc/orderSplit.js:23:hardcoded string:	        const orderType = childLineItems.length ? 'split_order' : 'single_order';
microservices-middleware/server/src/productmanagement/bdlc/orderSplit.js:24:hardcoded string:	        logger.info("%j", { method: 'formatLineItems' }, { orderType, lineItems: JSON.stringify(splittedLineItems) });
microservices-middleware/server/src/productmanagement/bdlc/orderSplit.js:31:hardcoded string:	        logger.info("%j", { method: 'formatLineItems', message: "Error in splitting line Items" });
microservices-middleware/server/src/productmanagement/bdlc/orderSplit.js:32:hardcoded string:	        throw new Error(error || "Error in splitting line Items");
microservices-middleware/server/src/productmanagement/bdlc/orderSplit.js:38:hardcoded object:	const getLineItems = ({ items, paymentType, initialClass ,productType}) => {
microservices-middleware/server/src/productmanagement/bdlc/orderSplit.js:40:hardcoded array:	    let parentLineItems = [], childLineItems = []
microservices-middleware/server/src/productmanagement/bdlc/orderSplit.js:42:hardcoded number:	    if (items.length > 0) {
microservices-middleware/server/src/productmanagement/bdlc/orderSplit.js:43:hardcoded string:	        parentLineItems = items.filter(item => item && item.type == "product")
microservices-middleware/server/src/productmanagement/bdlc/orderSplit.js:44:hardcoded string:	        childLineItems = items.filter(item => item && item.type == "service")
microservices-middleware/server/src/productmanagement/bdlc/orderSplit.js:45:hardcoded string:	        if (!parentLineItems.length && productType == "combo" && paymentType == "EMI" ) {
microservices-middleware/server/src/productmanagement/bdlc/orderSplit.js:51:hardcoded array:	            childLineItems = []
microservices-middleware/server/src/productmanagement/bdlc/orderSplit.js:54:hardcoded string:	        throw new Error("LineItems Missing");
microservices-middleware/server/src/productmanagement/bdlc/assembler.js:7:hardcoded variable:	const getUpdatedPrice = async (details) => {
microservices-middleware/server/src/productmanagement/bdlc/assembler.js:8:hardcoded object:	    let { req, totalPrice, paymentType, tabletSku } = details;
microservices-middleware/server/src/productmanagement/bdlc/assembler.js:9:hardcoded string:	    let { identifier, student, accountType, productCombination, couponDetails = '', updatedStudentDetails, workshopChannel, loggedInMobile } = req.body;
microservices-middleware/server/src/productmanagement/bdlc/assembler.js:10:hardcoded number:	    let { validity, initialClass } = student ? student : updatedStudentDetails[0];
microservices-middleware/server/src/productmanagement/bdlc/assembler.js:12:hardcoded variable:	    let maxPrice = totalPrice
microservices-middleware/server/src/productmanagement/bdlc/assembler.js:13:hardcoded object:	    let minPrice = getMinimumRange({ req, maxPrice, tabletSku, paymentType, couponDetails, productCombination, validity });
microservices-middleware/server/src/productmanagement/bdlc/assembler.js:15:hardcoded object:	    const skuProductDetails = { initialClass, finalClass: initialClass, tabletSku, maxPrice, minPrice, productCombination }
microservices-middleware/server/src/productmanagement/bdlc/assembler.js:16:hardcoded object:	    const discountDetails = await getDiscountDetails({identifier, productDetails : skuProductDetails, workshopChannel, loggedInMobile});
microservices-middleware/server/src/productmanagement/bdlc/assembler.js:17:hardcoded string:	    const { discountedPrice, voucher = "", minimumPrice, areBonusPointsUsed = false, bonusPointsDiscount = 0 } = discountDetails;
microservices-middleware/server/src/productmanagement/bdlc/assembler.js:30:hardcoded variable:	const getUpdatedCourseSku = async (details) => {
microservices-middleware/server/src/productmanagement/bdlc/assembler.js:31:hardcoded string:	    const { products, initialClass='', siblingName, siblingCount, tabletId, student='', isBDLCDiscountPriceApplicable='' }= details
microservices-middleware/server/src/productmanagement/bdlc/assembler.js:32:hardcoded array:	    let updatedCourseSku = []
microservices-middleware/server/src/productmanagement/bdlc/assembler.js:34:hardcoded string:	        courseSku["itemType"] = get(courseSku, 'itemType')
microservices-middleware/server/src/productmanagement/bdlc/assembler.js:35:hardcoded string:	        courseSku['price'] = (isBDLCDiscountPriceApplicable==true)? getDiscountPrice(courseSku, student): getPrice(courseSku, initialClass, siblingCount)
microservices-middleware/server/src/productmanagement/bdlc/assembler.js:36:hardcoded string:	        courseSku['combinationType'] = get(courseSku, 'category')
microservices-middleware/server/src/productmanagement/bdlc/assembler.js:37:hardcoded string:	        courseSku["itemId"] = getSkuItemId(courseSku);
microservices-middleware/server/src/productmanagement/bdlc/assembler.js:38:hardcoded string:	        courseSku['tabletId'] = tabletId ? tabletId : ""
microservices-middleware/server/src/productmanagement/bdlc/assembler.js:40:hardcoded string:	            courseSku['studentId'] = `${siblingName}-${siblingCount + 1}`
microservices-middleware/server/src/productmanagement/bdlc/assembler.js:47:hardcoded variable:	const isBDLCDiscountApplicable=(student)=>{
microservices-middleware/server/src/productmanagement/bdlc/assembler.js:48:hardcoded object:	    const {validity, productCombination, initialClass, finalClass, state}= student
microservices-middleware/server/src/productmanagement/bdlc/assembler.js:49:hardcoded string:	    const isDiscountPriceApplicable = (validity===2023 && productCombination==='byjus_digital_learning' && initialClass !== finalClass && initialClass>=6 && state==='WestBengal') ?true : false
microservices-middleware/server/src/productmanagement/bdlc/service.js:7:hardcoded variable:	const getMinimumRange = (productDetails) => {
microservices-middleware/server/src/productmanagement/bdlc/service.js:8:hardcoded string:	    logger.info({ method: 'getMinimumRange' }, 'Calculating Minimum price');
microservices-middleware/server/src/productmanagement/bdlc/service.js:9:hardcoded object:	    let { req, maxPrice, tabletSku, paymentType } = productDetails
microservices-middleware/server/src/productmanagement/bdlc/service.js:10:hardcoded variable:	    const user = req.user;
microservices-middleware/server/src/productmanagement/bdlc/service.js:14:hardcoded array:	    tabletSku = isArray(tabletSku) ? tabletSku : [tabletSku];
microservices-middleware/server/src/productmanagement/bdlc/service.js:17:hardcoded variable:	    const tabletTotalPrice = tabletSku ? tabletSku.reduce((sum, sku) => {
microservices-middleware/server/src/productmanagement/bdlc/service.js:18:hardcoded string:	        return sum + (parseInt(get(sku, 'quantity', 1)) * parseInt(get(sku, 'price', 0)));
microservices-middleware/server/src/productmanagement/bdlc/service.js:19:hardcoded number:	    }, 0) : 0;
microservices-middleware/server/src/productmanagement/bdlc/service.js:22:hardcoded variable:	    const applicablePriceForDiscount = parseInt(maxPrice) - parseInt(tabletTotalPrice);
microservices-middleware/server/src/productmanagement/bdlc/service.js:28:hardcoded variable:	    let minPrice = applicablePriceForDiscount - (applicablePriceForDiscount * minPricePercentage);
microservices-middleware/server/src/productmanagement/bdlc/service.js:29:hardcoded number:	    minPrice = (Math.floor(minPrice / 1000)) * 1000;
microservices-middleware/server/src/productmanagement/bdlc/service.js:33:hardcoded string:	    logger.info({ method: 'getMinimumRange', minPrice }, 'Minimum Price');
microservices-middleware/server/src/productmanagement/bdlc/controller.js:6:hardcoded string:	const { DraftOrder } = require('@byjus-orders/nexemplum/oms');
microservices-middleware/server/src/productmanagement/bdlc/controller.js:20:hardcoded variable:	const getSingleProduct = async (req, res) => {
microservices-middleware/server/src/productmanagement/bdlc/controller.js:21:hardcoded string:	    logger.info({ method: 'getSingleProduct' }, { message: "Fetching Byjus DLC Single Product" });
microservices-middleware/server/src/productmanagement/bdlc/controller.js:23:hardcoded array:	    let skuArray = [];
microservices-middleware/server/src/productmanagement/bdlc/controller.js:24:hardcoded string:	    let { paymentType = 'NON-EMI', productType, productCombination, student, identifier } = req.body;
microservices-middleware/server/src/productmanagement/bdlc/controller.js:28:hardcoded number:	        student = isArray(student) ? student[0] : student
microservices-middleware/server/src/productmanagement/bdlc/controller.js:29:hardcoded string:	        student['productCombination'] = productCombination
microservices-middleware/server/src/productmanagement/bdlc/controller.js:30:hardcoded object:	        const {initialClass, validity, tablet: tabletId } = student
microservices-middleware/server/src/productmanagement/bdlc/controller.js:31:hardcoded variable:	        let grade = parseInt(initialClass)
microservices-middleware/server/src/productmanagement/bdlc/controller.js:36:hardcoded object:	            const tabletSku = await getPostgresTabletSku({tabletId})
microservices-middleware/server/src/productmanagement/bdlc/controller.js:39:hardcoded variable:	        const products = flattenDeep(skuArray)
microservices-middleware/server/src/productmanagement/bdlc/controller.js:40:hardcoded object:	        const updatedCourseSku = await getUpdatedCourseSku({products, initialClass})
microservices-middleware/server/src/productmanagement/bdlc/controller.js:41:hardcoded object:	        const { formattedProducts, totalPrice } = getTotalSkuAndPrice({
microservices-middleware/server/src/productmanagement/bdlc/controller.js:44:hardcoded object:	        formattedProducts.push(await getRegSku({initialClass, productCombination}))
microservices-middleware/server/src/productmanagement/bdlc/controller.js:47:hardcoded string:	        const details = {req, totalPrice, tabletSku: formattedProducts.filter(ele => ele.category === "tablet"), paymentType}
microservices-middleware/server/src/productmanagement/bdlc/controller.js:48:hardcoded object:	        const { maxPrice, minPrice, discountedPrice, voucher, areBonusPointsUsed, bonusPointsDiscount } = await getUpdatedPrice(details)
microservices-middleware/server/src/productmanagement/bdlc/controller.js:57:hardcoded array:	            students: [student],
microservices-middleware/server/src/productmanagement/bdlc/controller.js:69:hardcoded variable:	const getComboProduct = async (req, res) => {
microservices-middleware/server/src/productmanagement/bdlc/controller.js:70:hardcoded string:	    logger.info({ method: 'getComboProduct' }, { message: "Fetching Byjus DLC Combo Product" });
microservices-middleware/server/src/productmanagement/bdlc/controller.js:72:hardcoded string:	    let { paymentType = 'NON-EMI', productType, productCombination, student, identifier } = req.body;
microservices-middleware/server/src/productmanagement/bdlc/controller.js:74:hardcoded array:	    let skuArray = [];
microservices-middleware/server/src/productmanagement/bdlc/controller.js:77:hardcoded number:	        student = isArray(student) ? student[0] : student
microservices-middleware/server/src/productmanagement/bdlc/controller.js:78:hardcoded string:	        student['productCombination'] = productCombination
microservices-middleware/server/src/productmanagement/bdlc/controller.js:79:hardcoded object:	        let { initialClass, finalClass, validity, tablet: tabletId, byjusClassFinalGrade, tlpFinalGrade, board, belpProductType } = student;
microservices-middleware/server/src/productmanagement/bdlc/controller.js:84:hardcoded variable:	        let grade = initialClass;
microservices-middleware/server/src/productmanagement/bdlc/controller.js:85:hardcoded variable:	        let initialValidity = validity
microservices-middleware/server/src/productmanagement/bdlc/controller.js:86:hardcoded number:	        let price = 0;
microservices-middleware/server/src/productmanagement/bdlc/controller.js:87:hardcoded variable:	        const isBDLCDiscountPriceApplicable = isBDLCDiscountApplicable(student)
microservices-middleware/server/src/productmanagement/bdlc/controller.js:90:hardcoded variable:	            let courseSku = await getBDLCAndDOCProductAndPrice(student,grade,validity)
microservices-middleware/server/src/productmanagement/bdlc/controller.js:92:hardcoded number:	            grade += 1;
microservices-middleware/server/src/productmanagement/bdlc/controller.js:98:hardcoded object:	            const tabletSku = await getPostgresTabletSku({tabletId})
microservices-middleware/server/src/productmanagement/bdlc/controller.js:102:hardcoded variable:	        const products = flattenDeep(skuArray)
microservices-middleware/server/src/productmanagement/bdlc/controller.js:103:hardcoded object:	        const updatedCourseSku = await getUpdatedCourseSku({products, initialClass, student,isBDLCDiscountPriceApplicable })
microservices-middleware/server/src/productmanagement/bdlc/controller.js:104:hardcoded object:	        const { formattedProducts, totalPrice } = getTotalSkuAndPrice({
microservices-middleware/server/src/productmanagement/bdlc/controller.js:107:hardcoded object:	        formattedProducts.push(await getRegSku({initialClass, productCombination}))
microservices-middleware/server/src/productmanagement/bdlc/controller.js:110:hardcoded string:	        const details = {req, totalPrice, tabletSku: formattedProducts.filter(ele => ele.category === "tablet"), paymentType}
microservices-middleware/server/src/productmanagement/bdlc/controller.js:111:hardcoded object:	        const { maxPrice, minPrice, discountedPrice, voucher, areBonusPointsUsed, bonusPointsDiscount } = await getUpdatedPrice(details)
microservices-middleware/server/src/productmanagement/bdlc/controller.js:120:hardcoded array:	            students: [student],
microservices-middleware/server/src/productmanagement/bdlc/controller.js:132:hardcoded variable:	const storeProductDetails = async (req, res) => {
microservices-middleware/server/src/productmanagement/bdlc/controller.js:133:hardcoded object:	    let { identifier, productDetails, studentDetails, isPrivilegedUser } = req.body;
microservices-middleware/server/src/productmanagement/bdlc/controller.js:135:hardcoded string:	    const { email } = get(req, 'user', {});
microservices-middleware/server/src/productmanagement/bdlc/controller.js:136:hardcoded string:	    logger.info({ method: 'storeProductDetails', msg: `Storing Product Details for _id:${identifier}` });
microservices-middleware/server/src/productmanagement/bdlc/controller.js:140:hardcoded string:	            throw new BadRequestError(`Parameters - ${identifier ? '' : 'identifier'} ${productDetails ? '' : 'productDetails'} Missing`);
microservices-middleware/server/src/productmanagement/bdlc/controller.js:141:hardcoded variable:	        const draftOrder = await checkIfDraftOrderExists(identifier);
microservices-middleware/server/src/productmanagement/bdlc/controller.js:145:hardcoded object:	            const { isOmsOrder, customerDetails } = draftOrder;
microservices-middleware/server/src/productmanagement/bdlc/controller.js:146:hardcoded object:	            const { productType, student = {}, productCombination } = productDetails;
microservices-middleware/server/src/productmanagement/bdlc/controller.js:147:hardcoded string:	            const { validity = "" } = student;
microservices-middleware/server/src/productmanagement/bdlc/controller.js:151:hardcoded string:	            if (get(config, 'isStudentProfileAvailable') === "true" && productDetails.students && productDetails.students.length) {
microservices-middleware/server/src/productmanagement/bdlc/controller.js:158:hardcoded array:	            const { formattedProducts = [], formattedStudents = [] } = await attachSiblingDetails(productDetails, productType, draftOrder, studentDetails, isPrivilegedUser);
microservices-middleware/server/src/productmanagement/bdlc/controller.js:159:hardcoded string:	            productDetails["students"] = formattedStudents;
microservices-middleware/server/src/productmanagement/bdlc/controller.js:160:hardcoded string:	            productDetails["products"] = formattedProducts;
microservices-middleware/server/src/productmanagement/bdlc/controller.js:165:hardcoded variable:	            const updateObj = {
microservices-middleware/server/src/productmanagement/bdlc/controller.js:170:hardcoded string:	                finalPrice: get(productDetails, 'finalPrice', 0),
microservices-middleware/server/src/productmanagement/bdlc/controller.js:171:hardcoded string:	                status: "product_saved",
microservices-middleware/server/src/productmanagement/bdlc/controller.js:172:hardcoded array:	                [`actionDetails.productSavedAt`]: new Date(),
microservices-middleware/server/src/productmanagement/bdlc/controller.js:173:hardcoded array:	                [`actionDetails.productSavedBy`]: email
microservices-middleware/server/src/productmanagement/bdlc/controller.js:176:hardcoded string:	            await DraftOrder.findOneAndUpdate({ '_id': identifier }, {
microservices-middleware/server/src/productmanagement/bdlc/controller.js:179:hardcoded object:	            return res.json({ productDetails });
microservices-middleware/server/src/productmanagement/bdlc/dto.js:9:hardcoded variable:	const getBDLCAndDOCProductAndPrice = async (student, grade, validity) => {
microservices-middleware/server/src/productmanagement/bdlc/dto.js:10:hardcoded array:	    let courseSku = [];
microservices-middleware/server/src/productmanagement/bdlc/dto.js:11:hardcoded string:	    const { board, state, tablet: tabletId, initialClass, finalClass = "" } = student
microservices-middleware/server/src/productmanagement/bdlc/dto.js:12:hardcoded number:	    const docValidity = (finalClass ? (parseInt(finalClass) -  parseInt(initialClass)) + 1 : 1 ) * 12
microservices-middleware/server/src/productmanagement/bdlc/dto.js:13:hardcoded number:	    const wbBoardValidity = (validity - 1)
microservices-middleware/server/src/productmanagement/bdlc/dto.js:14:hardcoded variable:	    let query = {
microservices-middleware/server/src/productmanagement/bdlc/dto.js:16:hardcoded string:	        brand: '',
microservices-middleware/server/src/productmanagement/bdlc/dto.js:17:hardcoded string:	        type: 'service',
microservices-middleware/server/src/productmanagement/bdlc/dto.js:18:hardcoded string:	        validity: (board === "STATE" && state === 'WestBengal' && WB_GRADES.includes(grade.toString())) ? wbBoardValidity.toString() : validity.toString(),
microservices-middleware/server/src/productmanagement/bdlc/dto.js:19:hardcoded string:	        validityType: 'year'
microservices-middleware/server/src/productmanagement/bdlc/dto.js:22:hardcoded string:	    query ["board"] = await getPostgresBoard({ grade: grade.toString(), board, state, query })
microservices-middleware/server/src/productmanagement/bdlc/dto.js:24:hardcoded variable:	    const dblcSku = await getSalesSku({
microservices-middleware/server/src/productmanagement/bdlc/dto.js:26:hardcoded string:	        subType: "streaming",
microservices-middleware/server/src/productmanagement/bdlc/dto.js:27:hardcoded string:	        category: "byjus_digital_learning"
microservices-middleware/server/src/productmanagement/bdlc/dto.js:32:hardcoded variable:	        const docSku = await getDocSku({
microservices-middleware/server/src/productmanagement/bdlc/dto.js:34:hardcoded string:	            validityType: 'month',
microservices-middleware/server/src/productmanagement/bdlc/dto.js:35:hardcoded string:	            subType: "live",
microservices-middleware/server/src/productmanagement/bdlc/dto.js:36:hardcoded string:	            category: "doubts_on_chat"
microservices-middleware/server/src/productmanagement/bdlc/dto.js:46:hardcoded variable:	    const getDocSku = async (query) => {
microservices-middleware/server/src/productmanagement/bdlc/dto.js:48:hardcoded string:	        let includeQuery = { where: { frequency : '30', renewal_mode : 'recurring' }}
microservices-middleware/server/src/productmanagement/bdlc/dto.js:49:hardcoded variable:	        let product = await getSalesSkuWithAttribute(query, includeQuery)
microservices-middleware/server/src/productmanagement/bdlc/routes.js:5:hardcoded object:	const router = Router({ mergeParams: true });
microservices-middleware/server/src/productmanagement/bdlc/routes.js:8:hardcoded string:	    const baseRoute = '/byjusdlc'
microservices-middleware/server/src/productmanagement/bdlc/routes.js:10:hardcoded object:	    router.route(`${baseRoute}/single`)
microservices-middleware/server/src/productmanagement/bdlc/routes.js:16:hardcoded object:	    router.route(`${baseRoute}/combo`)
microservices-middleware/server/src/productmanagement/bdlc/routes.js:22:hardcoded object:	    router.route(`${baseRoute}/storeProductDetails`)
