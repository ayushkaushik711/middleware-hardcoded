microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoConfigME.js:3:hardcoded string:	    productCombination: "byjus_aakash_neo",
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoConfigME.js:4:hardcoded string:	    productSelectionType: "byjus_aakash_neo",
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoConfigME.js:5:hardcoded string:	    orderPunchingType:"MIDDLEEAST_ORDER",
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoConfigME.js:7:hardcoded string:	        type: "service",
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoConfigME.js:8:hardcoded string:	        subType: "live",
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoConfigME.js:9:hardcoded string:	        category: "aakash_neo_classes",
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoConfigME.js:10:hardcoded string:	        orgFormattedName: "aakash",
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoConfigME.js:11:hardcoded string:	        orderPunchingCategory: "aakash_neo_classes"
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoConfigME.js:14:hardcoded string:	        type: "AAKASH_SD_CARD",
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoConfigME.js:15:hardcoded string:	        subType: "sd_card",
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoConfigME.js:16:hardcoded string:	        category: "aakash",
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoConfigME.js:17:hardcoded string:	        orderPunchingCategory: "aakash_tlp"
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:4:hardcoded string:	const { DraftOrder } = require('@byjus-orders/nexemplum/oms');
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:17:hardcoded variable:	const getComboProduct = async (req, res) => {
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:18:hardcoded string:	    logger.info({ method: 'getComboProduct' }, { message: "Fetching Combo Product for aakash Byjus Courses Middle East " });
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:21:hardcoded variable:	    let tabletSku = null;
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:22:hardcoded number:	    let totalPrice = 0;
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:23:hardcoded array:	    let courseSkus = [];
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:24:hardcoded number:	    let price = 0;
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:25:hardcoded string:	    let { paymentType = "EMI", productType, student, couponDetails, productCombination, identifier, country = "" } = req.body;
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:28:hardcoded number:	    student = isArray(student) ? student[0] : student;
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:30:hardcoded object:	    let { initialClass, finalClass, validity, tablet = null, subCourse, productLearningType } = student;
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:35:hardcoded variable:	    let grade = initialClass;
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:39:hardcoded number:	            if (grade === 11 && finalClass === 12) {
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:40:hardcoded string:	                grade = '11+12';
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:42:hardcoded number:	            if (grade == 13) {
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:43:hardcoded string:	                grade = "13+"
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:45:hardcoded object:	            let { sdCardSku = {}, liveSku = {} } = await getAakashByjusCoursesSkus({
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:53:hardcoded string:	            productLearningType === 'aakash_byjus_live' ? courseSkus.push(liveSku, sdCardSku) : courseSkus.push(sdCardSku);
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:54:hardcoded string:	            grade += (grade === '11+12') ? 2 : 1;
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:59:hardcoded string:	            sku["price"] = sku?.priceDetails['united_arab_emirates'].basePrice
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:62:hardcoded number:	        price = courseSkus.reduce((total, sku) => parseInt(sku.price) + total, 0)
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:65:hardcoded string:	            courseSkus[i]["combinationType"] = courseSkus[i]["category"]
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:66:hardcoded string:	            courseSkus[i]["itemId"] = getSkuItemId(courseSkus[i]);
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:70:hardcoded object:	            tabletSku = await getTabletSku({ tabletId: tablet, country });
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:73:hardcoded array:	        tabletSku = isArray(tabletSku) ? tabletSku : [tabletSku];
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:77:hardcoded array:	            if (tabletSku[i]) {
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:78:hardcoded number:	                const { price = 0, quantity = 1, type } = tabletSku[i];
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:80:hardcoded string:	                tabletSku[i]["combinationType"] = type
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:81:hardcoded string:	                tabletSku[i]["itemId"] = getSkuItemId(tabletSku[i]);
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:84:hardcoded variable:	        let maxPrice = totalPrice;
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:85:hardcoded object:	        let minPrice = getMinimumRange({ req, maxPrice, tabletSku, paymentType, productCombination })
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:87:hardcoded array:	        const products = [courseSkus, tabletSku];
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:88:hardcoded variable:	        const formattedProducts = flattenDeep(products).filter(prdct => prdct);
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:90:hardcoded string:	        student["formValues"] = { ...student };
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:91:hardcoded string:	        student["items"] = formattedProducts;
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:92:hardcoded object:	        const skuProductDetails = { tabletSku, maxPrice, minPrice, productCombination }
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:93:hardcoded object:	        const discountDetails = await getDiscountDetails({ identifier, productDetails: skuProductDetails });
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:94:hardcoded string:	        const { discountedPrice, voucher = "", minimumPrice, areBonusPointsUsed = false, bonusPointsDiscount = 0 } = discountDetails;
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:103:hardcoded array:	            students: [student],
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:105:hardcoded array:	            mentoringDetails: [oneToManySku],
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:115:hardcoded variable:	const storeProductDetails = async (req, res) => {
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:116:hardcoded object:	    let { identifier, productDetails, studentDetails } = req.body;
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:117:hardcoded string:	    const { email } = get(req, 'user', {});
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:118:hardcoded string:	    logger.info({ method: 'storeProductDetails', msg: `Storing Product Details for _id:${identifier}` });
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:122:hardcoded string:	            throw new BadRequestError(`Parameters - ${identifier ? '' : 'identifier'} ${productDetails ? '' : 'productDetails'} Missing`);
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:123:hardcoded variable:	        const draftOrder = await checkIfDraftOrderExists(identifier);
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:126:hardcoded object:	            const { isOmsOrder, customerDetails } = draftOrder;
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:127:hardcoded object:	            const { productType, isGstIn, student = {} } = productDetails;
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:128:hardcoded string:	            const { validity = "", subCourse, product, productLearningType } = student;
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:129:hardcoded variable:	            const isOmsEligibleOrder = await checkIsOmsOrder(productType, isOmsOrder, validity);
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:130:hardcoded object:	            const { redeemedCashback, unutilizedCashbacks, amountToCustomer, amountToSalesPerson } = await manageCashbacks(draftOrder, productDetails);
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:131:hardcoded object:	            let { orgFormattedName, orderPunchingType } = draftOrder
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:146:hardcoded string:	            if (get(config, 'isStudentProfileAvailable') === "true" && productDetails.students && productDetails.students.length) {
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:151:hardcoded array:	            const { formattedProducts = [], formattedStudents = [] } = await attachSiblingDetails(productDetails, productType, draftOrder, studentDetails);
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:152:hardcoded string:	            productDetails["students"] = formattedStudents;
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:153:hardcoded string:	            productDetails["products"] = formattedProducts;
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:154:hardcoded string:	            const orderPunchingCategory = productLearningType == 'aakash_byjus_live' ? AakashNeo.live.orderPunchingCategory : AakashNeo.sdCard.orderPunchingCategory;
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:157:hardcoded string:	            let bookInvoicing = 'not_applicable';
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:158:hardcoded array:	            let addOnLineItems = [];
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:162:hardcoded variable:	            const updateObj = {
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:165:hardcoded array:	                addOnLineItems: addOnLineItems || [],
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:169:hardcoded string:	                finalPrice: get(productDetails, 'finalPrice', 0),
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:170:hardcoded string:	                status: "product_saved",
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:171:hardcoded array:	                [`actionDetails.productSavedAt`]: new Date(),
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:172:hardcoded array:	                [`actionDetails.productSavedBy`]: email,
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:174:hardcoded string:	                "customerDetails.gstDetails.isGstIn": isGstIn,
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:177:hardcoded variable:	            const transactionId = await reserveBonusPoints(draftOrder);
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:178:hardcoded string:	            if (transactionId !== "") {
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:179:hardcoded string:	                updateObj["bonusPointsDetails.transactionId"] = transactionId;
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:182:hardcoded string:	            await DraftOrder.findOneAndUpdate({ '_id': identifier }, {
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEController.js:185:hardcoded object:	            return res.json({ productDetails, cashbackDetails: { redeemedCashback, unutilizedCashbacks }});
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEOrderSplit.js:3:hardcoded variable:	const formattedAakashNeoMiddleEastLineItems = async (orderDetails) => {
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEOrderSplit.js:4:hardcoded object:	    const { productDetails} = orderDetails;
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEOrderSplit.js:5:hardcoded array:	    const { students = []} = productDetails;
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEOrderSplit.js:6:hardcoded object:	    let lineItems = {};
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEOrderSplit.js:9:hardcoded number:	        const { items, formValues } = students[0];
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEOrderSplit.js:11:hardcoded string:	            throw new Error(" Order Split Failed: Aakash Neo Middle East Order Punching LineItems Are Empty ");
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEOrderSplit.js:13:hardcoded object:	        const splittedLineItems = await getLineItems({items, formValues})
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEOrderSplit.js:14:hardcoded object:	        const { parentLineItems, childLineItems } = splittedLineItems || {};
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEOrderSplit.js:16:hardcoded string:	        if (isEmpty(parentLineItems) || (isEmpty(childLineItems) && formValues?.productLearningType === "aakash_byjus_live")) {
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEOrderSplit.js:17:hardcoded string:	            throw new Error(" Order Split Failed: AAakash Neo Middle East Order Punching LineItems Are Empty ");
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEOrderSplit.js:20:hardcoded string:	            throw new Error(" Order Split Failed: Total lineItems Count Is Not Equal To Splitted Line Items Count ");
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEOrderSplit.js:27:hardcoded string:	        throw new Error(error || "Error in splitting line Items");
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEOrderSplit.js:32:hardcoded object:	const getLineItems = async ({items, formValues}) => {
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEOrderSplit.js:34:hardcoded array:	    let parentLineItems = [], childLineItems = [], tabletItem = [], skuItems = [], sdCardItem = [];
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEOrderSplit.js:37:hardcoded string:	        if (item.type === "tablet") {
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEOrderSplit.js:39:hardcoded string:	        } else if (item.type === "AAKASH_SD_CARD") {
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEOrderSplit.js:46:hardcoded array:	    parentLineItems = !isEmpty(tabletItem) ? [...sdCardItem, ...tabletItem,] : [...sdCardItem]
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEOrderSplit.js:47:hardcoded array:	    childLineItems = !isEmpty(skuItems) ? [...skuItems] : []
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEOrderSplit.js:50:hardcoded array:	        childLineItems: Array.isArray(childLineItems) ? childLineItems : [childLineItems]
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMERoutes.js:3:hardcoded object:	const router = Router({ mergeParams: true });
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMERoutes.js:6:hardcoded string:	    const baseRoute = '/middleeast';
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMERoutes.js:8:hardcoded object:	 router.route(`${baseRoute}/aakashNeo/combo`)
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMERoutes.js:14:hardcoded object:	 router.route(`${baseRoute}/aakashNeo/storeProductDetails`)
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:6:hardcoded string:	const { ProductDetail } = require('@byjus-orders/nexemplum/oms')
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:12:hardcoded variable:	const getAakashByjusCoursesSkus = async (details) => {
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:14:hardcoded object:	    let { initialClass, finalClass, grade, productCombination, subCourse, validity, productLearningType } = details;
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:17:hardcoded string:	    if (grade == '11+12') {
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:18:hardcoded number:	        validity += 1;
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:23:hardcoded variable:	    const queryForLive = {
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:30:hardcoded string:	        status: 'active',
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:32:hardcoded variable:	    const queryForSdcard = {
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:36:hardcoded object:	        validity : `MAY ${validity}`,
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:39:hardcoded string:	    if (productLearningType === 'aakash_byjus_live') {
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:40:hardcoded variable:	        let liveSku = await getLiveSkus(queryForLive)
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:41:hardcoded variable:	        let sdCardSku = await getSdCardSkus(queryForSdcard)
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:42:hardcoded object:	        return { liveSku, sdCardSku };
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:44:hardcoded variable:	        let sdCardSku = await getSdCardSkus(queryForSdcard)
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:45:hardcoded object:	        return { sdCardSku };
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:49:hardcoded variable:	const getTabletSku = async (details) => {
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:50:hardcoded object:	    let { tabletId, studentId, uniqueTabletId, country } = details
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:51:hardcoded number:	    let price = 0
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:52:hardcoded variable:	    const tabletSku = await ProductDetail.findOne({
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:53:hardcoded string:	        "$or": [{ "skuId": tabletId },
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:54:hardcoded string:	        { "productId": tabletId },
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:58:hardcoded variable:	    let countryPrice = tabletSku.priceDetails
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:60:hardcoded string:	        countryPrice = tabletSku.priceDetails['united_arab_emirates']
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:61:hardcoded string:	        price = parseInt(countryPrice["basePrice"])
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:63:hardcoded variable:	        const errorMsg = getErrorMsg(tabletSku);
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:73:hardcoded string:	            itemType: 'tablet'
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:77:hardcoded object:	        throw new NotFoundError(`Tablet with SKU Id:${tabletId} is not found`);
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:81:hardcoded variable:	const getErrorMsg = function (queryDetails) {
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:82:hardcoded object:	    const { grade, subCourse, validity, type } = queryDetails || {};
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:85:hardcoded string:	    ${subCourse ? `Course: ${subCourse}` : ''}
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:86:hardcoded string:	    ${grade ? `Grade: ${grade}` : ''}
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:87:hardcoded string:	    ${type ? `Type: ${type}` : ''}
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:88:hardcoded string:	    ${validity ? `Validity: ${validity}` : ''}
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:92:hardcoded variable:	const getSkuItemId = (product) => {
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:93:hardcoded number:	    const itemId = nanoid(24)
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:97:hardcoded variable:	const getLiveSkus = async (queryForLive) => {
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:98:hardcoded variable:	    let liveSku = await ProductDetail.findOne(queryForLive).lean();
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:100:hardcoded variable:	        const errorMsg = getErrorMsg(queryForLive);
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:106:hardcoded variable:	const getSdCardSkus = async (queryForSdcard) => {
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:107:hardcoded variable:	    let sdCardSku = await ProductDetail.findOne(queryForSdcard).lean();
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:109:hardcoded variable:	        const errorMsg = getErrorMsg(queryForSdcard);
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:115:hardcoded variable:	const getSummedUpPrice = (entity) => {
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:116:hardcoded variable:	    const totalPrice = entity ? entity.reduce((sum, sku) => {
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:117:hardcoded string:	        return sum + (parseInt(get(sku, 'quantity', 1)) * parseInt(get(sku, 'price', 0)));
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:118:hardcoded number:	    }, 0) : 0;
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:123:hardcoded variable:	const getMinimumRange = (productDetails) => {
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:124:hardcoded string:	    logger.info({ method: 'getMinimumRange' }, 'Calculating Minimum price');
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:125:hardcoded object:	    let { maxPrice, tabletSku, paymentType, req,productCombination } = productDetails
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:126:hardcoded object:	    let { user } = req;
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:127:hardcoded string:	    const campaign = (get(user, 'campaign', '') || '').toUpperCase();
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:128:hardcoded string:	    const vertical = (get(user, "vertical", ""))
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:129:hardcoded string:	    const loggedInUserRole = (get(user, 'role', '') || '');
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:132:hardcoded variable:	    const env = process.env.NODE_ENV;
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:133:hardcoded array:	    tabletSku = isArray(tabletSku) ? tabletSku : [tabletSku];
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:136:hardcoded variable:	    const tabletTotalPrice = getSummedUpPrice(tabletSku);
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:139:hardcoded variable:	    const applicablePriceForDiscount = parseInt(maxPrice) - parseInt(tabletTotalPrice);
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:149:hardcoded object:	    if(productConstant.UPGRADE_VERTICAL_TRIAL_CAMPAIGN_BDA_PRODUCT_COMBINATION.includes(productCombination) && productConstant.UPGRADE_VERTICAL_TRIAL_CAMPAIGN_BDA_VERTICAL({ vertical, campaign}) && productConstant.UPGRADE_VERTICAL_TRIAL_CAMPAIGN_BDA_ROLE.includes(loggedInUserRole)){
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:158:hardcoded variable:	    let minPrice = applicablePriceForDiscount - (applicablePriceForDiscount * minPricePercentage);
microservices-middleware/server/src/productmanagement/middleeastproductmanagement/aakashneomanagement/aakashNeoMEHelper.js:164:hardcoded string:	    logger.info({ method: 'getMinimumRange', minPrice }, 'Minimum Price');
