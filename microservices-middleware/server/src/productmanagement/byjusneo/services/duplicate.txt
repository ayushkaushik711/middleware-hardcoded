microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:1:hardcoded object:const { flattenDeep, map, get, isEmpty } = require('lodash')
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:2:hardcoded object:const { NotFoundError } = require('../../../../lib/errors')
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:3:hardcoded file path:const logger = require('../../../../lib/bunyan-logger')('service.js');
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:4:hardcoded object:const { getExtensionSku } = require('../../blc/dto')
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:6:hardcoded variable:const formattedByjusClassLineItems = async (orderDetails, identifier) => {
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:7:hardcoded string:    logger.info({ method: 'formatLineItems' }, 'Checking if Order is eligible to be splitted');
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:8:hardcoded object:    const { productDetails, orderPunchingCategory, orderPunchingType } = orderDetails;
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:9:hardcoded array:    const { students = [], paymentType } = productDetails;
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:10:hardcoded string:    const { initialClass, validity } = students.length ? students[0] : '';
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:11:hardcoded object:    let lineItems = {};
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:14:hardcoded string:        const items = flattenDeep(map(students, 'items'));
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:16:hardcoded string:        logger.info("BYJUS CLASS LOGGER : " + orderPunchingCategory);
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:17:hardcoded object:        const splittedLineItems = await getLineItems({items, initialClass, paymentType, orderPunchingType, validity})
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:18:hardcoded string:        logger.info("BYJUS CLASS LOGGER : splittedLineItems : " + splittedLineItems);
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:20:hardcoded object:        const { parentLineItems, childLineItems } = splittedLineItems || {};
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:21:hardcoded number:        if (parentLineItems?.length === 0) {
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:22:hardcoded string:            throw new NotFoundError("ParentLineItems are missing!");
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:25:hardcoded string:        const orderType = childLineItems.length ? 'split_order' : 'single_order';
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:26:hardcoded string:        logger.info("%j", { method: 'formatLineItems' }, { orderType, lineItems: JSON.stringify(splittedLineItems) });
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:33:hardcoded string:        logger.info("%j", { method: 'formatLineItems', message: "Error in splitting line Items" });
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:34:hardcoded string:        throw new Error(error || "Error in splitting line Items");
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:40:hardcoded variable:const getLineItems = async (details) => {
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:41:hardcoded object:    const { items, initialClass, paymentType, orderPunchingType, validity } = details
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:44:hardcoded string:    childLineItems = items.filter(course => course.type === "service" && course.subType !== "registration"); 
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:46:hardcoded string:        const childItemIds = map(childLineItems, 'skuId');
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:48:hardcoded string:        if (!childItemIds.includes(get(item, 'skuId', ''))) {
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:53:hardcoded string:    // in case - 'quarterly_pack', 'mini_learning_program', 'TRIAL_PACK' only services are available , hence single only.
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:55:hardcoded string:        if (paymentType === 'EMI') {
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:56:hardcoded variable:            const extensionSku = await getExtensionSku(initialClass)
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:61:hardcoded array:            childLineItems = []
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:64:hardcoded string:        // } else if (orderPunchingType.toLowerCase() === 'upgrade' || 
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:65:hardcoded string:        //     ['quarterly_pack', 'mini_learning_program', 'TRIAL_PACK'].includes(validity)) { // when we already have tablet in fresh order
microservices-middleware/server/src/productmanagement/byjusneo/services/formatLineItems.js:67:hardcoded array:        //     childLineItems = []
microservices-middleware/server/src/productmanagement/byjusneo/services/userRole.js:1:hardcoded object:const { get, find } = require('lodash');
microservices-middleware/server/src/productmanagement/byjusneo/services/userRole.js:3:hardcoded variable:const getReportingEmailByRole = (user, role) => {
microservices-middleware/server/src/productmanagement/byjusneo/services/userRole.js:4:hardcoded object:    const { reportingTo = {} } = user || {};
microservices-middleware/server/src/productmanagement/byjusneo/services/userRole.js:5:hardcoded array:    const reportingConfigArray = get(reportingTo, role) || [];
microservices-middleware/server/src/productmanagement/byjusneo/services/userRole.js:7:hardcoded string:    const reportingConfig = find(reportingConfigArray, (c) => c["userType"] === "PRIMARY") || reportingConfigArray[0];
microservices-middleware/server/src/productmanagement/byjusneo/services/userRole.js:8:hardcoded string:    const emailId = get(reportingConfig, 'userEmail');
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:1:hardcoded object:const { get, flattenDeep, isArray, isNaN } = require('lodash')
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:2:hardcoded object:const { nanoid } = require('nanoid');
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:3:hardcoded object:const { getDiscountDetails } = require('./../../vouchermanagement/voucherHelper');
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:4:hardcoded object:const { productConstant } = require('./../../utils/productConstants')
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:5:hardcoded file path:const logger = require('../../../../lib/bunyan-logger')('Quarterly Pack Service');
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:6:hardcoded object:const { getReportingEmailByRole } = require('./userRole')
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:8:hardcoded object:const { isDiscountSaleApplicable } = require('./../../advanceOrderPunchingMgmnt/advanceOrderProductHelper')
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:10:hardcoded variable:const getUpdatedPrice = async (details) => {
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:11:hardcoded object:    let { req, totalPrice, paymentType, workshopChannel, loggedInMobile, students } = details;
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:12:hardcoded string:    let { tabletSku, identifier, student, accountType, productCombination, productType, couponDetails = '', updatedStudentDetails} = req.body;
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:13:hardcoded number:    let { validity, initialClass, finalClass } = student ? student : updatedStudentDetails[0];
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:16:hardcoded variable:    let maxPrice = totalPrice
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:17:hardcoded object:    let minPrice = getMinimumRange({ req, maxPrice, tabletSku, paymentType, couponDetails, productCombination, validity });
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:19:hardcoded string:    finalClass = productType === 'single' ?  initialClass : finalClass
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:20:hardcoded object:    const skuProductDetails = { initialClass, finalClass, tabletSku, maxPrice, minPrice, productCombination, productType }
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:21:hardcoded object:    const discountDetails = await getDiscountDetails({identifier, productDetails : skuProductDetails, workshopChannel, loggedInMobile, students});
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:22:hardcoded string:    const { discountedPrice, voucher = "", minimumPrice, areBonusPointsUsed = false, bonusPointsDiscount = 0 } = discountDetails;
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:35:hardcoded variable:const getFormattedBasePrice = (req, basePrice, accountType, validity) => {
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:36:hardcoded variable:    const user = req.user;
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:37:hardcoded string:    const loggedInUserRole = (get(user, 'role', '') || '');
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:39:hardcoded string:    accountType = accountType ? accountType.toUpperCase() : "";
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:40:hardcoded variable:    let formattedBasePrice = (productConstant.DECREASE_BASE_PRICE_ACCOUNT_TYPE.includes(accountType) &&
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:45:hardcoded number:    /**Rounding-off formattedBasePrice to nearest 1000 */
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:46:hardcoded string:    formattedBasePrice = validity === "TRIAL_PACK" ? (Math.floor(formattedBasePrice)) : (Math.floor(formattedBasePrice / 1000)) * 1000;
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:47:hardcoded number:    //formattedBasePrice = (Math.floor(formattedBasePrice / 1000)) * 1000;
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:51:hardcoded variable:const getMinimumRange = (productDetails) => {
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:52:hardcoded string:    logger.info({ method: 'getMinimumRange' }, 'Calculating Minimum price');
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:53:hardcoded array:    let { req, maxPrice, tabletSku, paymentType, couponDetails, productCombination, isExistingProfile, students = [], validity } = productDetails
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:54:hardcoded variable:    const user = req.user;
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:55:hardcoded variable:    const body = req.body;
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:56:hardcoded number:    const { initialClass, finalClass, validity: selVal } = students[0] || {};
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:57:hardcoded string:    const seniorManager = getReportingEmailByRole(user, 'senior_manager');
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:58:hardcoded string:    const email = (get(user, 'email', '') || '');
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:59:hardcoded string:    const featureEnableList = (get(body, 'featureEnableList', '') || '');
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:62:hardcoded object:    const { isCouponApplied } = couponDetails || {};
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:63:hardcoded array:    tabletSku = isArray(tabletSku) ? tabletSku : [tabletSku];
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:64:hardcoded variable:    const discountSaleForSenMngrs = isDiscountSaleApplicable({
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:70:hardcoded string:    const tabletTotalPrice = get(tabletSku, 'basePrice') ? get(tabletSku, 'basePrice') : 0;
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:73:hardcoded variable:    const applicablePriceForDiscount = parseInt(maxPrice) - parseInt(tabletTotalPrice)
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:76:hardcoded string:    if (paymentType === 'EMI') {
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:85:hardcoded string:        logger.info({ method: 'getMinimumRange' }, isCouponApplied, 'Decreasing price range if coupon is applied');
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:94:hardcoded string:    if(validity === "TRIAL_PACK" ){
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:99:hardcoded string:    if(validity === "TRIAL_PACK" ){
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:104:hardcoded variable:    let minPrice = applicablePriceForDiscount - (applicablePriceForDiscount * minPricePercentage);
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:106:hardcoded number:    /**Rounding-off min-price to nearest 1000 */
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:107:hardcoded string:    minPrice = validity === "TRIAL_PACK" ? (Math.floor(minPrice)): (Math.floor(minPrice / 1000)) * 1000;
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:112:hardcoded string:    logger.info({ method: 'getMinimumRange', minPrice }, 'Minimum Price');
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:119:hardcoded variable:const getSkuItemId = (product) => {
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:120:hardcoded number:    //length of itemId should be 24 characters
microservices-middleware/server/src/productmanagement/byjusneo/services/skuAndPricing.js:121:hardcoded number:    const itemId = nanoid(24)
