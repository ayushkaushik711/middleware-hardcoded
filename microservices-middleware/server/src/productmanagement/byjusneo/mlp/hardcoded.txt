microservices-middleware/server/src/productmanagement/byjusneo/mlp/controller.js:10:hardcoded variable:	const getSingleProduct = async (req, res) => {
microservices-middleware/server/src/productmanagement/byjusneo/mlp/controller.js:11:hardcoded string:	    logger.info({ method: 'getSingleProduct' }, { message: "Fetching Mlp Single Product" });
microservices-middleware/server/src/productmanagement/byjusneo/mlp/controller.js:13:hardcoded string:	    let { paymentType = 'EMI', productType, productCombination, student } = req.body;
microservices-middleware/server/src/productmanagement/byjusneo/mlp/controller.js:17:hardcoded number:	        student = isArray(student) ? student[0] : student
microservices-middleware/server/src/productmanagement/byjusneo/mlp/controller.js:19:hardcoded variable:	        const courseSku = await getCourseSku(student) 
microservices-middleware/server/src/productmanagement/byjusneo/mlp/controller.js:20:hardcoded object:	        const { formattedProducts, totalPrice } = getTotalSkuAndPrice({
microservices-middleware/server/src/productmanagement/byjusneo/mlp/controller.js:25:hardcoded object:	        const details = { req, totalPrice }
microservices-middleware/server/src/productmanagement/byjusneo/mlp/controller.js:26:hardcoded object:	        const { discountedPrice, voucher, areBonusPointsUsed, bonusPointsDiscount } = await getUpdatedPrice(details)
microservices-middleware/server/src/productmanagement/byjusneo/mlp/controller.js:29:hardcoded string:	            productType: "single",
microservices-middleware/server/src/productmanagement/byjusneo/mlp/controller.js:30:hardcoded string:	            paymentType: get(student, "paymentType"),
microservices-middleware/server/src/productmanagement/byjusneo/mlp/controller.js:34:hardcoded array:	            students: [student],
microservices-middleware/server/src/productmanagement/byjusneo/mlp/controller.js:37:hardcoded string:	            bhlpCourseDetails: get(student, "bhlpCourseDetails"),
microservices-middleware/server/src/productmanagement/byjusneo/mlp/controller.js:38:hardcoded string:	            productCombination: 'mlp',
microservices-middleware/server/src/productmanagement/byjusneo/mlp/dto.js:5:hardcoded variable:	const getCourseSku = async (student) => {
microservices-middleware/server/src/productmanagement/byjusneo/mlp/dto.js:7:hardcoded array:	    let skuArray = [];
microservices-middleware/server/src/productmanagement/byjusneo/mlp/dto.js:8:hardcoded object:	    const { initialClass, board, state, session } = student
microservices-middleware/server/src/productmanagement/byjusneo/mlp/dto.js:9:hardcoded variable:	    const grade = initialClass
microservices-middleware/server/src/productmanagement/byjusneo/mlp/dto.js:11:hardcoded variable:	    let query = {
microservices-middleware/server/src/productmanagement/byjusneo/mlp/dto.js:12:hardcoded string:	        category: "mlp",
microservices-middleware/server/src/productmanagement/byjusneo/mlp/dto.js:13:hardcoded string:	        validity: '12',
microservices-middleware/server/src/productmanagement/byjusneo/mlp/dto.js:14:hardcoded string:	        validityType: 'day',
microservices-middleware/server/src/productmanagement/byjusneo/mlp/dto.js:17:hardcoded string:	    query['board'] = await getBoard({grade, board, state})
microservices-middleware/server/src/productmanagement/byjusneo/mlp/dto.js:19:hardcoded variable:	    const streamingSku = await getStreamingSku(query)
microservices-middleware/server/src/productmanagement/byjusneo/mlp/dto.js:20:hardcoded variable:	    const liveSku = await getLiveSku(query, session)
microservices-middleware/server/src/productmanagement/byjusneo/mlp/dto.js:23:hardcoded variable:	    const courseSku = await getUpdatedCourseSku(skuArray)
microservices-middleware/server/src/productmanagement/byjusneo/mlp/dto.js:28:hardcoded variable:	const getStreamingSku = async (query) => {
microservices-middleware/server/src/productmanagement/byjusneo/mlp/dto.js:32:hardcoded string:	        subType: "streaming",
microservices-middleware/server/src/productmanagement/byjusneo/mlp/dto.js:35:hardcoded variable:	    let product = await getSalesSku(query)
microservices-middleware/server/src/productmanagement/byjusneo/mlp/dto.js:40:hardcoded variable:	const getLiveSku = async (query, session) => {
microservices-middleware/server/src/productmanagement/byjusneo/mlp/dto.js:44:hardcoded string:	        subType: "live",
microservices-middleware/server/src/productmanagement/byjusneo/mlp/dto.js:46:hardcoded object:	    let includeQuery = { where: { frequency : `${session}` }}
microservices-middleware/server/src/productmanagement/byjusneo/mlp/dto.js:47:hardcoded variable:	    let product = await getSalesSkuWithAttribute(query, includeQuery)
microservices-middleware/server/src/productmanagement/byjusneo/mlp/routes.js:6:hardcoded object:	const router = Router({ mergeParams: true });
microservices-middleware/server/src/productmanagement/byjusneo/mlp/routes.js:11:hardcoded string:	    router.route('/neo/product/mlp')
