microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:1:hardcoded object:const { isEmpty, isArray, get, flattenDeep } = require('lodash');
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:2:hardcoded object:const { BadRequestError } = require('../../../../lib/errors');
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:3:hardcoded file path:const logger = require('../../../../lib/bunyan-logger')('Quarterly Pack DTO');
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:5:hardcoded object:const { getCourseSku } = require('./dto')
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:6:hardcoded object:const { getUpdatedPrice } = require('./../services/skuAndPricing')
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:7:hardcoded object:const { getTotalSkuAndPrice } = require('../../../productmanagement/service/totalSkusPrice')
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:8:hardcoded object:const { getUpdatedStudentDetails } = require('./../assembler')
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:9:hardcoded object:const { sortStudentArrayOnClasses, getSiblingSkuPrice } = require('../../../productmanagement/siblingHelper')
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:11:hardcoded variable:const getSingleProduct = async (req, res) => {
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:12:hardcoded string:    logger.info({ method: 'getSingleProduct' }, { message: "Fetching Single Product" });
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:14:hardcoded string:    let { paymentType = "EMI", productType, productCombination, student, workshopChannel, loggedInMobile } = req.body;
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:18:hardcoded number:        student = isArray(student) ? student[0] : student
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:20:hardcoded variable:        const courseSku = await getCourseSku(student) 
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:21:hardcoded object:        const { formattedProducts, totalPrice } = getTotalSkuAndPrice({
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:26:hardcoded object:        const details = { req, totalPrice, workshopChannel, loggedInMobile }
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:27:hardcoded object:        const { maxPrice, minPrice, discountedPrice, voucher, areBonusPointsUsed, bonusPointsDiscount } = await getUpdatedPrice(details)
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:30:hardcoded string:            productType: "single",
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:31:hardcoded string:            paymentType: get(student, "paymentType"),
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:36:hardcoded array:            students: [student],
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:39:hardcoded string:            bhlpCourseDetails: get(student, "bhlpCourseDetails"),
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:49:hardcoded variable:const getComboProduct = async (req, res) => {
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:50:hardcoded string:    logger.info({ method: 'getSingleProduct' }, { message: "Fetching Single Product" });
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:52:hardcoded string:    let { paymentType = "EMI", productType, productCombination, student, workshopChannel, loggedInMobile } = req.body;
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:56:hardcoded number:        student = isArray(student) ? student[0] : student
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:57:hardcoded variable:        const courseSku = await getCourseSku(student)
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:58:hardcoded object:        const { formattedProducts, totalPrice } = getTotalSkuAndPrice({courseSku})
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:60:hardcoded object:        const details = { req, totalPrice, workshopChannel, loggedInMobile }
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:61:hardcoded object:        const { maxPrice, minPrice, discountedPrice, voucher, areBonusPointsUsed, bonusPointsDiscount } = await getUpdatedPrice(details)
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:63:hardcoded string:            productType: "combo",
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:64:hardcoded string:            paymentType: get(student, "paymentType"),
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:69:hardcoded array:            students: [student],
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:72:hardcoded string:            bhlpCourseDetails: get(student, "bhlpCourseDetails"),
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:83:hardcoded variable:const getSiblingProduct = async (req, res) => {
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:84:hardcoded array:    let siblingSkuArray = []
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:85:hardcoded array:    let formattedProducts = []
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:86:hardcoded array:    let typesOfCombinations = []
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:87:hardcoded string:    let { paymentType = "EMI", productType, student: studentArray, productCombination, workshopChannel, loggedInMobile } = req.body;
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:92:hardcoded number:        for (let i = 0; i < studentArray.length; i++) {
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:93:hardcoded array:            const { productLearningType } = studentArray[i]
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:95:hardcoded string:            bhlpCourseDetails = get(studentArray[i], "bhlpCourseDetails", []);
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:96:hardcoded array:            const courseSku = await getCourseSku(studentArray[i], i)
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:97:hardcoded object:            const { formattedProducts } = getTotalSkuAndPrice({courseSku})
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:98:hardcoded array:            studentArray[i] = await getUpdatedStudentDetails(studentArray[i], formattedProducts)
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:102:hardcoded object:        const { updatedSkuPrice } = getSiblingSkuPrice({ skuArray: formattedProducts, typesOfCombinations, productCombination: req.body.productCombination });
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:103:hardcoded object:        const details = { req, totalPrice: updatedSkuPrice, workshopChannel, loggedInMobile, students: studentArray }
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:104:hardcoded object:        const { maxPrice, minPrice, discountedPrice, voucher, areBonusPointsUsed, bonusPointsDiscount } = await getUpdatedPrice(details)
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:129:hardcoded variable:const getStreamingProduct = async (req, res) => {
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:130:hardcoded string:    logger.info({ method: 'getStreamingProduct' }, { message: "Fetching Streaming Product" });
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:132:hardcoded string:    let { paymentType = "EMI", productType, student, productCombination, workshopChannel, loggedInMobile } = req.body;
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:136:hardcoded number:        student = isArray(student) ? student[0] : student;
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:137:hardcoded variable:        const courseSku = await getCourseSku(student)
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:138:hardcoded object:        const { formattedProducts, totalPrice } = getTotalSkuAndPrice({courseSku})
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:140:hardcoded object:        const details = { req, totalPrice, workshopChannel, loggedInMobile }
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:141:hardcoded object:        const { maxPrice, minPrice, discountedPrice, voucher, areBonusPointsUsed, bonusPointsDiscount } = await getUpdatedPrice(details)
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:143:hardcoded string:            productType: "streaming",
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:144:hardcoded string:            paymentType: get(student, "paymentType"),
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:149:hardcoded array:            students: [student],
microservices-middleware/server/src/productmanagement/byjusneo/annual/controller.js:152:hardcoded string:            bhlpCourseDetails: get(student, "bhlpCourseDetails"),
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:1:hardcoded object:const { flattenDeep } = require('lodash')
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:3:hardcoded object:const { getUpdatedCourseSku } = require('./../assembler')
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:4:hardcoded object:const { getBoard } = require('../../service/boardAndState')
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:5:hardcoded object:const { getSalesSku, getPostgresTabletSku } = require('../../dto')
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:6:hardcoded object:const { getBrand } = require('../../service/brandHelper')
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:7:hardcoded number:const { getGrade, getValidity, getCategory, isK12, getSubType } = require('./helper')
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:9:hardcoded variable:const getCourseSku = async (student, siblingCount) => {
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:11:hardcoded array:    let skuArray = [];
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:12:hardcoded array:    let extensionSkus = [];
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:13:hardcoded object:    let { initialClass, tablet, tlpFinalGrade, siblingName, tabletId } = student
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:16:hardcoded object:        const { products, validity } = await getProductSku(student)
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:20:hardcoded object:        const { products, validity } = await getProductSku(student)
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:24:hardcoded object:        const tabletSku = await getPostgresTabletSku({tabletId: tablet})
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:28:hardcoded variable:    const courseSku = await getUpdatedCourseSku(skuArray, initialClass, siblingName, siblingCount, tabletId)
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:33:hardcoded variable:const getExtensionSku = async (details, validity) => {
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:34:hardcoded array:    let skuArray = [];
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:35:hardcoded string:    let { board = 'CBSE', deviceType = null, state, finalClass, tlpFinalGrade, selectD4SDCard, tablet, subCourse } = details
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:36:hardcoded number:    let grade = parseInt(finalClass) + 1;
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:38:hardcoded variable:        let query = {
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:39:hardcoded string:            grade: isK12(grade) ? '11+12' : grade.toString(),
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:42:hardcoded string:        query['board'] = await getBoard({grade, board, state})
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:43:hardcoded number:        if(grade > 10) {
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:44:hardcoded string:            query['subCourse'] = subCourse
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:46:hardcoded string:        if(deviceType === 'Streaming') {
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:47:hardcoded variable:            const streamingSku = await getStreamingSku(query)
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:50:hardcoded number:            const sdCardSku = await getSdCardSku(query, selectD4SDCard, tablet)
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:59:hardcoded variable:const getProductSku = async (details) => {
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:60:hardcoded array:    let skuArray = [];
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:61:hardcoded string:    let { initialClass, finalClass, deviceType = null, board = 'CBSE', state = null, validity, tablet, selectD4SDCard, isStreaming, productLearningType } = details
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:62:hardcoded variable:    let grade = parseInt(initialClass)
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:66:hardcoded variable:        let query = {
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:67:hardcoded string:            grade: isK12(grade) ? '11+12' : grade.toString(),
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:70:hardcoded string:        query['board'] = await getBoard({grade, board, state, isStreaming})
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:71:hardcoded string:        if(deviceType === 'Streaming') {
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:72:hardcoded variable:            const streamingSku = await getStreamingSku(query)
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:73:hardcoded variable:            const byjusClassSku = await getByjusClassSku(query)
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:76:hardcoded number:            const sdCardSku = await getSdCardSku(query, selectD4SDCard, tablet, isStreaming)
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:77:hardcoded string:            if(productLearningType === 'byjus_tlp') {
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:80:hardcoded variable:                const byjusClassSku = await getByjusClassSku(query)
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:88:hardcoded object:    return {products: skuArray, validity};
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:91:hardcoded number:const getSdCardSku = async (query, selectD4SDCard, tablet, isStreaming) => {
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:92:hardcoded variable:    let isSdCard = true;
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:98:hardcoded number:        brand: getBrand(selectD4SDCard, tablet, query)
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:101:hardcoded string:        query['board'] = null
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:104:hardcoded variable:    let product = await getSalesSku(query)
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:108:hardcoded variable:const getByjusClassSku = async (query) => {
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:109:hardcoded variable:    let isSdCard = false;
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:113:hardcoded string:        subType: "live",
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:118:hardcoded variable:    let product = await getSalesSku(query)
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:122:hardcoded variable:const getStreamingSku = async (query) => {
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:126:hardcoded string:        category: 'online_premium_app',
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:127:hardcoded string:        subType: 'streaming'
microservices-middleware/server/src/productmanagement/byjusneo/annual/dto.js:129:hardcoded variable:    let product = await getSalesSku(query)
microservices-middleware/server/src/productmanagement/byjusneo/annual/routes.js:1:hardcoded file path:const Router = require('express-promise-router');
microservices-middleware/server/src/productmanagement/byjusneo/annual/routes.js:2:hardcoded file path:const controller = require('./controller');
microservices-middleware/server/src/productmanagement/byjusneo/annual/routes.js:4:hardcoded object:const router = Router({ mergeParams: true });
microservices-middleware/server/src/productmanagement/byjusneo/annual/routes.js:9:hardcoded string:    router.route('/neo/product/singleProduct')
microservices-middleware/server/src/productmanagement/byjusneo/annual/routes.js:15:hardcoded string:    router.route('/neo/product/comboProduct')
microservices-middleware/server/src/productmanagement/byjusneo/annual/routes.js:21:hardcoded string:    router.route('/neo/product/siblingProduct')
microservices-middleware/server/src/productmanagement/byjusneo/annual/routes.js:27:hardcoded string:    router.route('/neo/product/streamingProduct')
microservices-middleware/server/src/productmanagement/byjusneo/annual/helper.js:1:hardcoded variable:const getGrade = (grade) => {
microservices-middleware/server/src/productmanagement/byjusneo/annual/helper.js:2:hardcoded number:    if(grade > 10 && grade < 12) {
microservices-middleware/server/src/productmanagement/byjusneo/annual/helper.js:3:hardcoded number:        grade = grade + 2;
microservices-middleware/server/src/productmanagement/byjusneo/annual/helper.js:5:hardcoded number:        grade = grade + 1;
microservices-middleware/server/src/productmanagement/byjusneo/annual/helper.js:10:hardcoded variable:const getValidity = (grade, validity) => {
microservices-middleware/server/src/productmanagement/byjusneo/annual/helper.js:11:hardcoded number:    if(grade > 10 && grade < 12) {
microservices-middleware/server/src/productmanagement/byjusneo/annual/helper.js:12:hardcoded number:        validity = validity + 2;
microservices-middleware/server/src/productmanagement/byjusneo/annual/helper.js:14:hardcoded number:        validity = validity + 1;
microservices-middleware/server/src/productmanagement/byjusneo/annual/helper.js:19:hardcoded variable:const getCategory = (query, isSdCard, isStreaming) => {
microservices-middleware/server/src/productmanagement/byjusneo/annual/helper.js:20:hardcoded string:    let grade = parseInt(query['grade'])
microservices-middleware/server/src/productmanagement/byjusneo/annual/helper.js:21:hardcoded string:    let category = '';
microservices-middleware/server/src/productmanagement/byjusneo/annual/helper.js:23:hardcoded string:        category = 'online_premium_app'
microservices-middleware/server/src/productmanagement/byjusneo/annual/helper.js:24:hardcoded number:    } else if(grade > 10) {
microservices-middleware/server/src/productmanagement/byjusneo/annual/helper.js:25:hardcoded string:        category = isSdCard ? 'aakash': 'aakash_neo_classes'
microservices-middleware/server/src/productmanagement/byjusneo/annual/helper.js:27:hardcoded string:        category = isSdCard ? 'btlp' : 'byjus_classes_upgrade'
microservices-middleware/server/src/productmanagement/byjusneo/annual/helper.js:32:hardcoded number:const isK12 = (grade) => {
microservices-middleware/server/src/productmanagement/byjusneo/annual/helper.js:33:hardcoded number:    if(grade > 10) {
microservices-middleware/server/src/productmanagement/byjusneo/annual/helper.js:40:hardcoded variable:const getSubType = (isStreaming) => {
microservices-middleware/server/src/productmanagement/byjusneo/annual/helper.js:41:hardcoded string:    let subType = ''
microservices-middleware/server/src/productmanagement/byjusneo/annual/helper.js:43:hardcoded string:        subType = 'streaming'
microservices-middleware/server/src/productmanagement/byjusneo/annual/helper.js:45:hardcoded string:        subType = 'sd_card'
microservices-middleware/server/src/productmanagement/byjusneo/annual/helper.js:55:hardcoded number:    isK12
