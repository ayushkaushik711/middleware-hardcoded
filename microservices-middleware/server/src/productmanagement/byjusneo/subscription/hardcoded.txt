microservices-middleware/server/src/productmanagement/byjusneo/subscription/assembler.js:4:hardcoded variable:	const getUpdatedSubscriptionSku = async (skuArray) => {
microservices-middleware/server/src/productmanagement/byjusneo/subscription/assembler.js:5:hardcoded array:	    let updatedCourseSku = []
microservices-middleware/server/src/productmanagement/byjusneo/subscription/assembler.js:8:hardcoded object:	        const { subType } = courseSku;
microservices-middleware/server/src/productmanagement/byjusneo/subscription/assembler.js:9:hardcoded string:	        if(subType == 'sd_card') {
microservices-middleware/server/src/productmanagement/byjusneo/subscription/assembler.js:10:hardcoded string:	            courseSku['price'] = NEO_SUBSCRIPTION;
microservices-middleware/server/src/productmanagement/byjusneo/subscription/controller.js:10:hardcoded variable:	const getByjusSubscription = async (req, res) => {
microservices-middleware/server/src/productmanagement/byjusneo/subscription/controller.js:11:hardcoded string:	    logger.info({ method: 'getByjusSubscription' }, { message: "Fetching Subscription Single Product" });
microservices-middleware/server/src/productmanagement/byjusneo/subscription/controller.js:13:hardcoded string:	    let { paymentType = 'EMI', productType, productCombination, student } = req.body;
microservices-middleware/server/src/productmanagement/byjusneo/subscription/controller.js:17:hardcoded number:	        student = isArray(student) ? student[0] : student
microservices-middleware/server/src/productmanagement/byjusneo/subscription/controller.js:19:hardcoded variable:	        const courseSku = await getCourseSku(student) 
microservices-middleware/server/src/productmanagement/byjusneo/subscription/controller.js:20:hardcoded object:	        const { formattedProducts, totalPrice } = getTotalSkuAndPrice({
microservices-middleware/server/src/productmanagement/byjusneo/subscription/controller.js:25:hardcoded object:	        const details = { req, totalPrice }
microservices-middleware/server/src/productmanagement/byjusneo/subscription/controller.js:26:hardcoded object:	        const { maxPrice, minPrice, discountedPrice, voucher, areBonusPointsUsed, bonusPointsDiscount } = await getUpdatedPrice(details)
microservices-middleware/server/src/productmanagement/byjusneo/subscription/controller.js:29:hardcoded string:	            productType: "single",
microservices-middleware/server/src/productmanagement/byjusneo/subscription/controller.js:30:hardcoded string:	            paymentType: get(student, "paymentType"),
microservices-middleware/server/src/productmanagement/byjusneo/subscription/controller.js:34:hardcoded array:	            students: [student],
microservices-middleware/server/src/productmanagement/byjusneo/subscription/controller.js:37:hardcoded string:	            bhlpCourseDetails: get(student, "bhlpCourseDetails"),
microservices-middleware/server/src/productmanagement/byjusneo/subscription/dto.js:6:hardcoded variable:	const getCourseSku = async (student) => {
microservices-middleware/server/src/productmanagement/byjusneo/subscription/dto.js:8:hardcoded array:	    let skuArray = [];
microservices-middleware/server/src/productmanagement/byjusneo/subscription/dto.js:9:hardcoded object:	    const { initialClass, board, state, validity, tablet, yearSelection } = student
microservices-middleware/server/src/productmanagement/byjusneo/subscription/dto.js:10:hardcoded variable:	    const grade = initialClass
microservices-middleware/server/src/productmanagement/byjusneo/subscription/dto.js:12:hardcoded variable:	    let query = {
microservices-middleware/server/src/productmanagement/byjusneo/subscription/dto.js:15:hardcoded string:	    query['board'] = await getBoard({grade, board, state})
microservices-middleware/server/src/productmanagement/byjusneo/subscription/dto.js:17:hardcoded variable:	    const tlpSku = await getSdCardSku(query, yearSelection)
microservices-middleware/server/src/productmanagement/byjusneo/subscription/dto.js:18:hardcoded variable:	    const byjusClassSku = await getSubscriptionSku(query)
microservices-middleware/server/src/productmanagement/byjusneo/subscription/dto.js:19:hardcoded object:	    const tabletSku = await getPostgresTabletSku({tabletId: tablet})
microservices-middleware/server/src/productmanagement/byjusneo/subscription/dto.js:22:hardcoded variable:	    const courseSku = await getUpdatedSubscriptionSku(skuArray)
microservices-middleware/server/src/productmanagement/byjusneo/subscription/dto.js:27:hardcoded variable:	const getSdCardSku = async (query, validity) => {
microservices-middleware/server/src/productmanagement/byjusneo/subscription/dto.js:31:hardcoded string:	        category: "btlp",
microservices-middleware/server/src/productmanagement/byjusneo/subscription/dto.js:33:hardcoded string:	        subType: "sd_card",
microservices-middleware/server/src/productmanagement/byjusneo/subscription/dto.js:37:hardcoded variable:	    let product = await getSalesSku(query)
microservices-middleware/server/src/productmanagement/byjusneo/subscription/dto.js:41:hardcoded variable:	const getSubscriptionSku = async (query) => {
microservices-middleware/server/src/productmanagement/byjusneo/subscription/dto.js:45:hardcoded string:	        category: "byjus_classes",
microservices-middleware/server/src/productmanagement/byjusneo/subscription/dto.js:46:hardcoded string:	        validity: "1",
microservices-middleware/server/src/productmanagement/byjusneo/subscription/dto.js:47:hardcoded string:	        subType: "subscription",
microservices-middleware/server/src/productmanagement/byjusneo/subscription/dto.js:48:hardcoded string:	        validityType: "month"
microservices-middleware/server/src/productmanagement/byjusneo/subscription/dto.js:51:hardcoded variable:	    let product = await getSalesSku(query)
microservices-middleware/server/src/productmanagement/byjusneo/subscription/routes.js:4:hardcoded object:	const router = Router({ mergeParams: true });
microservices-middleware/server/src/productmanagement/byjusneo/subscription/routes.js:9:hardcoded string:	    router.route('/neo/product/subscription')
