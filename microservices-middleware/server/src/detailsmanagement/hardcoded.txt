microservices-middleware/server/src/detailsmanagement/detailsHelper.js:7:hardcoded string:	const { Employee: PgEmployee } = require('@byjus-orders/npgexemplum')
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:8:hardcoded string:	const { DraftOrder, OrderhiveSalesperson: OrderhiveSalesPerson, PremiumAccount } = require('@byjus-orders/nexemplum/oms');
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:19:hardcoded variable:	const logger = bunyan.createLogger({
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:20:hardcoded string:	    name: 'SalesPersonDetail helper',
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:21:hardcoded environment variable:	    env: process.env.NODE_ENV,
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:26:hardcoded variable:	const getContactIdFromOH = async (customerDetails) => {
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:27:hardcoded object:	    const { email } = customerDetails;
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:28:hardcoded variable:	    let contactId = null;
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:31:hardcoded variable:	        const payload = {
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:32:hardcoded string:	            "method": "contacts",
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:33:hardcoded string:	            "tokenId": get(config, 'orderhive.token'),
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:34:hardcoded string:	            "tenantId": get(config, 'orderhive.tenantId'),
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:35:hardcoded string:	            "term": email,
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:36:hardcoded string:	            "searchBy": "email"
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:42:hardcoded string:	         * Ex: for "manju@gfmail.com" , it returns kumar.manju@gmail.com / sri.manju@gmail.com
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:45:hardcoded variable:	        const apiResponse = await callOrderhiveApi(payload);
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:47:hardcoded array:	        const { status, contacts = [] } = apiResponse;
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:50:hardcoded string:	            contactId = get(contacts[0], 'contactId', null);
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:58:hardcoded variable:	const getLeadEvaluationDetails = async (leadDetails, directSalesBy) => {
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:59:hardcoded variable:	    let isEligibleForEvalution = true;
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:60:hardcoded string:	    const directSalesByRole = await Employee.findOne({ email: directSalesBy }).select('role');
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:61:hardcoded string:	    if (!adminLeadAccounts.includes(get(leadDetails, "createdByEmailId", "")) && directSalesByRole === "bdt") {
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:67:hardcoded variable:	const getUpdatedSalesDetails = async (salesDetails, omsConfig, loggedInUserDetails) => {
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:68:hardcoded object:	    const { email } = loggedInUserDetails || {};
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:70:hardcoded string:	    const seniorManagerConfig = find(omsConfig, (config) => config["type"] === "senior_manager_live") || {};
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:71:hardcoded variable:	    let isOmsOrderEligible = false;
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:73:hardcoded object:	    const { directSalesBy, salesAppointmentBy } = salesDetails;
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:74:hardcoded string:	    const directSalesByDetails = await Employee.findOne({ email: directSalesBy }).select('email campaign role reportingTo country department');
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:75:hardcoded string:	    const salesAppointmentByDetails = await Employee.findOne({ email: salesAppointmentBy }).select('email campaign role reportingTo department');
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:76:hardcoded string:	    const loggedInUserFullDetails = await Employee.findOne({ email: salesAppointmentBy }).select('email campaign role reportingTo department');
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:77:hardcoded string:	    const directSalesByPgData = directSalesBy && await PgEmployee.findOne({ where: { email: directSalesBy }, attributes: ['email', 'department', 'subDepartment'] });
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:78:hardcoded string:	    const salesAppointmentByPgData = salesAppointmentBy && await PgEmployee.findOne({ where: { email: salesAppointmentBy }, attributes: ['email', 'department', 'subDepartment'] });
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:79:hardcoded object:	    const { department, subDepartment } = loggedInUserFullDetails || {};
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:80:hardcoded object:	    console.log(`LoggedIn-${email} belongs to ${department}-${subDepartment}`);
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:84:hardcoded object:	    // const { reportingTo } = directSalesByDetails || {};
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:85:hardcoded array:	    // const { senior_manager = [], senior_bdtm = [], agm = [], gm = [] } = reportingTo || {};
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:86:hardcoded string:	    // const primarySM = !isEmpty(senior_manager) ? get(senior_manager, '0.userEmail', '').toLowerCase() : "";
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:87:hardcoded string:	    // const primarySBdtm = !isEmpty(senior_bdtm) ? get(senior_bdtm, '0.userEmail', '').toLowerCase() : "";
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:88:hardcoded string:	    // const primaryAgm = !isEmpty(agm) ? get(agm, '0.userEmail', '').toLowerCase() : "";
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:89:hardcoded string:	    // const primaryGm = !isEmpty(gm) ? get(gm, '0.userEmail', '').toLowerCase() : "";
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:91:hardcoded string:	    // const seniorManagersArray = get(seniorManagerConfig, 'seniorManagers', []);
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:94:hardcoded string:	    console.log("isOmsOrderEligible", isOmsOrderEligible);
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:96:hardcoded object:	    const { reportingTo } = directSalesByDetails || {};
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:97:hardcoded array:	    const { team_manager = [], bdtm = [], senior_manager = [] } = reportingTo || {};
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:98:hardcoded string:	    if (["development", "local"].includes(process.env.NODE_ENV)) {
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:101:hardcoded string:	            directSalesByCampaign: directSalesByDetails ? directSalesByDetails.campaign : "",
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:102:hardcoded string:	            salesAppointmentByCampaign: salesAppointmentByDetails ? salesAppointmentByDetails.campaign : "",
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:103:hardcoded string:	            directSalesByRole: directSalesByDetails ? directSalesByDetails.role : "",
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:104:hardcoded string:	            directSalesByDept: directSalesByPgData ? directSalesByPgData.department : "",
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:105:hardcoded string:	            directSalesByCountry: directSalesByDetails ? directSalesByDetails.country : "",
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:106:hardcoded string:	            directSalesByTeamManager: get(team_manager, "0.userEmail", ""),
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:107:hardcoded string:	            directSalesByBDTM: get(bdtm[0], "userEmail", ""),
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:108:hardcoded string:	            directSalesBySeniorManager: get(senior_manager, "0.userEmail", ""),
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:109:hardcoded string:	            salesAppointmentByRole: salesAppointmentByDetails ? salesAppointmentByDetails.role : "",
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:110:hardcoded string:	            salesAppointmentByDept: salesAppointmentByPgData ? salesAppointmentByPgData.department : "",
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:116:hardcoded string:	            directSalesByCampaign: directSalesByDetails ? directSalesByDetails.campaign : "",
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:117:hardcoded string:	            salesAppointmentByCampaign: salesAppointmentByDetails ? salesAppointmentByDetails.campaign : "",
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:118:hardcoded string:	            directSalesByRole: directSalesByDetails ? directSalesByDetails.role : "",
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:119:hardcoded string:	            directSalesByCountry: directSalesByDetails ? directSalesByDetails.country : "",
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:120:hardcoded string:	            directSalesByTeamManager: get(team_manager, "0.userEmail", ""),
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:121:hardcoded string:	            directSalesByBDTM: get(bdtm[0], "userEmail", ""),
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:122:hardcoded string:	            directSalesBySeniorManager: get(senior_manager, "0.userEmail", ""),
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:123:hardcoded string:	            salesAppointmentByRole: salesAppointmentByDetails ? salesAppointmentByDetails.role : "",
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:130:hardcoded variable:	const checkIfCashbackLockedWithDiffDraftOrder = async (customerDetails) => {
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:132:hardcoded object:	        const { parentMobileNo, studentMobileNo } = customerDetails;
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:133:hardcoded array:	        const uniqueOwners = uniq([parentMobileNo, studentMobileNo]).filter(ele => ele);
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:134:hardcoded array:	        const lockedErrors = [];
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:139:hardcoded object:	                const cashbackDoc = await Cashback.findOne({ mobileNo: owner }).lean();
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:141:hardcoded object:	                    const { cashbackCode } = cashbackDoc;
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:142:hardcoded variable:	                    const draftOrder = await DraftOrder.findOne({
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:143:hardcoded string:	                        'status': { "$nin": ["soft_approved", "order_created", "errored", "approval_pending"] },
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:145:hardcoded string:	                            { 'cashbackDetails.cashbackCode': cashbackCode },
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:146:hardcoded string:	                            { 'paymentDetails.unutilizedCashbacks.cashbackCode': cashbackCode }
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:151:hardcoded string:	                        const { prospectId } = get(draftOrder, 'leadDetails');
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:156:hardcoded string:	                            identifier: get(draftOrder, '_id')
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:164:hardcoded string:	        logger.error({ method: "checkIfCashbackLockedWithDiffDraftOrder", error });
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:165:hardcoded string:	        throw new Error(error || 'Error in checking cashback validation');
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:169:hardcoded variable:	const getContactDetails = (leadDetails, customerDetails) => {
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:170:hardcoded variable:	    const contactDetails = [{
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:171:hardcoded number:	        source: `ls_17139`,
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:172:hardcoded string:	        contacts: uniq([get(leadDetails, "phoneOn17139"), get(leadDetails, "mobileOn17139")].filter(ele => ele))
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:174:hardcoded number:	        source: `ls_24692`,
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:175:hardcoded string:	        contacts: uniq([get(leadDetails, "phoneOn24692"), get(leadDetails, "mobileOn24692")].filter(ele => ele))
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:177:hardcoded string:	        source: "middleware",
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:178:hardcoded string:	        contacts: uniq([get(customerDetails, "studentMobileNo"), get(customerDetails, "parentMobileNo")].filter(ele => ele))
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:183:hardcoded variable:	const validateSalesDetails = async (salesDetails, orderPunchingType, leadDetails) => {
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:184:hardcoded string:	    let { directSalesBy, salesAppointmentBy, directSalesById = "" } = salesDetails;
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:186:hardcoded object:	    let errors = {};
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:189:hardcoded string:	    if (['TLP_TO_HLP_ORDER', 'REPUNCH_ORDER_TYPE', "TRIAL_PACK_TO_BYJUS_CLASSES", "RENEWAL_ORDER", "TLP_TO_BYJUS_MATH_ORDER", "TLP_TO_BLC_ORDER", "BYJUS_CLASSES_TO_BLC_ORDER"].includes(orderPunchingType)) {
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:190:hardcoded string:	        const salesDoc = await OrderhiveSalesPerson.findOne({ userId: directSalesById }).select("username").lean();
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:191:hardcoded string:	        const salesAppointmentDoc = salesAppointmentBy ? await OrderhiveSalesPerson.findOne({ userId: salesAppointmentBy }).select("username").lean() : {};
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:192:hardcoded string:	        directSalesBy = get(salesDoc, "username", "");
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:193:hardcoded string:	        salesAppointmentBy = get(salesAppointmentDoc, "username", "");
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:194:hardcoded string:	        salesDetails['directSalesBy'] = directSalesBy;
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:195:hardcoded string:	        const salesDocUpgrade = await PgEmployee.findOne({ where: { email: directSalesById }, attributes: ['email'] })
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:196:hardcoded string:	        const email = get(salesDocUpgrade, "email", "");
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:197:hardcoded string:	        salesDetails['directSalesBy'] = email;
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:202:hardcoded variable:	const checkSPInOH = async (email) => {
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:204:hardcoded variable:	        const payload = {
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:205:hardcoded string:	            "method": "sales_person",
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:206:hardcoded string:	            "tokenId": get(config, 'orderhive.token'),
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:207:hardcoded string:	            "tenantId": get(config, 'orderhive.tenantId'),
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:208:hardcoded string:	            "term": email
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:210:hardcoded variable:	        const apiResponse = await callOrderhiveApi(payload);
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:212:hardcoded object:	        const { status, users } = apiResponse || {};
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:215:hardcoded variable:	            const userDetails = users.find(user => user.username === email);
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:216:hardcoded string:	            const { lead_square_user = false, active = "0" } = userDetails || {};
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:229:hardcoded string:	        logger.error({ method: "checkSPInOH", error });
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:234:hardcoded variable:	const createContactInOH = async (salesDetails, customerDetails) => {
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:236:hardcoded variable:	        const payload = {
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:237:hardcoded string:	            "method": "create_customer",
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:238:hardcoded string:	            "tokenId": get(config, 'orderhive.token'),
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:239:hardcoded string:	            "tenantId": get(config, 'orderhive.tenantId'),
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:240:hardcoded string:	            "name": get(customerDetails, 'parentName', '') || "testAPI",
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:241:hardcoded string:	            "email": get(customerDetails, 'email'),
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:242:hardcoded string:	            "contact": get(customerDetails, 'parentMobileNo'),
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:243:hardcoded string:	            "student_contact_no": get(customerDetails, 'studentMobileNo'),
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:244:hardcoded string:	            "parent_name": get(customerDetails, 'parentName'),
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:245:hardcoded string:	            "sales_person_id": get(salesDetails, 'directSalesById'),
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:249:hardcoded variable:	        const apiResponse = await callOrderhiveApi(payload);
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:250:hardcoded string:	        logger.info({ method: "createContactInOH", "email": get(customerDetails, 'email'), payload, apiResponse });
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:252:hardcoded object:	        const { status, contact = {}, message } = apiResponse;
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:253:hardcoded object:	        let { contactId } = status ? contact : {};
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:258:hardcoded string:	            throw new Error(message || `Error in creating contact - ${get(customerDetails, 'email')} in OH. Please try again.`);
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:261:hardcoded string:	        logger.error({ method: 'createContactInOH', error });
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:262:hardcoded string:	        throw new Error(error || `Error in creating contact - ${get(customerDetails, 'email')} in OH. Please try again.`);
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:266:hardcoded variable:	const createContact = async (customerDetails) => {
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:267:hardcoded object:	    const { studentName, studentMobileNo, parentName, parentMobileNo, email } = customerDetails;
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:269:hardcoded string:	    const isContactExists = await callNucleusApi(`contactmanagement/contact/getDetails`, 'POST', { phone: parentMobileNo });
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:272:hardcoded variable:	        const payload = {
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:287:hardcoded string:	        const response = await callNucleusApi(`contactmanagement/contact/create`, 'POST', payload);
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:289:hardcoded object:	        console.log(`${parentMobileNo} Contact created`, response);
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:292:hardcoded object:	        console.log(`${parentMobileNo} Contact already exists`);
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:296:hardcoded variable:	const meOrderPunchingType = async (updatedSalesDetails, orderPunchingType) => {
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:297:hardcoded string:	    const { directSalesByCountry = "" } = updatedSalesDetails
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:298:hardcoded string:	    if (["uae", "UAE"].includes(directSalesByCountry.toLowerCase())) {
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:299:hardcoded string:	        orderPunchingType = "MIDDLEEAST_ORDER"
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:304:hardcoded variable:	const getOrgFormattedName = async (orderPunchingType) => {
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:305:hardcoded string:	    let orgFormattedName = "byjus"
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:306:hardcoded string:	    if (["MIDDLEEAST_ORDER"].includes(orderPunchingType)) {
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:307:hardcoded string:	        orgFormattedName = "more_ideas"
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:308:hardcoded string:	    } else if (["AAKASH_REGISTRATION_ORDER", "AAKASH_ADMISSION_ORDER"].includes(orderPunchingType)) {
microservices-middleware/server/src/detailsmanagement/detailsHelper.js:309:hardcoded string:	        orgFormattedName = "aakash"
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:8:hardcoded string:	const { Employee: PgEmployee } = require('@byjus-orders/npgexemplum')
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:9:hardcoded string:	const { DraftOrder, OrderhiveSalesperson: OrderhiveSalesPerson, UsedMobile, PremiumAccount, LeadoOrder: Order } = require('@byjus-orders/nexemplum/oms');
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:28:hardcoded variable:	const logger = bunyan.createLogger({
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:29:hardcoded string:	  name: 'SalesPersonDetail controller',
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:30:hardcoded environment variable:	  env: process.env.NODE_ENV,
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:36:hardcoded variable:	const getSalesPersonDetails = async (req, res) => {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:38:hardcoded object:	    let filter = Object.assign({}, req.body.filter);
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:39:hardcoded array:	    let list = [];
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:40:hardcoded number:	    let totalCount = 0;
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:41:hardcoded object:	    const {field, accountNumber} = req.body;
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:43:hardcoded string:	    if(USER_ROLES_TO_FREEZE_SALESDONEBY.includes(req.user.role) && field !== "salesAppointmentBy" && accountNumber !== "24694"){
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:44:hardcoded string:	      filter["username"] = {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:46:hardcoded string:	        $options: "i",
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:50:hardcoded string:	    filter['username'] = filter['username'] ? filter['username'] : { "$regex": "", "$options": "i" };
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:51:hardcoded string:	    const splitFilter = filter['username']["$regex"]?.split('*')
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:52:hardcoded string:	    const username = get(splitFilter, '0', '').substring(0, get(splitFilter, '0', '').length - 1)
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:53:hardcoded string:	    const domain = get(splitFilter, '1', '').replace(/[^0-9A-Z]+/gi, "")
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:55:hardcoded string:	    let { reporters: reporteeList = {} } = !(req?.user?.permissions.includes("ORDER_OTP_IGNORE_CHECK")
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:56:hardcoded string:	      || ["bda", "bdt"].includes(req?.user?.role || "")) && await getReporteesList(req.user.email);
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:59:hardcoded variable:	    let employeeFilter = {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:61:hardcoded array:	        [Op.in]: allowedOpSubDepartments
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:64:hardcoded array:	        [Op.like]: `%${domain}%`,
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:65:hardcoded array:	        [Op.iLike]: `%${username}%`
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:67:hardcoded string:	      status: 'active'
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:70:hardcoded string:	    if(!isEmpty(reporteeList) && field !== 'salesAppointmentBy' && accountNumber !== "24694") {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:76:hardcoded array:	          [Op.in]: reporteeList
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:81:hardcoded number:	    const { docs = [], total = 0 } = await PgEmployee.paginate({
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:83:hardcoded string:	      attributes: ['id', 'email'],
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:84:hardcoded number:	      paginate: 50
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:86:hardcoded variable:	    const formattedData = docs.map(ele => {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:101:hardcoded string:	    logger.error({ method: 'getSalesPersonDetails', error }, 'Error occured');
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:102:hardcoded number:	    return res.status(500).json({
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:103:hardcoded number:	      statusCode: 500,
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:105:hardcoded string:	        response: 'Error while getting data from db.',
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:113:hardcoded variable:	const saveSalesAndCustomerDetails = async (req, res) => {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:115:hardcoded string:	    let { salesDetails, customerDetails, leadDetails, identifier, orderPunchingType = "", omsConfig = {}, loggedInUserDetails = {}, forceCreate, checkNumForDuplicacy } = req.body;
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:116:hardcoded string:	    const { email } = get(req, 'user', {});
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:118:hardcoded string:	      throw new BadRequestError("Parameter missing");
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:124:hardcoded variable:	    const salesDetailsValidation = await validateSalesDetails(salesDetails, orderPunchingType, leadDetails);
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:126:hardcoded number:	      return res.status(400).json(salesDetailsValidation);
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:131:hardcoded variable:	    const lockedErrors = await checkIfCashbackLockedWithDiffDraftOrder(customerDetails);
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:133:hardcoded number:	      return res.status(400).json({ lockedErrors });
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:137:hardcoded string:	    const orderApproval = isDevEnv && await getOrderApprovalStatus(salesDetails) || "not_applicable";
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:139:hardcoded object:	    let draftOrder = {};
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:140:hardcoded string:	    let orgFormattedName = "byjus"
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:142:hardcoded string:	    const { errors = {}, status = false, duplicateReasonRequired = false} = await verifyContactUniqueness({ user: get(req, "user", {}), customerDetails, leadDetails });
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:145:hardcoded variable:	      const updatedSalesDetails = await getUpdatedSalesDetails(salesDetails, omsConfig, loggedInUserDetails);
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:146:hardcoded string:	      const directSalesBy = get(updatedSalesDetails, "directSalesBy", "");
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:147:hardcoded string:	      const salesAppointmentBy = get(updatedSalesDetails, "salesAppointmentBy", "");
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:148:hardcoded string:	      const isTestOrder = ((directSalesBy == "sanjay.karkera@byjus.com") || ((directSalesBy == "hareesh.c@byjus.com") && ["local", "development"].includes(process.env.NODE_ENV))) ? true : false;
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:150:hardcoded string:	      if (get(updatedSalesDetails, 'isOmsOrderEligible')) {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:154:hardcoded string:	      leadDetails["isLeadMobileUsed"] = get(leadDetails, "studentMobile", "").split(",")[0] === get(customerDetails, "parentMobileNo", "");
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:155:hardcoded string:	      const isEligibleForEvalution = await getLeadEvaluationDetails(leadDetails, get(salesDetails, "directSalesBy", ""));
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:156:hardcoded string:	      leadDetails["isEligibleForEvalution"] = isEligibleForEvalution;
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:157:hardcoded string:	      leadDetails["loggedInRole"] = get(leadDetails, "orderPunchedByRole", "");
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:161:hardcoded object:	      const { customerId, customerType } = await getDraftCustomerId(customerDetails, leadDetails, forceCreate);
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:167:hardcoded variable:	      const alternateMobile = {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:168:hardcoded string:	        mobile: get(customerDetails, "alternateMobileNo", ""),
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:169:hardcoded string:	        relation: "self"
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:171:hardcoded string:	      customerDetails["alternateMobileNo"] = [alternateMobile];
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:173:hardcoded variable:	      const comments = getSalesComments(email,directSalesBy,salesAppointmentBy);
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:175:hardcoded variable:	      const updateData = {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:176:hardcoded string:	        isOmsOrder: get(updatedSalesDetails, 'isOmsOrderEligible', false),//to track oms orders in Draft order worker
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:180:hardcoded string:	        status: "details_saved",
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:182:hardcoded array:	        [`actionDetails.detailsSavedAt`]: new Date(),
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:183:hardcoded array:	        [`actionDetails.detailsSavedBy`]: email,
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:189:hardcoded string:	        source: 'kart',
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:195:hardcoded object:	        await DraftOrder.findOneAndUpdate({ _id: identifier }, {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:202:hardcoded variable:	        const newOrder = new DraftOrder({
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:218:hardcoded variable:	      const errorDetails = {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:222:hardcoded number:	      return res.status(403).json(errorDetails);
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:225:hardcoded string:	    logger.error({ method: 'getSalesPersonDetails', error }, 'Error occured');
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:230:hardcoded object:	const checkRepunchingEligibility = ({ orders, prospectId, studentMobileNo, accountNumber, orderPunchingCategory, orderPunchingType }) => {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:231:hardcoded string:	  const { leadsquaredProspectId = "" } = orders;
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:232:hardcoded object:	  const { createdAt } = orders;
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:233:hardcoded object:	  const { createdSource } = orders;
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:235:hardcoded object:	  const eligibilityError = {};
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:236:hardcoded string:	  const prospectIdErrorMessage = "This Phone number is already used to punch an order on another Lead. Please verify this is a genuine phone number before proceeding"
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:237:hardcoded string:	  const phoneNumberErrorMessage = "This Lead ID has an order punched with a different mobile number. Please verify the new phone number is genuine before proceeding"
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:238:hardcoded variable:	  let ignoreProspectIdCheck = false;
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:239:hardcoded number:	  const is2kTrialOrder = checkIf2kTrialOrder({ order: orders })
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:241:hardcoded string:	  if (allowOpcForUpsell.includes(orderPunchingCategory) || is2kTrialOrder || orderPunchingType === "corporate_order") {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:243:hardcoded string:	  } else if ( orderPunchingType == 'bep' && accountNumber === "24693") {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:246:hardcoded string:	  else if (createdSource != 'OH' && (prospectId !== leadsquaredProspectId && leadsquaredProspectId !== "")) {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:249:hardcoded string:	  } else if (createdSource != 'OH') {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:250:hardcoded array:	    const { customerDetails = [] } = orders;
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:253:hardcoded number:	    for (let j = 0; j < customerDetails.length; j++) {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:254:hardcoded string:	      const studentMobileDb = get(customerDetails[j], "studentMobile", "");
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:255:hardcoded string:	      if (studentMobileDb != studentMobileNo.trim() && studentMobileDb != "") {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:269:hardcoded variable:	const getCustomerDetails = async (req, res) => {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:271:hardcoded object:	    let { customerDetails, leadDetails } = req.body;
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:272:hardcoded variable:	    const resp = await getDraftCustomerId(customerDetails, leadDetails)
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:273:hardcoded number:	    return res.status(200).json(resp)
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:275:hardcoded string:	    logger.error({ method: 'getCustomerDetails', error }, 'Error occured');
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:280:hardcoded variable:	const verifyContactUniqueness = async (params) => {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:281:hardcoded object:	  const { user, customerDetails, leadDetails } = params;
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:282:hardcoded string:	  const { prospectId = "", studentMobile = "", accountNumber = "" } = leadDetails;
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:283:hardcoded object:	  const { parentMobileNo, studentMobileNo } = customerDetails;
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:284:hardcoded string:	  const userPermissions = get(user, "permissions", []);
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:285:hardcoded string:	  const vertical = snakeCase(get(user, "vertical", "")) || "";
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:286:hardcoded variable:	  const ignoreMobileCheck = userPermissions.includes(detailsPermissions.ignorePhoneDuplicityCheck);
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:288:hardcoded string:	  if (MOBILE_AND_EMAIL_ERROR_INDEPENDENT_TEAMS(vertical) || ["24693"].includes(accountNumber) || ignoreMobileCheck) {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:296:hardcoded string:	    throw new BadRequestError("Missing customer details");
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:299:hardcoded variable:	  const filterQuery = {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:301:hardcoded object:	      { leadsquaredProspectId: prospectId }
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:303:hardcoded string:	    "customerDetails.productInfo.validity": {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:304:hardcoded string:	      $not: { $regex: "trial", $options: "i" }
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:306:hardcoded string:	    orderPunchingType: { $nin: ["corporate_order", "bep"] },
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:308:hardcoded number:	      $gte: new Date( new Date().getTime() - MIN_DAYS_TO_ALLOW_ORDER_PUNCHING * 24 * 60 * 60 * 1000 )
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:310:hardcoded object:	    orderId: { $exists: true },
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:311:hardcoded string:	    orderhiveOrderStatus: { $nin: ["cancelled"] },
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:312:hardcoded string:	    orderPunchingCategory: { $nin: ["mlp"] },
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:317:hardcoded string:	      { "customerDetails.studentMobile": studentMobile.trim() },
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:318:hardcoded string:	      { "customerDetails.parentMobile": parentMobileNo.trim() }
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:321:hardcoded variable:	  const order = await Order.exists(filterQuery);
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:325:hardcoded string:	    errors: order ? {studentMobileNo : 'Primary mobile number already exists'} : null,
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:331:hardcoded variable:	const checkSPInOH = async (email) => {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:333:hardcoded variable:	    const payload = {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:334:hardcoded string:	      "method": "sales_person",
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:335:hardcoded string:	      "tokenId": get(config, 'orderhive.token'),
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:336:hardcoded string:	      "tenantId": get(config, 'orderhive.tenantId'),
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:337:hardcoded string:	      "term": email
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:339:hardcoded variable:	    const apiResponse = await callOrderhiveApi(payload);
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:341:hardcoded object:	    const { status, users } = apiResponse || {};
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:344:hardcoded variable:	      const userDetails = users.find(user => user.username === email);
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:345:hardcoded string:	      const { lead_square_user = false, active = "0" } = userDetails || {};
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:358:hardcoded string:	    logger.error({ method: "checkSPInOH", error });
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:363:hardcoded variable:	const getOrderDetails = async (req, res) => {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:364:hardcoded object:	  let { orderId, studentMobile } = req.body;
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:365:hardcoded string:	  studentMobile = studentMobile.split('-')[1]; //To take the mobile no without country code
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:368:hardcoded string:	    if (!orderId && !studentMobile) throw new Error('orderId or studentMobile is required');
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:369:hardcoded variable:	    const orderData = await Order.find({
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:370:hardcoded string:	      "$or": [
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:372:hardcoded string:	          'orderId': orderId,
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:373:hardcoded string:	          'orderhiveOrderStatus': { "$nin": ["cancelled", 'canceled'] }
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:376:hardcoded string:	          'customerDetails.studentMobile': { "$regex": studentMobile },
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:377:hardcoded string:	          'orderId': { "$nin": ["", null] },
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:378:hardcoded string:	          'orderhiveOrderStatus': { "$nin": ["cancelled", 'canceled'] }
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:381:hardcoded number:	    }).limit(5);
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:388:hardcoded variable:	const evaluateUser = async (req, res) => {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:390:hardcoded variable:	    let result = {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:392:hardcoded string:	      message: "This Lead was created by System/Admin",
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:393:hardcoded string:	      role: ""
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:395:hardcoded string:	    const { email = "", isLeadCreatedByAdmin } = req.body;
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:396:hardcoded string:	    if (!email) throw new BadRequestError("Parameter missing");
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:398:hardcoded string:	    const salesDoc = await Employee.findOne({ email: email.toLowerCase() }).select("role reportingTo").lean();
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:400:hardcoded string:	    const role = get(salesDoc, "role", "");
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:401:hardcoded string:	    const reportingTo = get(salesDoc, "reportingTo", {});
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:402:hardcoded array:	    const { avp = [] } = reportingTo || {};
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:403:hardcoded string:	    const avpEmailId = get(avp[0], "userEmail", "")
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:405:hardcoded string:	    result.role = role ? role.toLowerCase() : "";
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:408:hardcoded string:	    if (role === "bdt" && !isLeadCreatedByAdmin) {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:409:hardcoded string:	      result.message = "This lead is not createdBy admin/system. Hence, this order will not be accounted for BDT evaluation"
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:411:hardcoded string:	    } else if (role != "bdt" && isLeadCreatedByAdmin) {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:412:hardcoded string:	      result.message = "This Lead was created by System/Admin"
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:416:hardcoded string:	    logger.error({ method: 'evaluateUser', error }, 'Error occured');
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:421:hardcoded variable:	const getSalesEmailFromOhId = async (req, res) => {
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:422:hardcoded string:	  const { ohSalesBy = "", ohSalesAppointmentBy = "" } = req.body;
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:423:hardcoded string:	  if (!ohSalesBy) throw new BadRequestError("Parameter missing");
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:424:hardcoded object:	  const salesBy = await OrderhiveSalesPerson.findOne({ userId: ohSalesBy })
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:425:hardcoded object:	  const salesAppointmentBy = await OrderhiveSalesPerson.findOne({ userId: ohSalesAppointmentBy });
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:426:hardcoded string:	  if (!get(salesBy, 'username', '')) throw new Error("Sales person not found");
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsController.js:427:hardcoded string:	  return res.json({ salesBy: get(salesBy, 'username', ''), salesAppointmentBy: get(salesAppointmentBy, 'username', '') });
microservices-middleware/server/src/detailsmanagement/constant.js:3:hardcoded number:	const MIN_DAYS_TO_ALLOW_ORDER_PUNCHING = 30;
microservices-middleware/server/src/detailsmanagement/constant.js:5:hardcoded string:	const allowedOpSubDepartments = ["sales", "mentoring", "product_expert", "renewal", "retention", "retention_order_repunching", "product_trial", "sales_operations"]
microservices-middleware/server/src/detailsmanagement/constant.js:6:hardcoded string:	const allowOpcForUpsell =   ["mlp"];
microservices-middleware/server/src/detailsmanagement/constant.js:7:hardcoded string:	const MOBILE_AND_EMAIL_ERROR_INDEPENDENT_TEAMS = (vertical) => snakeCase(vertical)?.includes("upgrade");
microservices-middleware/server/src/detailsmanagement/constant.js:8:hardcoded string:	const USER_ROLES_TO_FREEZE_SALESDONEBY = ["bda", "bdt"];
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsRoutes.js:5:hardcoded object:	  const router = Router({ mergeParams: true });
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsRoutes.js:7:hardcoded string:	  router.route('/details/getSalesPersonDetails')
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsRoutes.js:12:hardcoded string:	  router.route('/details/saveSalesAndCustomerDetails')
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsRoutes.js:18:hardcoded string:	  router.route('/details/getOrderDeatils')
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsRoutes.js:24:hardcoded string:	  router.route('/details/evaluateUser')
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsRoutes.js:31:hardcoded string:	  router.route('/details/getCustomerDetails')
microservices-middleware/server/src/detailsmanagement/salesAndCustomerDetailsRoutes.js:37:hardcoded string:	    router.route('/details/getSalesEmailFromOhId')
