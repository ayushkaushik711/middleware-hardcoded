microservices-middleware/server/src/quotationbeta/student/service.js:4:hardcoded object:	const fetchStudentProfiles = async ({ primaryNumber, studentName }) => {
microservices-middleware/server/src/quotationbeta/student/service.js:5:hardcoded variable:	    const payload = {
microservices-middleware/server/src/quotationbeta/student/service.js:11:hardcoded variable:	        const response = await getPremiumAccountsByPidRecommender(
microservices-middleware/server/src/quotationbeta/student/service.js:20:hardcoded object:	const createStudentProfile = async ({ studentName, studentDob, studentEmail, studentPhone }) => {
microservices-middleware/server/src/quotationbeta/student/service.js:21:hardcoded variable:	    const payload = {
microservices-middleware/server/src/quotationbeta/student/service.js:26:hardcoded string:	        schoolId: '1',
microservices-middleware/server/src/quotationbeta/student/service.js:29:hardcoded variable:	        const response = await createPremiumAccount(
microservices-middleware/server/src/quotationbeta/student/service.js:32:hardcoded object:	        const { studentId } = response;
microservices-middleware/server/src/quotationbeta/student/controller.js:10:hardcoded variable:	const fetchStudents = async (req, res) => {
microservices-middleware/server/src/quotationbeta/student/controller.js:11:hardcoded string:	    const { primaryNumber, studentName = '', quotationId='' } = req.body
microservices-middleware/server/src/quotationbeta/student/controller.js:15:hardcoded variable:	    let phoneNumer = primaryNumber.trim();
microservices-middleware/server/src/quotationbeta/student/controller.js:16:hardcoded number:	    phoneNumer = phoneNumer.substr(phoneNumer.length - 10); //todo revisit this logic or apply existing
microservices-middleware/server/src/quotationbeta/student/controller.js:17:hardcoded number:	    phoneNumer = `+91-${phoneNumer}`; // todo add logic for other country codes
microservices-middleware/server/src/quotationbeta/student/controller.js:19:hardcoded string:	    let stdName = studentName.split('+').join(' ')
microservices-middleware/server/src/quotationbeta/student/controller.js:22:hardcoded object:	        const students = await fetchStudentProfiles({ primaryNumber: phoneNumer, studentName: stdName });
microservices-middleware/server/src/quotationbeta/student/controller.js:23:hardcoded object:	        const quotationStudents = await fetchStudentMapping({ quotationId });
microservices-middleware/server/src/quotationbeta/student/controller.js:24:hardcoded object:	        const studentIds = quotationStudents.map((item) => { return item.studentId });
microservices-middleware/server/src/quotationbeta/student/controller.js:25:hardcoded array:	        const { pidData = [] } = students;
microservices-middleware/server/src/quotationbeta/student/controller.js:26:hardcoded array:	        const filteredStudents = !isEmpty(pidData) ? pidData.filter((item) => !studentIds.includes(item.premium_account_id)) : [];
microservices-middleware/server/src/quotationbeta/student/controller.js:27:hardcoded string:	        const sortedStudents = orderBy(filteredStudents, ['createdAt'], ['desc']);
microservices-middleware/server/src/quotationbeta/student/controller.js:28:hardcoded number:	        return res.status(200).json({
microservices-middleware/server/src/quotationbeta/student/controller.js:30:hardcoded string:	            message: "Fetched Student Profiles"
microservices-middleware/server/src/quotationbeta/student/controller.js:33:hardcoded string:	        logger.error({ method: 'Quotation', error }, 'Error occured');
microservices-middleware/server/src/quotationbeta/student/controller.js:34:hardcoded number:	        return res.status(500).json({
microservices-middleware/server/src/quotationbeta/student/controller.js:35:hardcoded number:	            statusCode: 500,
microservices-middleware/server/src/quotationbeta/student/controller.js:37:hardcoded string:	                response: 'Error while getting data from Profile API.',
microservices-middleware/server/src/quotationbeta/student/controller.js:44:hardcoded variable:	const fetchQuotationStudents = async (req, res) => {
microservices-middleware/server/src/quotationbeta/student/controller.js:45:hardcoded object:	    const { quotationId } = req.body
microservices-middleware/server/src/quotationbeta/student/controller.js:50:hardcoded object:	        const students = await fetchStudentMapping({ quotationId });
microservices-middleware/server/src/quotationbeta/student/controller.js:52:hardcoded object:	            const {studentId} = student;
microservices-middleware/server/src/quotationbeta/student/controller.js:53:hardcoded object:	            const batchCentreDetails = await fetchBatchCentreDetails({quotationId, studentId});
microservices-middleware/server/src/quotationbeta/student/controller.js:54:hardcoded number:	            student.batchCentreDetails=batchCentreDetails[0];
microservices-middleware/server/src/quotationbeta/student/controller.js:56:hardcoded number:	        return res.status(200).json({
microservices-middleware/server/src/quotationbeta/student/controller.js:58:hardcoded string:	            message: "Fetched Student Profiles"
microservices-middleware/server/src/quotationbeta/student/controller.js:61:hardcoded string:	        logger.error({ method: 'fetchQuotationStudents', error }, 'Quotation Student Error occured');
microservices-middleware/server/src/quotationbeta/student/controller.js:62:hardcoded number:	        return res.status(500).json({
microservices-middleware/server/src/quotationbeta/student/controller.js:63:hardcoded number:	            statusCode: 500,
microservices-middleware/server/src/quotationbeta/student/controller.js:65:hardcoded string:	                response: 'Error while getting data from db.',
microservices-middleware/server/src/quotationbeta/student/controller.js:72:hardcoded variable:	const createStudent = async (req, res) => {
microservices-middleware/server/src/quotationbeta/student/controller.js:73:hardcoded object:	    const { studentName, studentDob, studentEmail, studentPhone } = req.body
microservices-middleware/server/src/quotationbeta/student/controller.js:78:hardcoded object:	        const studentDetails = await createStudentProfile({ studentName, studentDob, studentEmail, studentPhone });
microservices-middleware/server/src/quotationbeta/student/controller.js:79:hardcoded number:	        return res.status(200).json({
microservices-middleware/server/src/quotationbeta/student/controller.js:81:hardcoded string:	            message: "Created new student profile successfully"
microservices-middleware/server/src/quotationbeta/student/controller.js:84:hardcoded string:	        logger.error({ method: 'createStudent', error }, 'Create Student Error');
microservices-middleware/server/src/quotationbeta/student/controller.js:85:hardcoded number:	        return res.status(500).json({
microservices-middleware/server/src/quotationbeta/student/controller.js:86:hardcoded number:	            statusCode: 500,
microservices-middleware/server/src/quotationbeta/student/controller.js:88:hardcoded string:	                response: 'Error while getting data from API.',
microservices-middleware/server/src/quotationbeta/student/controller.js:95:hardcoded variable:	const deleteStudent = async (req, res) => {
microservices-middleware/server/src/quotationbeta/student/controller.js:96:hardcoded object:	    const { studentId, quotationId } = req.body
microservices-middleware/server/src/quotationbeta/student/controller.js:101:hardcoded object:	        await deleteQuotationLineItem({ studentId, quotationId })
microservices-middleware/server/src/quotationbeta/student/controller.js:102:hardcoded object:	        await deleteQuotationStudent({ studentId, quotationId });
microservices-middleware/server/src/quotationbeta/student/controller.js:103:hardcoded object:	        const students = await fetchStudentMapping({ quotationId });
microservices-middleware/server/src/quotationbeta/student/controller.js:109:hardcoded string:	            logger.info('Updated quotation status to agent_details_saved')
microservices-middleware/server/src/quotationbeta/student/controller.js:111:hardcoded number:	        return res.status(200).json({
microservices-middleware/server/src/quotationbeta/student/controller.js:112:hardcoded string:	            message: "Deleted quotation student successfully"
microservices-middleware/server/src/quotationbeta/student/controller.js:115:hardcoded string:	        logger.error({ method: 'deleteStudent', error }, 'Delete Student Error');
microservices-middleware/server/src/quotationbeta/student/controller.js:116:hardcoded number:	        return res.status(500).json({
microservices-middleware/server/src/quotationbeta/student/controller.js:117:hardcoded number:	            statusCode: 500,
microservices-middleware/server/src/quotationbeta/student/controller.js:119:hardcoded string:	                response: 'Error while getting data from DB.',
microservices-middleware/server/src/quotationbeta/student/dto.js:1:hardcoded string:	const { QuotationStudentMapping, StmsStudent, SalesProgram, DoLineItem} = require('@byjus-orders/npgexemplum');
microservices-middleware/server/src/quotationbeta/student/dto.js:2:hardcoded string:	const { StudentOrderBatchCentreDetail } = require('@byjus-orders/nexemplum/stms')
microservices-middleware/server/src/quotationbeta/student/dto.js:4:hardcoded object:	const fetchStudentMapping = async ({ quotationId }) => {
microservices-middleware/server/src/quotationbeta/student/dto.js:5:hardcoded variable:	    const students = await QuotationStudentMapping.findAll({
microservices-middleware/server/src/quotationbeta/student/dto.js:12:hardcoded string:	                as: "studentDetails",
microservices-middleware/server/src/quotationbeta/student/dto.js:15:hardcoded string:	                as: "spDetails",
microservices-middleware/server/src/quotationbeta/student/dto.js:18:hardcoded number:	        limit: 5,
microservices-middleware/server/src/quotationbeta/student/dto.js:24:hardcoded object:	const fetchBatchCentreDetails = async({quotationId, studentId}) => {
microservices-middleware/server/src/quotationbeta/student/dto.js:25:hardcoded variable:	    const batchCentreDetails = await StudentOrderBatchCentreDetail.find({
microservices-middleware/server/src/quotationbeta/student/dto.js:28:hardcoded number:	    }).lean().limit(1);
microservices-middleware/server/src/quotationbeta/student/dto.js:32:hardcoded object:	const deleteQuotationStudent = async({studentId, quotationId}) => {
microservices-middleware/server/src/quotationbeta/student/dto.js:33:hardcoded variable:	    const response = await QuotationStudentMapping.destroy({
microservices-middleware/server/src/quotationbeta/student/dto.js:43:hardcoded object:	const deleteQuotationLineItem = async({studentId, quotationId}) => {
microservices-middleware/server/src/quotationbeta/student/dto.js:44:hardcoded variable:	    const response = await DoLineItem.destroy({
