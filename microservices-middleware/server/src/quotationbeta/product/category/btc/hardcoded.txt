microservices-middleware/server/src/quotationbeta/product/category/btc/controller.js:5:hardcoded string:	const { QuotationStudentMapping } = require('@byjus-orders/npgexemplum');
microservices-middleware/server/src/quotationbeta/product/category/btc/controller.js:9:hardcoded variable:	const getBtcProduct = async (req, res) => {
microservices-middleware/server/src/quotationbeta/product/category/btc/controller.js:10:hardcoded string:	  logger.info({ method: 'getBtcProduct' }, { message: "Fetching Btc Product" });
microservices-middleware/server/src/quotationbeta/product/category/btc/controller.js:11:hardcoded number:	  let skuPrice = 0, products = [];
microservices-middleware/server/src/quotationbeta/product/category/btc/controller.js:12:hardcoded string:	  let { initialClass, finalClass, board, validity, city, extnFinalClass, formValues, batchDetails = {}, studentId, tablet, quotationId, voucherDetails, stateBoard='' } = req.body;
microservices-middleware/server/src/quotationbeta/product/category/btc/controller.js:13:hardcoded variable:	  let studData = {
microservices-middleware/server/src/quotationbeta/product/category/btc/controller.js:20:hardcoded array:	  let nonDiscountableSkuPrices = [], voucherEnabledSkuArray = [];
microservices-middleware/server/src/quotationbeta/product/category/btc/controller.js:21:hardcoded string:	  const type = "byjus_learning_center";
microservices-middleware/server/src/quotationbeta/product/category/btc/controller.js:24:hardcoded object:	    const { blcCoursePrice, blcSkuArray } = await getBlcProductAndPrice({ initialClass, finalClass, board, validity, city, type, stateBoard, studData })
microservices-middleware/server/src/quotationbeta/product/category/btc/controller.js:25:hardcoded object:	    const { tlpCoursePrice, tlpSkuArray } = await getTlpProductAndPrice({ initialClass, finalClass, board, validity, extnFinalClass, tablet, stateBoard, studData })
microservices-middleware/server/src/quotationbeta/product/category/btc/controller.js:26:hardcoded array:	    const tabletSku = tablet ? await getPostgresTabletSku({ tabletId: tablet, studentId, uniqueTabletId: tablet }) : [];
microservices-middleware/server/src/quotationbeta/product/category/btc/controller.js:36:hardcoded array:	      products.push(blcSkuArray, tlpSkuArray, [btcRegistrationSku], tabletSku);
microservices-middleware/server/src/quotationbeta/product/category/btc/controller.js:38:hardcoded array:	      products.push(blcSkuArray, tlpSkuArray, [btcRegistrationSku]);
microservices-middleware/server/src/quotationbeta/product/category/btc/controller.js:41:hardcoded variable:	    let maxPrice = skuPrice;
microservices-middleware/server/src/quotationbeta/product/category/btc/controller.js:42:hardcoded object:	    let minPrice = getMinimumRange({ user: req.user, maxPrice, tabletSku })
microservices-middleware/server/src/quotationbeta/product/category/btc/controller.js:44:hardcoded array:	    voucherEnabledSkuArray = getVoucherEnabledSkuArray({ blcSkuArray, tlpSkuArray, btcRegistrationSku: [btcRegistrationSku] });
microservices-middleware/server/src/quotationbeta/product/category/btc/controller.js:46:hardcoded variable:	    const formattedProducts = flattenDeep(products).filter(prdct => prdct);
microservices-middleware/server/src/quotationbeta/product/category/btc/controller.js:47:hardcoded object:	    //const quotationStudentData = await QuotationStudentMapping.findOne({ where: { quotationId, studentId } });
microservices-middleware/server/src/quotationbeta/product/category/btc/controller.js:48:hardcoded object:	    //const productDetails = {}
microservices-middleware/server/src/quotationbeta/product/category/btc/controller.js:49:hardcoded object:	    //const offerDetails = {}
microservices-middleware/server/src/quotationbeta/product/category/btc/controller.js:52:hardcoded variable:	      const productDetails = {
microservices-middleware/server/src/quotationbeta/product/category/btc/controller.js:58:hardcoded string:	        productCombination: "byjus_learning_centre",
microservices-middleware/server/src/quotationbeta/product/category/btc/controller.js:59:hardcoded object:	        regSku: {},
microservices-middleware/server/src/quotationbeta/product/category/btc/controller.js:60:hardcoded string:	        productType: 'single',
microservices-middleware/server/src/quotationbeta/product/category/btc/controller.js:63:hardcoded string:	    let discountDetails = await getDiscountDetails({ productDetails, voucherDetails, studData, tabletSku, quotationId, batchDetails, tabletPrice: get(tabletSku, 'basePrice', 0) });
microservices-middleware/server/src/quotationbeta/product/category/btc/controller.js:71:hardcoded string:	      discountedPrice: get(discountDetails, 'discountedAmount', '')
microservices-middleware/server/src/quotationbeta/product/category/btc/dto.js:2:hardcoded string:	const { SalesSkuMaster } = require('@byjus-orders/npgexemplum')
microservices-middleware/server/src/quotationbeta/product/category/btc/dto.js:8:hardcoded variable:	const getCourseSku = async (details) => {
microservices-middleware/server/src/quotationbeta/product/category/btc/dto.js:9:hardcoded object:	    const { type, grade, board, validity, tablet } = details
microservices-middleware/server/src/quotationbeta/product/category/btc/dto.js:11:hardcoded variable:	    const query = {
microservices-middleware/server/src/quotationbeta/product/category/btc/dto.js:12:hardcoded string:	        status: "active",
microservices-middleware/server/src/quotationbeta/product/category/btc/dto.js:14:hardcoded string:	        brand: productConstant.D4_SKU_ID.includes(tablet) && type === "btlp" ? "D4" : null,
microservices-middleware/server/src/quotationbeta/product/category/btc/dto.js:15:hardcoded object:	        grade: `${grade}`,
microservices-middleware/server/src/quotationbeta/product/category/btc/dto.js:16:hardcoded object:	        validity: `${validity}`
microservices-middleware/server/src/quotationbeta/product/category/btc/dto.js:19:hardcoded string:	    if (["4", "5"].indexOf(grade.toString()) >= 0) {
microservices-middleware/server/src/quotationbeta/product/category/btc/dto.js:20:hardcoded string:	        query['board'] = null
microservices-middleware/server/src/quotationbeta/product/category/btc/dto.js:23:hardcoded string:	    if (["6", "7", "8", "9", "10"].indexOf(grade.toString()) >= 0) {
microservices-middleware/server/src/quotationbeta/product/category/btc/dto.js:24:hardcoded string:	        query['board'] = board
microservices-middleware/server/src/quotationbeta/product/category/btc/dto.js:27:hardcoded variable:	    const product = await SalesSkuMaster.findOne({
microservices-middleware/server/src/quotationbeta/product/category/btc/dto.js:35:hardcoded string:	            itemType: 'course'
microservices-middleware/server/src/quotationbeta/product/category/btc/dto.js:39:hardcoded object:	        const errorMsg = getErrorMsg({ grade, board, validity, type });
microservices-middleware/server/src/quotationbeta/product/category/btc/dto.js:44:hardcoded variable:	const getBtcRegistrationSku = async () => {
microservices-middleware/server/src/quotationbeta/product/category/btc/dto.js:46:hardcoded variable:	    let query = {
microservices-middleware/server/src/quotationbeta/product/category/btc/dto.js:47:hardcoded string:	        type: "service",
microservices-middleware/server/src/quotationbeta/product/category/btc/dto.js:48:hardcoded string:	        subType: "registration",
microservices-middleware/server/src/quotationbeta/product/category/btc/dto.js:49:hardcoded string:	        category: "btc_registration"
microservices-middleware/server/src/quotationbeta/product/category/btc/dto.js:62:hardcoded string:	        throw new NotFoundError("BTC Registration SKU not found!")
microservices-middleware/server/src/quotationbeta/product/category/btc/dto.js:65:hardcoded string:	    sku['price'] = sku.basePrice;
microservices-middleware/server/src/quotationbeta/product/category/btc/dto.js:66:hardcoded string:	    //sku["itemId"] = getSkuItemId(sku);
