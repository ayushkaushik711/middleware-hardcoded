microservices-middleware/server/src/inventorymanagement/inventorycontroller.js:6:hardcoded string:	const { DraftOrder } = require('@byjus-orders/nexemplum/oms');
microservices-middleware/server/src/inventorymanagement/inventorycontroller.js:14:hardcoded variable:	const isImmediateDeliverable = async (req, res) => {
microservices-middleware/server/src/inventorymanagement/inventorycontroller.js:15:hardcoded string:	    logger.info({ method: 'isImmediateDeliverable' }, { message: "Checks if order is ImmediateDeliverable" });
microservices-middleware/server/src/inventorymanagement/inventorycontroller.js:16:hardcoded string:	    const { identifier = '' } = req.body
microservices-middleware/server/src/inventorymanagement/inventorycontroller.js:19:hardcoded string:	        throw new BadRequestError("Parameters missing");
microservices-middleware/server/src/inventorymanagement/inventorycontroller.js:22:hardcoded string:	    /**If modeOfpayment is EMI and productType = "COMBO" or "SIBLING", then 
microservices-middleware/server/src/inventorymanagement/inventorycontroller.js:25:hardcoded object:	    let immediateDeliveryDetail = {}
microservices-middleware/server/src/inventorymanagement/inventorycontroller.js:26:hardcoded object:	    const { isActive } = config.onSpotDelivery
microservices-middleware/server/src/inventorymanagement/inventorycontroller.js:27:hardcoded object:	    const { ALLOWED_PRODUCT_TYPE } = onSpotOrderConstants
microservices-middleware/server/src/inventorymanagement/inventorycontroller.js:28:hardcoded string:	    logger.info({ method: 'isImmediateDeliverable' }, { message: "Checking if order is  eligible for isImmediateDelivery", identifier });
microservices-middleware/server/src/inventorymanagement/inventorycontroller.js:30:hardcoded variable:	    const orderDetails = await DraftOrder.findById(identifier)
microservices-middleware/server/src/inventorymanagement/inventorycontroller.js:32:hardcoded string:	        throw new BadRequestError("No saved order found");
microservices-middleware/server/src/inventorymanagement/inventorycontroller.js:34:hardcoded object:	    const { productDetails } = orderDetails
microservices-middleware/server/src/inventorymanagement/inventorycontroller.js:35:hardcoded string:	    const productType = get(productDetails, "productType", "")
microservices-middleware/server/src/inventorymanagement/inventorycontroller.js:36:hardcoded string:	    const paymentType = get(productDetails, "paymentType", "")
microservices-middleware/server/src/inventorymanagement/inventorycontroller.js:38:hardcoded number:	        if (ALLOWED_PRODUCT_TYPE.indexOf(productType.toUpperCase()) >= 0 && isActive) {
microservices-middleware/server/src/inventorymanagement/inventorycontroller.js:41:hardcoded number:	        return res.status(200).json(immediateDeliveryDetail)
microservices-middleware/server/src/inventorymanagement/inventorycontroller.js:43:hardcoded string:	        logger.error({ method: 'isImmediateDeliverable' }, { message: "Error while checking isImmediateDeliverable function", identifier });
microservices-middleware/server/src/inventorymanagement/inventorycontroller.js:50:hardcoded string:	    logger.info({ method: 'fetchQRCode' }, { message: "Fetches qRCode" });
microservices-middleware/server/src/inventorymanagement/inventorycontroller.js:51:hardcoded string:	    const { orderId = '' } = req.body
microservices-middleware/server/src/inventorymanagement/inventorycontroller.js:53:hardcoded string:	        throw new BadRequestError("Parameters missing");
microservices-middleware/server/src/inventorymanagement/inventorycontroller.js:55:hardcoded object:	    const payload = { orderId }
microservices-middleware/server/src/inventorymanagement/inventorycontroller.js:57:hardcoded variable:	        const qrCode = await callPremiumAccountApi(payload)
microservices-middleware/server/src/inventorymanagement/inventorycontroller.js:58:hardcoded number:	        const orderDetails = await Order.findOne({ orderId }, { qrCodeInfo: 1 });
microservices-middleware/server/src/inventorymanagement/inventorycontroller.js:59:hardcoded number:	        res.status(200).json(orderDetails)
microservices-middleware/server/src/inventorymanagement/inventorycontroller.js:61:hardcoded string:	        logger.error({ method: 'fetchQRCode' }, { message: "Error while checking fetchQRCode function", orderId });
microservices-middleware/server/src/inventorymanagement/inventoryRoutes.js:3:hardcoded object:	const router = Router({ mergeParams: true })
microservices-middleware/server/src/inventorymanagement/inventoryRoutes.js:6:hardcoded string:	    const baseRoute = '/inventory';
microservices-middleware/server/src/inventorymanagement/inventoryRoutes.js:7:hardcoded object:	    router.route(`${baseRoute}/onSpot`)
microservices-middleware/server/src/inventorymanagement/inventoryRoutes.js:11:hardcoded object:	    router.route(`${baseRoute}/getQRCode`)
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:4:hardcoded string:	const { DraftOrder, Inventory: AchieveInventory } = require('@byjus-orders/nexemplum/oms');
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:8:hardcoded variable:	const isImmediateDeliveryPossible = {
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:10:hardcoded number:	    minimumDP: 0,
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:11:hardcoded array:	    items: []
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:14:hardcoded variable:	const saveInventoryDetailsInDB = async (inventoryDetails, identifier) => {
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:15:hardcoded string:	    logger.info({ method: 'saveInventoryDetailsInDB' }, { message: "Saves List of inventories", identifier, inventoryDetails });
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:18:hardcoded number:	        await updateAcheiveInventory(inventoryDetails[0])
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:19:hardcoded number:	        const inventory = inventoryDetails[0]
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:22:hardcoded object:	            { $set: { inventoryDetails: inventory, isImmediateDelivery: true } },
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:23:hardcoded object:	            { new: true }
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:26:hardcoded string:	        logger.error({ method: "saveInventoryDetailsInDB", error }, "saveInventoryDetailsInDB Failed");
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:31:hardcoded variable:	const updateAcheiveInventory = async (inventoryDetails) => {
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:32:hardcoded string:	    logger.info({ method: 'updateAcheiveInventory' }, { message: "Saves List of inventories in Acheive Collecction", inventoryDetails });
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:34:hardcoded variable:	        const inventory = await AchieveInventory.updateMany({
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:36:hardcoded object:	                { $in: inventoryDetails }
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:38:hardcoded string:	            { $set: { status: "order_punched" } },
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:39:hardcoded object:	            { multi: true })
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:42:hardcoded string:	        logger.error({ method: "updateAcheiveInventory", error }, "updateAcheiveInventory Failed");
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:47:hardcoded variable:	const getInventoyList = async (payload) => {
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:48:hardcoded string:	    logger.info({ method: 'getInventoyList' }, { message: "Returns List of inventories", payload });
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:51:hardcoded object:	        const { initialClass, finalClass, board, salesEmailId, tabletName } = payload;
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:52:hardcoded variable:	        const inventory = {
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:53:hardcoded array:	            sdCard: [],
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:54:hardcoded array:	            tablet: []
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:58:hardcoded string:	        const tablets = await AchieveInventory.find({ bda_email_id: salesEmailId, status: 'assigned', item_id: new RegExp('LT', 'i') });
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:62:hardcoded string:	        const sdCards = await AchieveSDCards.find({ initialClass: { $gte: initialClass }, finalClass: { $lte: finalClass }, board: new RegExp(`${board}`, 'i') });
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:63:hardcoded array:	        const sdCardLists = []
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:65:hardcoded string:	            const naming_convention = get(ele, "naming_convention", "");
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:68:hardcoded array:	        const sdCardWithRegex = []
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:70:hardcoded string:	            sdCardWithRegex.push(new RegExp(ele, 'i'))
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:73:hardcoded number:	        if (sdCardWithRegex.length > 0) {
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:74:hardcoded string:	            const sdCardDetails = await AchieveInventory.find({ bda_email_id: salesEmailId, status: 'assigned', item_id: { "$in": sdCardWithRegex } })
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:79:hardcoded string:	        logger.error({ method: "getInventoyList", error }, "getInventoyList Failed");
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:84:hardcoded variable:	const getMinmumDp = (product) => {
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:85:hardcoded string:	    logger.info({ method: 'getMinmumDp' }, { message: "Returns MinimumDp required for Immediate Delivery", product });
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:87:hardcoded number:	    let miniDP = 0
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:88:hardcoded variable:	    let istabletFound = false
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:92:hardcoded string:	            const itemType = get(ele, "itemType", "");
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:93:hardcoded string:	            if (itemType.toUpperCase() === 'TABLET') {
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:94:hardcoded string:	                let size = get(ele, "size", 0)
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:95:hardcoded number:	                if (size === 7) {
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:97:hardcoded number:	                        miniDP += onSpotOrderConstants.TABLET_7_INCH_ALLOWED_DP
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:102:hardcoded number:	                } else if (size === 10) {
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:104:hardcoded number:	                        miniDP += onSpotOrderConstants.TABLET_10_INCH_ALLOWED_DP
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:116:hardcoded string:	        logger.error({ method: "getMinmumDp", error }, "getMinmumDp For Inventor Failed");
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:121:hardcoded variable:	const formatSDCardList = (sdCard) => {
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:123:hardcoded array:	        const sdCardList = []
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:125:hardcoded string:	            const item_name = get(ele, "item_name", "")
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:126:hardcoded string:	            const value = get(ele, "item_id", "")
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:127:hardcoded object:	            const label = `${item_name}-${value}`
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:135:hardcoded string:	        logger.error({ method: "formatSDCardList", error }, "formatSDCardList Failed");
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:140:hardcoded variable:	const formatTabletList = (tablet) => {
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:142:hardcoded array:	        const tablets = []
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:144:hardcoded string:	            const item_name = get(ele, "item_name", "")
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:145:hardcoded string:	            const value = get(ele, "item_id", "")
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:146:hardcoded object:	            const label = `${item_name}-${value}`
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:154:hardcoded string:	        logger.error({ method: "formatTabletList", error }, "formatTabletList Failed");
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:159:hardcoded variable:	const checkNonEmiImmediateDelivery = async (orderDetails) => {
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:160:hardcoded string:	    logger.info({ method: 'checkNonEmiImmediateDelivery' }, { message: "Checks immediate Delivery for NonEMI Payment Mode" });
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:162:hardcoded object:	    const { productDetails, salesDetails } = orderDetails
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:163:hardcoded string:	    let studentDetails = get(productDetails, "students", []);
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:164:hardcoded string:	    const salesEmailId = get(salesDetails, "directSalesBy", "");
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:165:hardcoded string:	    const product = get(productDetails, "products", []);
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:166:hardcoded string:	    const productType = get(productDetails, "productType", "")
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:169:hardcoded string:	        if (!isEmpty(studentDetails) && salesEmailId != "") {
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:171:hardcoded array:	            const sdCards = []
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:172:hardcoded array:	            const tablets = []
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:173:hardcoded variable:	            const inventory = studentDetails.map(async (dt) => {
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:174:hardcoded string:	                const initialClass = get(dt, "initialClass", '');
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:175:hardcoded string:	                const finalClass = get(dt, "finalClass", '');
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:176:hardcoded string:	                const board = get(dt, "board", "");
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:178:hardcoded string:	                if (initialClass !== '0' && finalClass !== '0' && board !== "") {
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:179:hardcoded variable:	                    const requestBody = {
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:184:hardcoded string:	                        tabletName: 'blah'
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:186:hardcoded variable:	                    const inventory = await getInventoyList(requestBody);
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:190:hardcoded variable:	            const result = await Promise.all(inventory)
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:191:hardcoded variable:	            const rsp = result.map((dt) => {
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:192:hardcoded object:	                const { sdCard, tablet } = dt
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:193:hardcoded variable:	                const sdCardsList = formatSDCardList(sdCard)
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:195:hardcoded variable:	                const tabletList = formatTabletList(tablet)
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:208:hardcoded object:	            isImmediateDeliveryPossible.items = { sdCard: sdCardsList, tablet: tabletList }
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:210:hardcoded variable:	                const immediateDeliveryMinDP = await getMinmumDp(product)
microservices-middleware/server/src/inventorymanagement/inventoryHelper.js:216:hardcoded string:	        logger.error({ method: "checkNonEmiImmediateDelivery", error }, "Checks immediate Delivery for NonEMI Payment Mode Failed");
