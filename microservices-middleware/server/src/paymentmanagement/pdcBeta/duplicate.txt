microservices-middleware/server/src/paymentmanagement/pdcBeta/assembler.js:1:hardcoded object:const getFormattedDiscardBody =({payments}) =>{
microservices-middleware/server/src/paymentmanagement/pdcBeta/assembler.js:3:hardcoded string:    status: 'discarded',
microservices-middleware/server/src/paymentmanagement/pdcBeta/assembler.js:5:hardcoded object:    amount: `${pay.amount}`,
microservices-middleware/server/src/paymentmanagement/pdcBeta/assembler.js:6:hardcoded string:    source: 'kart',
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:1:hardcoded object:const { groupBy, get, round, isEmpty } = require('lodash');
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:2:hardcoded file path:const moment = require('moment');
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:5:hardcoded variable:const dateCalculation = (noOfPdc, pdcIntervalDuration, isPrivilegedUser) => {
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:6:hardcoded array:    let schedules = [];
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:8:hardcoded number:    for (let i = 1; i <= noOfPdc; i++) {
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:16:hardcoded number:        if (i == 1) {
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:17:hardcoded string:            let currentDay = parseInt(moment().format('DD'));
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:18:hardcoded string:            scheduledDate = moment().subtract(currentDay, 'days').add(7, 'days').add((currentDay <= 10) ? 1 : 2, 'M');
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:20:hardcoded string:            scheduledDate = schedules[i - 2].selectedDate.clone().add(pdcIntervalDuration || 2, 'M');
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:39:hardcoded variable:const getDetailSchedules = (details) => {
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:40:hardcoded object:    const { totalPdcAmount: totalAmount, noOfPdc, pdcIntervalDuration, isPrivilegedUser } = details
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:42:hardcoded variable:        let remainingAmount = totalAmount;
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:43:hardcoded variable:        const schedules = dateCalculation(noOfPdc, pdcIntervalDuration, isPrivilegedUser);
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:44:hardcoded number:        for (let i = 0; i < noOfPdc; i++) {
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:45:hardcoded variable:            const amount = Math.round(totalAmount / noOfPdc);
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:47:hardcoded array:            schedules[i] = {
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:48:hardcoded array:                ...schedules[i],
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:50:hardcoded number:                minAmount: (!isPrivilegedUser) ? amount : 0
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:53:hardcoded number:        if (remainingAmount != 0) {
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:54:hardcoded number:            schedules[0].amount += remainingAmount
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:62:hardcoded object:const validateAmount = ({ schedules, totalAmount, currentDp }) => {
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:63:hardcoded variable:    let currentTotal = parseInt(currentDp);
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:65:hardcoded object:        const { amount } = sch;
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:66:hardcoded number:        if (parseInt(amount) <= 0) {
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:67:hardcoded string:            throw new Error("Schedule Amount should be greater than 0");
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:74:hardcoded string:        throw new Error("Total Schedule Amount is not equal to totalAmount");
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:81:hardcoded object:const vaildateDates = ({ schedules }) => {
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:82:hardcoded number:    if(moment().isAfter(schedules[0].selectedDate)){
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:83:hardcoded number:        throw new Error(`Schedule 1 Date cannot be earlier than PDC creation date`);
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:85:hardcoded number:    for (let i = 1; i < schedules.length; i++) {
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:86:hardcoded number:        const lastSchDate = moment(schedules[i - 1].selectedDate)
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:87:hardcoded array:        const currentDate = moment(schedules[i].selectedDate)
microservices-middleware/server/src/paymentmanagement/pdcBeta/service.js:89:hardcoded number:            throw new Error(`Schedule ${i + 1}  Date should be after schedule ${i} .`)
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:5:hardcoded number:        minDp: 15000,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:6:hardcoded number:        minPdcs: 1,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:7:hardcoded number:        maxPdcs: 3,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:8:hardcoded number:        maxMonthFrequency: 2
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:13:hardcoded number:            minAmount: 35000,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:14:hardcoded number:            maxAmount: 60000,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:15:hardcoded number:            minDp: 15000,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:16:hardcoded number:            minPdcs: 1,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:17:hardcoded number:            maxPdcs: 3,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:18:hardcoded number:            pdcIntervalDuration: 2,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:21:hardcoded number:            minAmount: 60001,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:22:hardcoded number:            maxAmount: 100000,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:23:hardcoded number:            minDp: 20000,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:24:hardcoded number:            minPdcs: 1,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:25:hardcoded number:            maxPdcs: 5,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:26:hardcoded number:            pdcIntervalDuration: 2,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:29:hardcoded number:            minAmount: 100001,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:30:hardcoded number:            maxAmount: 130000,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:31:hardcoded number:            minDp: 25000,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:32:hardcoded number:            minPdcs: 1,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:33:hardcoded number:            maxPdcs: 5,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:34:hardcoded number:            pdcIntervalDuration: 2,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:37:hardcoded number:            minAmount: 130001,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:38:hardcoded number:            maxAmount: 200000,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:39:hardcoded number:            minDp: 40000,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:40:hardcoded number:            minPdcs: 1,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:41:hardcoded number:            maxPdcs: 5,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:42:hardcoded number:            pdcIntervalDuration: 2,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:43:hardcoded number:            maxMonths: 10
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:46:hardcoded number:            minAmount: 200001,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:47:hardcoded number:            maxAmount: 500000,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:48:hardcoded number:            minDp: 50000,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:49:hardcoded number:            minPdcs: 1,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:50:hardcoded number:            maxPdcs: 5,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:51:hardcoded number:            pdcIntervalDuration: 2,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:56:hardcoded number:          minPdcs: 1,
microservices-middleware/server/src/paymentmanagement/pdcBeta/config.js:57:hardcoded number:          maxPdcs: 6,
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:2:hardcoded number:const { discardPaymentbyRefId, getPaymentsV2ByRefId } = require('../../../utility/apis/paymentApiUtility');
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:3:hardcoded object:const { getFormattedDiscardBody } = require('./assembler');
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:4:hardcoded object:const { getPdcConfigs } = require('./utils');
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:5:hardcoded object:const { getDetailSchedules, validateAmount, vaildateDates } = require('./service');
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:6:hardcoded file path:const logger = require('../../../lib/bunyan-logger')('pdcController');
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:10:hardcoded variable:const fetchSchedules = async (req, res) => {
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:11:hardcoded string:	logger.info({ method: 'fetchSchedules' }, { message: "Fetching payment Schedules " });
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:12:hardcoded string:	const { amount, productCategory = "BTC", noOfPdc, isPrivilegedUser = false } = req.body;
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:16:hardcoded object:		const { minPdcs, maxPdcs, minDp, pdcIntervalDuration } = await getPdcConfigs({ amount, isPrivilegedUser });
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:18:hardcoded object:			throw new Error(`No of PDCs value should be between ${minPdcs} and ${maxPdcs}`);
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:21:hardcoded number:		const downPaymentAmount = Math.round(minDp || 0);
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:22:hardcoded variable:		const totalPdcAmount = amount - downPaymentAmount;
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:23:hardcoded object:		const schedules = getDetailSchedules({ totalPdcAmount, noOfPdc, pdcIntervalDuration, isPrivilegedUser });
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:32:hardcoded string:		res.status(500).json({ message: error.message || 'Something went wrong. Please try again later' })
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:36:hardcoded variable:const validateSchedules = async (req, res) => {
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:37:hardcoded string:	logger.info({ method: 'validateSchedules' }, { message: "Validating payment Schedules " });
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:38:hardcoded object:	const { initialSchedules = {}, currentSchedules = {} } = req.body;
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:42:hardcoded object:		const { totalAmount, downPaymentAmount: initialDp } = initialSchedules
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:43:hardcoded array:		const { schedules = [], downPaymentAmount: currentDp } = currentSchedules
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:46:hardcoded object:			throw new Error(`Downpayment Amount cannot be less than ${initialDp}`);
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:48:hardcoded number:		if (currentDp < 0) {
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:49:hardcoded number:			throw new Error(`Downpayment Amount cannot be less than 0`);
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:52:hardcoded object:		const isValidAmount = validateAmount({ schedules, totalAmount, currentDp })
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:53:hardcoded object:		const areValidDates = vaildateDates({ schedules, totalAmount })
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:54:hardcoded variable:		const isValid = isValidAmount && areValidDates
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:62:hardcoded string:		res.status(500).json({ message: error.message || 'Something went wrong. Please try again later' })
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:66:hardcoded variable:const discardGpdc = async (req, res) => {
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:68:hardcoded string:		{ method: 'discardGpdc' },
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:69:hardcoded string:		{ message: 'Discarding  Group Pdc with refId ' }
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:71:hardcoded object:	const { referenceId, amount, pdcIds } = req.body;
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:74:hardcoded object:		let payments = pdcIds.map(referenceId => ({ referenceId }))
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:75:hardcoded array:		payments = [{ referenceId }, ...payments]
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:76:hardcoded number:		payments = await getPaymentsV2ByRefId({ payments })
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:77:hardcoded object:		let payload = getFormattedDiscardBody({ payments })
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:79:hardcoded object:			const { provider } = body;
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:81:hardcoded object:			const response = await discardPaymentbyRefId({ body, provider })
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:83:hardcoded number:				res.status(500).json({
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:84:hardcoded object:					message: `Error while discarding ${body?.referenceId}`
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:94:hardcoded number:		res.status(500).json({
microservices-middleware/server/src/paymentmanagement/pdcBeta/controller.js:95:hardcoded string:			message: error.message || 'Something went wrong. Please try again later'
microservices-middleware/server/src/paymentmanagement/pdcBeta/routes.js:1:hardcoded file path:const express = require('express');
microservices-middleware/server/src/paymentmanagement/pdcBeta/routes.js:2:hardcoded file path:const multer = require('multer')();
microservices-middleware/server/src/paymentmanagement/pdcBeta/routes.js:4:hardcoded file path:const controller = require('./controller');
microservices-middleware/server/src/paymentmanagement/pdcBeta/routes.js:6:hardcoded object:const router = express.Router({ mergeParams: true });
microservices-middleware/server/src/paymentmanagement/pdcBeta/routes.js:9:hardcoded string:    const baseRoute = "/payment/pdcBeta";
microservices-middleware/server/src/paymentmanagement/pdcBeta/routes.js:11:hardcoded object:    router.route(`${baseRoute}/fetchSchedules`)
microservices-middleware/server/src/paymentmanagement/pdcBeta/routes.js:15:hardcoded object:    router.route(`${baseRoute}/validate`)
microservices-middleware/server/src/paymentmanagement/pdcBeta/routes.js:19:hardcoded object:    router.route(`${baseRoute}/discardGpdc`)
microservices-middleware/server/src/paymentmanagement/pdcBeta/utils.js:1:hardcoded object:const { get, isEmpty } = require('lodash');
microservices-middleware/server/src/paymentmanagement/pdcBeta/utils.js:2:hardcoded object:const { nativeClient } = global.byjus;
microservices-middleware/server/src/paymentmanagement/pdcBeta/utils.js:3:hardcoded string:const ByjusConfig = nativeClient.db('byjus-nucleus').collection('byjus_configs');
microservices-middleware/server/src/paymentmanagement/pdcBeta/utils.js:6:hardcoded object:const getPdcConfigs = async ({ amount, isPrivilegedUser }) => {
microservices-middleware/server/src/paymentmanagement/pdcBeta/utils.js:13:hardcoded variable:        const pdcConfigs = await ByjusConfig.findOne({
microservices-middleware/server/src/paymentmanagement/pdcBeta/utils.js:14:hardcoded string:            "formattedAppName": "MIDDLEWARE",
microservices-middleware/server/src/paymentmanagement/pdcBeta/utils.js:15:hardcoded string:            "formattedModuleName": "PRODUCT_CATEGORY_FOR_PDC_CONFIGS"
microservices-middleware/server/src/paymentmanagement/pdcBeta/utils.js:20:hardcoded string:            productConfig = get(pdcConfigs, "configs.BTC.nonPrivilegedUserConfig", {});
microservices-middleware/server/src/paymentmanagement/pdcBeta/utils.js:22:hardcoded string:                throw new Error("Invalid Product Category");
microservices-middleware/server/src/paymentmanagement/pdcBeta/utils.js:24:hardcoded number:            minAmount = productConfig[0]?.minAmount;
microservices-middleware/server/src/paymentmanagement/pdcBeta/utils.js:25:hardcoded number:            maxAmount = productConfig[0]?.maxAmount;
microservices-middleware/server/src/paymentmanagement/pdcBeta/utils.js:26:hardcoded number:            for (index = 0; index < productConfig.length; index++) {
microservices-middleware/server/src/paymentmanagement/pdcBeta/utils.js:27:hardcoded array:                minAmount = Math.min(minAmount, productConfig[index].minAmount);
microservices-middleware/server/src/paymentmanagement/pdcBeta/utils.js:28:hardcoded array:                maxAmount = Math.max(maxAmount, productConfig[index].maxAmount);
microservices-middleware/server/src/paymentmanagement/pdcBeta/utils.js:29:hardcoded array:                if ((productConfig[index].minAmount <= amount && productConfig[index].maxAmount >= amount)) {
microservices-middleware/server/src/paymentmanagement/pdcBeta/utils.js:34:hardcoded string:            productConfig = get(pdcConfigs, "configs.BTC.privilegedUserConfig", {});
microservices-middleware/server/src/paymentmanagement/pdcBeta/utils.js:36:hardcoded string:                throw new Error("Invalid Product Category");
microservices-middleware/server/src/paymentmanagement/pdcBeta/utils.js:38:hardcoded number:            index = 0;
microservices-middleware/server/src/paymentmanagement/pdcBeta/utils.js:40:hardcoded object:        if (index == productConfig.length) throw new Error(`Total Sales Value should be between ${minAmount} and ${maxAmount}`);
microservices-middleware/server/src/paymentmanagement/pdcBeta/utils.js:41:hardcoded array:        minPdcs = get(productConfig, `[${index}].minPdcs`);
microservices-middleware/server/src/paymentmanagement/pdcBeta/utils.js:42:hardcoded array:        maxPdcs = get(productConfig, `[${index}].maxPdcs`);
microservices-middleware/server/src/paymentmanagement/pdcBeta/utils.js:43:hardcoded array:        minDp = get(productConfig, `[${index}].minDp`) || null;
microservices-middleware/server/src/paymentmanagement/pdcBeta/utils.js:44:hardcoded array:        pdcIntervalDuration = get(productConfig, `[${index}].pdcIntervalDuration`) || null;
microservices-middleware/server/src/paymentmanagement/pdcBeta/utils.js:45:hardcoded object:        return { minPdcs, maxPdcs, minDp, pdcIntervalDuration };
microservices-middleware/server/src/paymentmanagement/pdcBeta/utils.js:47:hardcoded string:        throw new Error(err || 'Error in get product config')
