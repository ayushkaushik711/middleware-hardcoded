microservices-middleware/server/src/paymentmanagement/utils/paymentUtil.js:1:hardcoded variable:	const getOldPaymentProvider = (newProvider) => {
microservices-middleware/server/src/paymentmanagement/utils/paymentUtil.js:6:hardcoded variable:	    const providerMap = {
microservices-middleware/server/src/paymentmanagement/utils/paymentUtil.js:7:hardcoded string:	        CAPITAL_FLOAT: "Capital Float",
microservices-middleware/server/src/paymentmanagement/utils/paymentUtil.js:8:hardcoded string:	        PAYU: "PayU",
microservices-middleware/server/src/paymentmanagement/utils/paymentUtil.js:9:hardcoded string:	        CHEQUE: "Cheque",
microservices-middleware/server/src/paymentmanagement/utils/paymentUtil.js:10:hardcoded string:	        ICR: "Cash Deposit",
microservices-middleware/server/src/paymentmanagement/utils/paymentUtil.js:11:hardcoded string:	        CHALLAN: "Cash Deposit",
microservices-middleware/server/src/paymentmanagement/utils/paymentUtil.js:12:hardcoded string:	        PAYTM: "Paytm",
microservices-middleware/server/src/paymentmanagement/utils/paymentUtil.js:13:hardcoded string:	        CITRUS_USD: "Citrus USD",
microservices-middleware/server/src/paymentmanagement/utils/paymentUtil.js:14:hardcoded string:	        CITRUS_AED: "Citrus AED",
microservices-middleware/server/src/paymentmanagement/utils/paymentUtil.js:15:hardcoded string:	        MPESA: "Mpesa",
microservices-middleware/server/src/paymentmanagement/utils/paymentUtil.js:16:hardcoded string:	        CASH_CARE: "Cash Care",
microservices-middleware/server/src/paymentmanagement/utils/paymentUtil.js:17:hardcoded string:	        PINE_LABS: "Pine Labs",
microservices-middleware/server/src/paymentmanagement/utils/paymentUtil.js:18:hardcoded string:	        CASH_ON_DELIVERY: "Cash On Delivery",
microservices-middleware/server/src/paymentmanagement/utils/paymentUtil.js:19:hardcoded string:	        BAJAJ: 'Bajaj',
microservices-middleware/server/src/paymentmanagement/utils/paymentUtil.js:20:hardcoded string:	        SCR: 'Cash Deposit'
microservices-middleware/server/src/paymentmanagement/utils/paymentUtil.js:24:hardcoded string:	    if (['ICR', 'SCR'].includes(newProvider)) {
microservices-middleware/server/src/paymentmanagement/utils/paymentUtil.js:25:hardcoded string:	        return ['Cash Deposit', 'ICR', 'SCR'];
microservices-middleware/server/src/paymentmanagement/utils/paymentUtil.js:28:hardcoded array:	        return providerMap[newProvider] ? [providerMap[newProvider]] : [newProvider];
microservices-middleware/server/src/paymentmanagement/utils/paymentUtil.js:32:hardcoded string:	const walletPaymentTypes = ['BYJUS_WALLET', 'BYJUS_GIFT_CARD'];
microservices-middleware/server/src/paymentmanagement/utils/paymentUtil.js:34:hardcoded string:	const RCN_BASED_DP_APPLICABLE_ROLE = ["bda", "bdt"];
microservices-middleware/server/src/paymentmanagement/utils/loanDetailsHelper.js:3:hardcoded string:	const { ShopSeTransaction, PayuTransaction } = require('@byjus-orders/nexemplum/pms');
microservices-middleware/server/src/paymentmanagement/utils/loanDetailsHelper.js:4:hardcoded string:	const { PALoans } = require('@byjus-orders/npgexemplum');
microservices-middleware/server/src/paymentmanagement/utils/loanDetailsHelper.js:5:hardcoded string:	const { LoanAggregator } = require('@byjus-orders/nexemplum/lms');
microservices-middleware/server/src/paymentmanagement/utils/loanDetailsHelper.js:10:hardcoded variable:	const getLoanDetailsFromDB = async (appId, provider) => {
microservices-middleware/server/src/paymentmanagement/utils/loanDetailsHelper.js:11:hardcoded object:	    let data = {};
microservices-middleware/server/src/paymentmanagement/utils/loanDetailsHelper.js:12:hardcoded variable:	    const map = {
microservices-middleware/server/src/paymentmanagement/utils/loanDetailsHelper.js:13:hardcoded string:	        "SHOPSE": {
microservices-middleware/server/src/paymentmanagement/utils/loanDetailsHelper.js:15:hardcoded string:	            keyName: "referenceId"
microservices-middleware/server/src/paymentmanagement/utils/loanDetailsHelper.js:17:hardcoded string:	        "BAJAJ_VIA_PAYU": {
microservices-middleware/server/src/paymentmanagement/utils/loanDetailsHelper.js:19:hardcoded string:	            keyName: "txnid"
microservices-middleware/server/src/paymentmanagement/utils/loanDetailsHelper.js:22:hardcoded string:	    const projection =  { "loanDetails.nachType": 1, _id: 0, amount: 1, source: 1, nachType: 1 };
microservices-middleware/server/src/paymentmanagement/utils/loanDetailsHelper.js:25:hardcoded string:	        case "BAJAJ": {
microservices-middleware/server/src/paymentmanagement/utils/loanDetailsHelper.js:26:hardcoded object:	            data = await PALoans.findOne({ where: { appId } }) || {};
microservices-middleware/server/src/paymentmanagement/utils/loanDetailsHelper.js:29:hardcoded string:	        case "BAJAJ_VIA_PAYU":
microservices-middleware/server/src/paymentmanagement/utils/loanDetailsHelper.js:30:hardcoded string:	        case "SHOPSE": {
microservices-middleware/server/src/paymentmanagement/utils/loanDetailsHelper.js:31:hardcoded array:	            const {collection, keyName} = map[provider];
microservices-middleware/server/src/paymentmanagement/utils/loanDetailsHelper.js:32:hardcoded array:	            data = await collection.findOne({ [keyName]: appId }, projection).lean() || {};
microservices-middleware/server/src/paymentmanagement/utils/loanDetailsHelper.js:36:hardcoded object:	            data = true ? await LoanAggregator.findOne({ appId }, projection).lean()|| {}
microservices-middleware/server/src/paymentmanagement/utils/loanDetailsHelper.js:37:hardcoded string:	                : (await callLmsLoanDetails({ key: "loanaggregatorApp", value: appId }))
microservices-middleware/server/src/paymentmanagement/utils/loanDetailsHelper.js:38:hardcoded string:	                    ?.find(loan => !["soft_deleted"].includes(loan?.status) && appId === loan?.appId) || {};
microservices-middleware/server/src/paymentmanagement/utils/loanDetailsHelper.js:42:hardcoded string:	    let { loanDetails = {}, loanAmount: amount = 0, source = "", nachType = "" } = data;
microservices-middleware/server/src/paymentmanagement/utils/loanDetailsHelper.js:43:hardcoded string:	    amount = !amount ? get(data, "amount", 0) : amount;
microservices-middleware/server/src/paymentmanagement/utils/loanDetailsHelper.js:44:hardcoded string:	    const loanDetailsNachType = get(loanDetails, "nachType", "");
