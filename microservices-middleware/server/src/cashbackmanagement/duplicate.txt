microservices-middleware/server/src/cashbackmanagement/cashbackRoutes.js:1:hardcoded file path:const Router = require('express-promise-router');
microservices-middleware/server/src/cashbackmanagement/cashbackRoutes.js:2:hardcoded file path:const controller = require('./cashbackController');
microservices-middleware/server/src/cashbackmanagement/cashbackRoutes.js:4:hardcoded object:const router = Router({ mergeParams: true });
microservices-middleware/server/src/cashbackmanagement/cashbackRoutes.js:7:hardcoded string:    const baseRoute = '/cashback';
microservices-middleware/server/src/cashbackmanagement/cashbackRoutes.js:9:hardcoded object:    router.route(`${baseRoute}/getCashbackDetails`)
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:1:hardcoded object:const { get, uniq, isEmpty } = require('lodash');
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:2:hardcoded string:const { DraftOrder } = require('@byjus-orders/nexemplum/oms');
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:3:hardcoded file path:const Cashback = require('../../models/CashbackTransaction');
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:4:hardcoded object:const { order: cbOrderConstant, comment: cbCommentConstant } = require('./utils/cashbackContants');
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:5:hardcoded object:const { isDevEnv } = require('../../lib/featureHelper')
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:6:hardcoded file path:const Promise = require('bluebird');
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:8:hardcoded variable:const getAllCashbacks = async (details) => {
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:9:hardcoded object:    let { draftOrder, prospectId, validity } = details
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:10:hardcoded object:    const { salesDetails = {}, customerDetails = {}, _id } = draftOrder;
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:11:hardcoded object:    const { directSalesBy, salesAppointmentBy } = salesDetails;
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:12:hardcoded object:    const { parentMobileNo, studentMobileNo } = customerDetails;
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:13:hardcoded array:    const contacts = uniq([parentMobileNo, studentMobileNo].filter(ele => ele));
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:14:hardcoded array:    const uniqueOwners = uniq([directSalesBy]).filter(ele => ele).map(ele => ele.toLowerCase());
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:16:hardcoded array:    let result = [];
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:17:hardcoded string:    const cashbackAppliedOrders = await DraftOrder.find({"leadDetails.prospectId": prospectId});
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:18:hardcoded variable:    const docs = await Cashback.find({
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:19:hardcoded object:        mobileNo: { $in: contacts },
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:20:hardcoded string:        status: { $in: ["link_generated", "customer_details_saved"] }
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:25:hardcoded variable:            const contact = doc.mobileNo;
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:26:hardcoded variable:            const obj = {
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:32:hardcoded string:                percentageToCustomer: get(doc.cashbackDetails, "percentageToCustomer"),
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:33:hardcoded string:                percentageToSalesPerson: get(doc.cashbackDetails, "percentageToSalesPerson")
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:35:hardcoded string:            if (!uniqueOwners.includes(get(doc, "salesEmail", "").toLowerCase())) {
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:36:hardcoded string:                obj.reason = `Cashback does not belong to: ${uniqueOwners.join(" or ")}`;
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:37:hardcoded string:                obj.remark = "unauthorized";
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:38:hardcoded string:            } else if (doc.status === "link_generated") {
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:39:hardcoded string:                obj.reason = "Customer didn't fill the details.";
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:40:hardcoded string:                obj.remark = "details_missing";
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:41:hardcoded string:            } else if (doc.status === "customer_details_saved") {
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:43:hardcoded string:                obj.remark = "success";
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:45:hardcoded number:            for(let i = 0; i < cashbackAppliedOrders.length; i++) {
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:46:hardcoded array:                const { cashbackDetails } = cashbackAppliedOrders[i]
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:47:hardcoded object:                const { cashbackCode } = cashbackDetails
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:49:hardcoded string:                    obj.reason = "Cashback already applied"
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:50:hardcoded string:                    obj.remark = "not applicable"
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:55:hardcoded string:            if(['quarterly_pack','TRIAL_PACK', 'mini_learning_program'].includes(validity)) {
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:56:hardcoded string:                obj.reason = "Cashback not available for trial and mlp orders"
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:57:hardcoded string:                obj.remark = "not applicable"
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:68:hardcoded object: * @param {Object} draftOrder 
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:69:hardcoded object: * @param {Object} productDetails 
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:71:hardcoded variable:const manageCashbacks = async (draftOrder, productDetails) => {
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:72:hardcoded object:    const { student } = productDetails
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:73:hardcoded object:    const { validity } = student
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:74:hardcoded object:    const cashbacks = await getAllCashbacks({draftOrder, validity});
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:75:hardcoded variable:    const percentageToCustomer = cashbacks.map(res => res.percentageToCustomer)
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:76:hardcoded variable:    const percentageToSalesPerson = cashbacks.map(res => res.percentageToSalesPerson)
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:79:hardcoded string:    const finalPrice = get(productDetails, 'finalPrice', 0);
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:80:hardcoded variable:    const isPassedMinOrderValueCriteria = finalPrice >= cbOrderConstant.MIN_ORDER_VALUE_FOR_CASHBACK;
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:81:hardcoded string:    const paymentType = get(productDetails, "paymentType");
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:83:hardcoded number:    amountToCustomer = (finalPrice * percentageToCustomer) / 100;
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:84:hardcoded number:    amountToSalesPerson = (finalPrice * percentageToSalesPerson) / 100
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:87:hardcoded array:    let unutilizedCashbacks = [];
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:89:hardcoded number:    if (cashbacks.length > 0) {
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:90:hardcoded variable:        const parentCashback = cashbacks.find(cb => cb.isParentMobileNo);
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:92:hardcoded variable:        const commonCashbackSetObj = {
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:93:hardcoded string:            "cashbackDetails.draftOrderId": draftOrder._id,
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:94:hardcoded string:            "cashbackDetails.totalOrderAmount": finalPrice,
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:95:hardcoded string:            "cashbackDetails.paymentTypeInOrder": paymentType,
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:96:hardcoded string:            "cashbackDetails.amountToCustomer": amountToCustomer,
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:97:hardcoded string:            "cashbackDetails.amountToSalesPerson": amountToSalesPerson,
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:98:hardcoded string:            "timestamps.orderPunchedAt": new Date()
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:101:hardcoded string:        if (paymentType === "EMI") {
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:105:hardcoded string:                cb.newStatus = "hard_deleted";
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:112:hardcoded string:                redeemedCashback = { ...parentCashback, newStatus: "redeemed" };
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:113:hardcoded variable:                const doc = await Cashback.findOneAndUpdate(
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:114:hardcoded object:                    { cashbackCode: parentCashback.cashbackCode },
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:117:hardcoded string:                            status: "redeemed",
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:120:hardcoded object:                        $push: { comments: getCashbackCommentObj(cbCommentConstant.REDEEMED_SUCCESS) }
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:123:hardcoded string:                if (!doc) throw new Error("Unable to redeem cashback. Cashback code doesn't exist.");
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:125:hardcoded number:                /** hard delete all other cashback codes as 1 cashback already applied for this order */
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:127:hardcoded string:                    cb.newStatus = "hard_deleted";
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:135:hardcoded string:                    cb.newStatus = "hard_deleted";
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:139:hardcoded string:                if (['quarterly_pack','TRIAL_PACK', 'mini_learning_program'].includes(validity)) {
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:142:hardcoded string:                        newStatus: "hard_deleted", 
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:148:hardcoded string:                        newStatus: "unutilized", 
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:155:hardcoded number:                /** mark 1 cashback code as unutilized, remaining hard_deleted */
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:157:hardcoded number:                    if (indx === 0) {
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:158:hardcoded string:                        cb.newStatus = "unutilized";
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:161:hardcoded string:                        cb.newStatus = "hard_deleted";
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:172:hardcoded string:                cb.newStatus = "hard_deleted";
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:186:hardcoded variable:const lockUnutilizedCashbacks = async (unutilizedCashbacks, commonCashbackSetObj) => {
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:191:hardcoded object:                { cashbackCode: cb.cashbackCode },
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:197:hardcoded object:                    $push: { comments: getCashbackCommentObj(cb.comment) }
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:204:hardcoded variable:const getCashbackCommentObj = (comment) => {
microservices-middleware/server/src/cashbackmanagement/cashbackHelper.js:207:hardcoded string:        commentedBy: "system",
