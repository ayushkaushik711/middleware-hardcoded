microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:1:hardcoded object:const { NotFoundError, BadRequestError } = require('../../../lib/errors');
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:2:hardcoded object:const { get, isEmpty } = require('lodash');
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:4:hardcoded file path:const logger = require('../../../lib/bunyan-logger')('Voucher Controller');
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:5:hardcoded string:const { VoucherTransaction } = require('@byjus-orders/nexemplum/oms');
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:8:hardcoded variable:const validateVoucherAndGetBaseValue = async (voucherCode, primaryMobileNo) => {
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:9:hardcoded string:    if (!voucherCode) throw new Error("Voucher is missing")
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:11:hardcoded string:        logger.info({ method: "validateVoucherAndGetBaseValue", voucherCode });
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:12:hardcoded object:        const voucherDetails = await VoucherTransaction.findOne({ voucherCode }).lean();
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:15:hardcoded object:            const { mobileNo, status, discountDetail = {}, expiryDate, salesEmail: salesPerson, type: voucherType, productType } = voucherDetails;
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:16:hardcoded object:            const { type: discountType, orderAmount } = discountDetail;
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:17:hardcoded string:            let studentMob = primaryMobileNo.split(",")[0];
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:18:hardcoded string:            studentMob = studentMob.split(",")[0];
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:19:hardcoded string:            studentMob = studentMob.split("-");
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:20:hardcoded number:            studentMob = studentMob.length > 1 ? studentMob[1] : studentMob[0];
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:22:hardcoded string:            if (status !== "unutilized") {
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:23:hardcoded string:                if (status === 'redeemed') {
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:24:hardcoded object:                    throw new Error(`Voucher is already redeemed by ${salesPerson}`);
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:26:hardcoded string:                    throw new Error("Voucher code has invalid status")
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:28:hardcoded number:            } else if (mobileNo !== `+91-${studentMob}`) {
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:29:hardcoded object:                throw new Error(`This voucher code is not linked to the lead's primary mobile number :${studentMob}`);
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:31:hardcoded string:                throw new Error("Voucher code has expired");
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:33:hardcoded number:                let discountPercentage = Number((discountDetail.value).slice(0, -1))
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:35:hardcoded number:                if (discountPercentage >= 40 && discountPercentage <= 45) {
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:36:hardcoded number:                    discountPercentage = 40
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:37:hardcoded number:                } else if (discountPercentage >= 30 && discountPercentage <= 35) {
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:38:hardcoded number:                    discountPercentage = 30
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:39:hardcoded number:                } else if (discountPercentage <= 20) {
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:40:hardcoded number:                    discountPercentage = 15
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:42:hardcoded variable:                const details = {
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:45:hardcoded string:                        value: discountPercentage+"%",
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:51:hardcoded string:                    "discountPercentage": discountPercentage, 
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:52:hardcoded string:                    "voucherDetails": details
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:56:hardcoded string:            throw new Error("Voucher code does not exists in the system")
microservices-middleware/server/src/quotationmanagement/vouchermanagement/voucherController.js:60:hardcoded string:        throw new Error(error || "Error in validating voucher for scholarship")
