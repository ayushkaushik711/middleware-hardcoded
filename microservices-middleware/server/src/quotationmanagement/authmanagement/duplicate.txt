microservices-middleware/server/src/quotationmanagement/authmanagement/authRoutes.js:1:hardcoded file path:const Router = require('express-promise-router');
microservices-middleware/server/src/quotationmanagement/authmanagement/authRoutes.js:2:hardcoded file path:const controller = require('./authController');
microservices-middleware/server/src/quotationmanagement/authmanagement/authRoutes.js:4:hardcoded object:const router = Router({ mergeParams: true })
microservices-middleware/server/src/quotationmanagement/authmanagement/authRoutes.js:7:hardcoded string:    const baseRoute = '/quotation';
microservices-middleware/server/src/quotationmanagement/authmanagement/authRoutes.js:9:hardcoded object:    router.route(`${baseRoute}/authenticateLeadsquaredUser`)
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:1:hardcoded object:const { get, map, flattenDeep } = require('lodash');
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:3:hardcoded string:const { Quotation, QuotationPriceAndScholarship } = require('@byjus-orders/nexemplum/oms');
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:5:hardcoded file path:const authConfig = require('../../authmanagement/utils/authConfig');
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:6:hardcoded object:const { fetchEmployeeDetails, getConsolidatedPermissions } = require('../../authmanagement/authController')
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:7:hardcoded object:const { authenticateUserUsingEmailId, fetchFeatures } = require('../../authmanagement/authHelper');
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:8:hardcoded object:const { getFeatureEnableList } = require('../../authmanagement/featureConfigHelper');
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:9:hardcoded file path:const logger = require('../../../lib/bunyan-logger')('Auth Controller');
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:10:hardcoded object:const { isArray } = require('lodash');
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:12:hardcoded variable:const authenticateLeadsquaredUser = async (req, res) => {
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:13:hardcoded string:    //logger.info({ method: 'authenticateLeadsquaredUser', msg: "Authenticating Leadsquared User", body: req.body });
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:14:hardcoded object:    const lsDetails = { ...req.body };
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:15:hardcoded string:    let { accountNumber, prospectId, createdById, userEmail, UserEmailId = "" } = lsDetails;
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:16:hardcoded array:    let quotation = []
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:17:hardcoded array:    let quotationPriceAndScholarships = []
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:19:hardcoded string:    if (!prospectId) throw new Error('Prospect Id is empty');
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:20:hardcoded string:    if (!accountNumber) throw new Error('Account Number is empty');
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:21:hardcoded string:    if (!userEmail) throw new Error('User Email is empty');
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:23:hardcoded variable:    const lsAccountDetails = authConfig.getLSAccountDetails(accountNumber);
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:24:hardcoded object:    if (!lsAccountDetails) throw new Error(`LS - ${accountNumber} details is not configured.
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:27:hardcoded string:    lsDetails["jwtSecretKey"] = authConfig.jwtAuthTokenKey;
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:30:hardcoded variable:        const authenticationDetails = await authenticateUserUsingEmailId(lsDetails);
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:31:hardcoded variable:        // const authenticationDetails = await leadsquaredUtil.authenticateLeadsquaredUser(lsDetails);
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:32:hardcoded object:        const { isAuthenticated, loggedInEmailId } = authenticationDetails || {};
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:33:hardcoded variable:        const env = process.env.NODE_ENV;
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:35:hardcoded string:            const leadSource = get(lsDetails, "LeadSource", "").toLowerCase().trim().replace(/\s+/g, '');
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:36:hardcoded variable:            const loggedInEmployee = await fetchEmployeeDetails(loggedInEmailId);
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:37:hardcoded variable:            const userPermissions = getConsolidatedPermissions(loggedInEmployee);
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:38:hardcoded string:            let { department, email = "", reportingTo = {} } = loggedInEmployee;
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:40:hardcoded number:            department = isArray(department) ? department[0] : department;
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:41:hardcoded string:            department = department && ![null, undefined, "undefined", "null"].includes(department) ? department : "";
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:43:hardcoded string:            let isOutboundOrderPunchingRestricted = leadSource === "outboundphonecall" && !["supply_chain", "user_experience"].includes(department.toLowerCase()) && ["development", "local"].includes(env);
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:44:hardcoded string:            authenticationDetails["isOutboundOrderPunchingRestricted"] = isOutboundOrderPunchingRestricted;
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:47:hardcoded object:            let featureEnableList = {};
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:48:hardcoded variable:            const featuresList = await fetchFeatures();
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:52:hardcoded string:            loggedInEmployee["permissions"] = userPermissions;
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:53:hardcoded string:            authenticationDetails["user"] = loggedInEmployee;
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:54:hardcoded string:            if (["development", "local"].includes(env)) {
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:55:hardcoded string:                quotation = await Quotation.find({ 'leadDetails.prospectId': prospectId }, { otpDetails: 0 }).sort({ createdAt: -1 });
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:58:hardcoded string:                quotation = await Quotation.find({ 'leadDetails.prospectId': prospectId }).sort({ createdAt: -1 });
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:60:hardcoded string:            quotationPriceAndScholarships = await QuotationPriceAndScholarship.find({ prospectId, status: { "$nin": ["soft_deleted", "initiated"] } }).sort({ createdAt: -1 });
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:71:hardcoded number:            return res.status(500).json({
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:74:hardcoded string:                message: 'Error in Authenticating leadsquared user'
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:78:hardcoded string:        logger.info({ method: 'authenticateLeadsquaredUser', msg: "Authenticating leadsquared user", error });
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:79:hardcoded number:        return res.status(500).json({
microservices-middleware/server/src/quotationmanagement/authmanagement/authController.js:82:hardcoded string:            message: get(error, 'message') || error || 'Error in Authenticating leadsquared user'
