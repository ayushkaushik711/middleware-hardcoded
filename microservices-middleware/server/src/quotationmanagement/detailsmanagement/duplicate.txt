microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerRoutes.js:1:hardcoded file path:const Router = require('express-promise-router');
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerRoutes.js:2:hardcoded file path:const controller = require('./salesAndCustomerController');
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerRoutes.js:5:hardcoded object:  const router = Router({ mergeParams: true });
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerRoutes.js:6:hardcoded string:  const baseRoute = '/quotation'
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerRoutes.js:8:hardcoded object:  router.route(`${baseRoute}/getSalesPersonDetails`)
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerRoutes.js:13:hardcoded object:  router.route(`${baseRoute}/saveSalesAndCustomerDetails`)
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerRoutes.js:18:hardcoded object:  router.route(`${baseRoute}/deleteQuotation`)
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:1:hardcoded object:const { get, random, padStart, uniq, isEmpty, find, size, flattenDeep } = require('lodash');
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:2:hardcoded file path:const moment = require('moment');
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:3:hardcoded object:const { Op } = require("sequelize");
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:5:hardcoded object:const { BadRequestError } = require('../../../lib/errors');
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:6:hardcoded object:const { isDevEnv, getSalesComments } = require('../../../lib/featureHelper');
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:8:hardcoded string:const { Employee: PgEmployee } = require('@byjus-orders/npgexemplum')
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:9:hardcoded string:const { Quotation, OrderhiveSalesperson: OrderhiveSalesPerson } = require('@byjus-orders/nexemplum/oms');
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:10:hardcoded object:const { callAakashToGetPSID, callNucleusApi, callCxmsApi } = require('../../../utility/externalApiUtility')
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:11:hardcoded object:const { allowedOpSubDepartments } = require('../../detailsmanagement/constant')
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:12:hardcoded object:const { getReporteesList } = require('../../usermanagement/userController');
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:14:hardcoded file path:const bunyan = require('bunyan');
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:15:hardcoded variable:const logger = bunyan.createLogger({
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:16:hardcoded string:  name: 'SalesPersonDetail controller',
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:17:hardcoded environment variable:  env: process.env.NODE_ENV,
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:23:hardcoded variable:const getSalesPersonDetails = async (req, res) => {
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:25:hardcoded object:    let filter = Object.assign({}, req.body.filter);
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:26:hardcoded array:    let list = [];
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:27:hardcoded number:    let totalCount = 0;
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:28:hardcoded string:    if (["bda", "bdt"].includes(req?.user?.role)) {
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:29:hardcoded string:      filter["username"] = {
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:31:hardcoded string:        $options: "i",
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:35:hardcoded string:    filter['username'] = filter['username'] ? filter['username'] : { "$regex": "", "$options": "i" };
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:36:hardcoded string:    const splitFilter = filter['username']["$regex"]?.split('*')
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:37:hardcoded string:    const username = get(splitFilter, '0', '').substring(0, get(splitFilter, '0', '').length - 1)
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:38:hardcoded string:    const domain = get(splitFilter, '1', '').replace(/[^0-9A-Z]+/gi, "")
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:39:hardcoded string:    let { reporters: reporteeList = {} } = !(req?.user?.permissions.includes("ORDER_OTP_IGNORE_CHECK")
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:40:hardcoded string:      || ["bda", "bdt"].includes(req?.user?.role || "")) && await getReporteesList(req.user.email);
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:41:hardcoded array:    reporteeList = flattenDeep(Object.values(reporteeList)).map(item => item.email) || [];
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:43:hardcoded variable:    let employeeFilter = {
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:45:hardcoded array:        [Op.in]: allowedOpSubDepartments
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:48:hardcoded array:        [Op.like]: `%${domain}%`,
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:49:hardcoded array:        [Op.iLike]: `%${username}%`
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:51:hardcoded string:      status: 'active'
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:60:hardcoded array:          [Op.in]: reporteeList
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:65:hardcoded number:    const { docs = [], total = 0 } = await PgEmployee.paginate({
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:67:hardcoded string:      attributes: ['id', 'email'],
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:68:hardcoded number:      paginate: 50
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:70:hardcoded variable:    const formattedData = docs.map(ele => {
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:85:hardcoded string:    logger.error({ method: 'getSalesPersonDetails-Quotation', error }, 'Error occured');
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:86:hardcoded number:    return res.status(500).json({
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:87:hardcoded number:      statusCode: 500,
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:89:hardcoded string:        response: 'Error while getting data from db.',
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:97:hardcoded variable:const saveSalesAndCustomerDetails = async (req, res) => {
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:100:hardcoded object:    let { identifier, leadDetails, customerDetails, selectedPriceAndScholarship } = req.body;
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:101:hardcoded string:    const { email } = get(req, 'user', {});
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:103:hardcoded string:      throw new BadRequestError("Parameter missing");
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:106:hardcoded object:    let quotation = {};
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:107:hardcoded object:    let partnerIdentifierDetails = {}
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:109:hardcoded object:    const { directSalesBy } = customerDetails
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:110:hardcoded variable:    const customerId = await getCustomerId(customerDetails);
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:112:hardcoded variable:    const comments = getSalesComments(email, directSalesBy);
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:114:hardcoded variable:    let updateData = {
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:119:hardcoded string:      status: "details_saved",
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:121:hardcoded array:      [`actionDetails.detailsSavedAt`]: new Date(),
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:122:hardcoded array:      [`actionDetails.detailsSavedBy`]: email,
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:123:hardcoded object:      voucherDetails: {},
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:128:hardcoded object:      const { partnerIdentifierDetails: oldPartnerIdentifierDetails, priceAndScholarshipId = null, partnerApiResponse = {}, voucherDetails = {} } = selectedPriceAndScholarship
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:130:hardcoded string:      updateData["priceAndScholarshipId"] = priceAndScholarshipId
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:131:hardcoded string:      updateData["partnerApiResponse"] = partnerApiResponse
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:132:hardcoded string:      updateData["voucherDetails"] = voucherDetails
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:134:hardcoded string:        updateData["partnerIdentifierDetails"] = oldPartnerIdentifierDetails
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:137:hardcoded variable:        const aakashPSId = await getAakashPSID(customerDetails);
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:138:hardcoded variable:        const newPartnerIdentifierDetails = {
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:139:hardcoded string:          identifierType: "PSID",
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:142:hardcoded string:        updateData["partnerIdentifierDetails"] = newPartnerIdentifierDetails
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:146:hardcoded variable:      const aakashPSId = await getAakashPSID(customerDetails);
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:147:hardcoded variable:      const newPartnerIdentifierDetails = {
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:148:hardcoded string:        identifierType: "PSID",
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:151:hardcoded string:      updateData["partnerIdentifierDetails"] = newPartnerIdentifierDetails
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:156:hardcoded object:      await Quotation.findOneAndUpdate({ _id: identifier }, {
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:162:hardcoded variable:      const newQuotation = new Quotation({
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:176:hardcoded string:    logger.error({ method: 'saveSalesAndCustomerDetails-Quotation', error }, 'Error occured');
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:181:hardcoded variable:const getAakashPSID = async (customerDetails) => {
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:182:hardcoded object:  let { studentName, parentName, dob, parentMobileNo } = customerDetails
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:186:hardcoded string:    dob = dob.split("T")
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:187:hardcoded string:    dob = dob[0].split("-")
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:188:hardcoded string:    dob = dob[2] + "-" + dob[1] + "-" + dob[0].toString().substr(-2)
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:189:hardcoded string:    // dob = dob.getDate()+"-"+dob.getMonth()+"-"+ dob.getFullYear().toString().substr(-2)
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:191:hardcoded variable:    const payload = {
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:198:hardcoded string:    let aakashPSID = ""
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:201:hardcoded number:      let response = aakashPSID[0]
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:202:hardcoded object:      let { EMPLID } = response
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:207:hardcoded string:      aakashPSID = ""
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:211:hardcoded string:    logger.error({ method: 'getAakashPSID-Quotation', error }, 'Error occured');
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:216:hardcoded variable:const getCustomerId = async (customerDetails) => {
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:217:hardcoded object:  let { studentName, parentName, email, primaryMobileNo } = customerDetails
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:219:hardcoded variable:    const payload = {
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:224:hardcoded string:      "source": "kart"
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:227:hardcoded string:    // const uri = 'postordermanagement/cxms/customers-beta/lead-customers/add/v2'
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:229:hardcoded string:    uri = 'customer/add'
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:230:hardcoded string:    user = await callCxmsApi(uri, "POST", payload, true);
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:231:hardcoded object:    const { customerId, isExisting } = user
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:235:hardcoded object:      throw new Error(`Error in customer creation :  ${error} \n Please try again or contact cxms support.`);
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:238:hardcoded object:    throw new Error(`Error in customer creation :  ${error} \n Please try again or contact cxms support.`);
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:242:hardcoded variable:const generateQuotationId = () => {
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:243:hardcoded string:  const currentDate = moment().format('YYMMDDHHmmss');
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:244:hardcoded number:  const randomNumber = random(1, 999);
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:245:hardcoded number:  const paddedRandomNumber = padStart(randomNumber, 4, 0);
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:246:hardcoded object:  const quotationId = `QO-${currentDate}${paddedRandomNumber}`;
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:250:hardcoded variable:const deleteQuotation = async (req, res) => {
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:251:hardcoded object:  let { quotationId } = req.body;
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:255:hardcoded object:      await Quotation.findOneAndUpdate({ quotationId: quotationId }, {
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:257:hardcoded string:          status: "soft_deleted"
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:263:hardcoded string:      message: "Quotation deleted successfully"
microservices-middleware/server/src/quotationmanagement/detailsmanagement/salesAndCustomerController.js:266:hardcoded string:    logger.info({ method: 'deleteQuotation', msg: `Issue in deleting Quotation ${quotationId}`, error });
