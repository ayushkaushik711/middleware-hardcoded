microservices-middleware/server/src/kartbeta/product/controller.js:3:hardcoded string:	const { StudentOrderBatchCentreDetail } = require('@byjus-orders/nexemplum/stms')
microservices-middleware/server/src/kartbeta/product/controller.js:4:hardcoded string:	const { DraftOrder: DraftOrderLegacy } = require('@byjus-orders/nexemplum/oms')
microservices-middleware/server/src/kartbeta/product/controller.js:6:hardcoded string:	  OrderStudentMapping, DraftOrder, DoLineItem } = require('@byjus-orders/npgexemplum');
microservices-middleware/server/src/kartbeta/product/controller.js:10:hardcoded variable:	const getBoards = async (req, res) => {
microservices-middleware/server/src/kartbeta/product/controller.js:11:hardcoded object:	  const { spId } = req.body;
microservices-middleware/server/src/kartbeta/product/controller.js:12:hardcoded variable:	  const boardIds = await SalesProgramRecipe.findAll({
microservices-middleware/server/src/kartbeta/product/controller.js:13:hardcoded string:	    attributes: ['boardId'],
microservices-middleware/server/src/kartbeta/product/controller.js:19:hardcoded array:	    let boardIdArray = [];
microservices-middleware/server/src/kartbeta/product/controller.js:21:hardcoded object:	      const { dataValues } = obj;
microservices-middleware/server/src/kartbeta/product/controller.js:22:hardcoded string:	      boardIdArray.push(get(dataValues, 'boardId', ''));
microservices-middleware/server/src/kartbeta/product/controller.js:24:hardcoded variable:	    const boards = await BoardMaster.findAll({
microservices-middleware/server/src/kartbeta/product/controller.js:25:hardcoded string:	      attributes: ['board', 'boardId'],
microservices-middleware/server/src/kartbeta/product/controller.js:31:hardcoded object:	      const { dataValues } = obj;
microservices-middleware/server/src/kartbeta/product/controller.js:35:hardcoded number:	      res.json({ boards, status: 200 });
microservices-middleware/server/src/kartbeta/product/controller.js:38:hardcoded string:	    console.log(er || 'Failed to get boards from board master');
microservices-middleware/server/src/kartbeta/product/controller.js:42:hardcoded variable:	const getBtcUpgradeInitialGrades = async (orderId) => {
microservices-middleware/server/src/kartbeta/product/controller.js:43:hardcoded string:	  const draftOrderData = await DraftOrderLegacy.findOne({ 'orderId': orderId }).lean();
microservices-middleware/server/src/kartbeta/product/controller.js:44:hardcoded object:	  const { productDetails = {} } = draftOrderData || {};
microservices-middleware/server/src/kartbeta/product/controller.js:45:hardcoded array:	  const { students = [] } = productDetails;
microservices-middleware/server/src/kartbeta/product/controller.js:46:hardcoded string:	  const { initialClass = '', validity = '', finalClass = '' } = students[0] || {};
microservices-middleware/server/src/kartbeta/product/controller.js:49:hardcoded variable:	  const currDate = new Date();
microservices-middleware/server/src/kartbeta/product/controller.js:50:hardcoded variable:	  const currYear = currDate.getFullYear();
microservices-middleware/server/src/kartbeta/product/controller.js:51:hardcoded variable:	  const currMonth = currDate.getMonth()
microservices-middleware/server/src/kartbeta/product/controller.js:53:hardcoded array:	  let initialGradeOptions = []
microservices-middleware/server/src/kartbeta/product/controller.js:55:hardcoded variable:	  let currentInitialClass = parseInt(initialClass)
microservices-middleware/server/src/kartbeta/product/controller.js:58:hardcoded number:	  if (currMonth >= 1) { // month value start from 0 (jan-0)
microservices-middleware/server/src/kartbeta/product/controller.js:59:hardcoded number:	    initialGradeOptions.push((currentInitialClass + 1).toString())
microservices-middleware/server/src/kartbeta/product/controller.js:78:hardcoded variable:	const getGrades = async (req, res) => {
microservices-middleware/server/src/kartbeta/product/controller.js:79:hardcoded object:	  const { spId, boardId, type, existingOrderId } = req.body;
microservices-middleware/server/src/kartbeta/product/controller.js:83:hardcoded variable:	    const gradeIds = await SalesProgramRecipe.findAll({
microservices-middleware/server/src/kartbeta/product/controller.js:84:hardcoded string:	      attributes: ['gradeId'],
microservices-middleware/server/src/kartbeta/product/controller.js:91:hardcoded array:	      let gradeIdArray = [];
microservices-middleware/server/src/kartbeta/product/controller.js:93:hardcoded object:	        const { dataValues } = obj;
microservices-middleware/server/src/kartbeta/product/controller.js:94:hardcoded string:	        gradeIdArray.push(get(dataValues, 'gradeId', ''));
microservices-middleware/server/src/kartbeta/product/controller.js:97:hardcoded string:	        attributes: ['grade', 'gradeId'],
microservices-middleware/server/src/kartbeta/product/controller.js:103:hardcoded string:	      if (type == 'upgrade' && existingOrderId) {
microservices-middleware/server/src/kartbeta/product/controller.js:104:hardcoded variable:	        const btcGrades = await getBtcUpgradeInitialGrades(existingOrderId);
microservices-middleware/server/src/kartbeta/product/controller.js:106:hardcoded object:	          const { dataValues } = ele;
microservices-middleware/server/src/kartbeta/product/controller.js:107:hardcoded string:	          const { grade = '' } = dataValues || {}
microservices-middleware/server/src/kartbeta/product/controller.js:112:hardcoded object:	        const { dataValues } = obj;
microservices-middleware/server/src/kartbeta/product/controller.js:116:hardcoded number:	        res.json({ grades, status: 200 });
microservices-middleware/server/src/kartbeta/product/controller.js:119:hardcoded number:	          status: 404,
microservices-middleware/server/src/kartbeta/product/controller.js:120:hardcoded string:	          message: 'Failed to fetch grades for BTC product'
microservices-middleware/server/src/kartbeta/product/controller.js:130:hardcoded variable:	const getValidity = async (req, res) => {
microservices-middleware/server/src/kartbeta/product/controller.js:131:hardcoded object:	  const { spId, boardId, gradeId } = req.body;
microservices-middleware/server/src/kartbeta/product/controller.js:133:hardcoded variable:	    const validityIds = await SalesProgramRecipe.findAll({
microservices-middleware/server/src/kartbeta/product/controller.js:134:hardcoded string:	      attributes: ['validityId'],
microservices-middleware/server/src/kartbeta/product/controller.js:143:hardcoded array:	      let validityIdArray = [];
microservices-middleware/server/src/kartbeta/product/controller.js:146:hardcoded object:	        const { dataValues } = obj;
microservices-middleware/server/src/kartbeta/product/controller.js:147:hardcoded string:	        validityIdArray.push(get(dataValues, 'validityId', ''));
microservices-middleware/server/src/kartbeta/product/controller.js:150:hardcoded variable:	      const validities = await ValidityMaster.findAll({
microservices-middleware/server/src/kartbeta/product/controller.js:151:hardcoded string:	        attributes: ['validity', 'validityId'],
microservices-middleware/server/src/kartbeta/product/controller.js:158:hardcoded object:	        const { dataValues } = obj;
microservices-middleware/server/src/kartbeta/product/controller.js:163:hardcoded number:	        res.json({ validities, status: 200 });
microservices-middleware/server/src/kartbeta/product/controller.js:165:hardcoded string:	        res.json({ status: 404, message: 'Failed to validity for BTC' });
microservices-middleware/server/src/kartbeta/product/controller.js:169:hardcoded string:	    console.log(er || 'Error in fetching validity for BTC');
microservices-middleware/server/src/kartbeta/product/controller.js:170:hardcoded object:	    res.json({ er });
microservices-middleware/server/src/kartbeta/product/controller.js:174:hardcoded variable:	const saveDraftOrderStudentDetails = async (req, res) => {
microservices-middleware/server/src/kartbeta/product/controller.js:175:hardcoded object:	  let { product = {}, draftOrderId, studentId } = req.body
microservices-middleware/server/src/kartbeta/product/controller.js:176:hardcoded array:	  let { payload, products = [], finalPrice, maxPrice, minPrice } = product
microservices-middleware/server/src/kartbeta/product/controller.js:177:hardcoded string:	  let studentMapping = {}, message = '';
microservices-middleware/server/src/kartbeta/product/controller.js:186:hardcoded string:	      throw new NotFoundError("draftOrderId or StudentId is missing.")
microservices-middleware/server/src/kartbeta/product/controller.js:188:hardcoded variable:	      const draftOrderDetails = await DraftOrder.findOne({ 
microservices-middleware/server/src/kartbeta/product/controller.js:189:hardcoded object:	        where: { draftOrderId: draftOrderId }, 
microservices-middleware/server/src/kartbeta/product/controller.js:193:hardcoded object:	      const isExistingStudent = await OrderStudentMapping.findOne({ where: { draftOrderId, studentId } })
microservices-middleware/server/src/kartbeta/product/controller.js:194:hardcoded variable:	      let studentMapObject = await getStudentMappingObject(payload)
microservices-middleware/server/src/kartbeta/product/controller.js:198:hardcoded string:	        message = 'Student mapping created successfully!'
microservices-middleware/server/src/kartbeta/product/controller.js:200:hardcoded object:	        studentMapping = await OrderStudentMapping.update(studentMapObject, { where: { draftOrderId, studentId } })
microservices-middleware/server/src/kartbeta/product/controller.js:201:hardcoded string:	        message = 'Student mapping updated successfully!'
microservices-middleware/server/src/kartbeta/product/controller.js:205:hardcoded variable:	      const batchMapObject = await getBatchMappingObject(payload)
microservices-middleware/server/src/kartbeta/product/controller.js:206:hardcoded variable:	      const batchMapping = await StudentOrderBatchCentreDetail.create(batchMapObject)
microservices-middleware/server/src/kartbeta/product/controller.js:209:hardcoded variable:	      let status = draftOrderDetails.status;
microservices-middleware/server/src/kartbeta/product/controller.js:210:hardcoded number:	      if (STAGE[2].includes(status)) {
microservices-middleware/server/src/kartbeta/product/controller.js:213:hardcoded variable:	      const draftOrderUpdate = await DraftOrder.update({
microservices-middleware/server/src/kartbeta/product/controller.js:215:hardcoded object:	      }, { where: { draftOrderId: draftOrderId } })
microservices-middleware/server/src/kartbeta/product/controller.js:218:hardcoded object:	        message = `${message} \n Draft Order status updated for draftOrder id: ${draftOrderId}`
microservices-middleware/server/src/kartbeta/product/controller.js:222:hardcoded object:	      const { updatedProducts, basePrices } = await computeSkuPrice({ products, finalPrice, maxPrice })
microservices-middleware/server/src/kartbeta/product/controller.js:225:hardcoded object:	      const { skuList, errorMsg } = await getLineItems({ products: updatedProducts, basePrices, errorMsg: message, draftOrderId, studentId })
microservices-middleware/server/src/kartbeta/product/controller.js:229:hardcoded string:	        res.json({ message: errorMsg, status: 'success' })
microservices-middleware/server/src/kartbeta/product/controller.js:232:hardcoded number:	        res.json({ status: 404, message: errorMsg });
microservices-middleware/server/src/kartbeta/product/controller.js:236:hardcoded string:	    throw new NotFoundError(error || "Error in while batch mapping")
microservices-middleware/server/src/kartbeta/product/controller.js:240:hardcoded object:	const getLineItems = async ({ products, basePrices, errorMsg, draftOrderId, studentId }) => {
microservices-middleware/server/src/kartbeta/product/controller.js:241:hardcoded array:	  let skuList = [];
microservices-middleware/server/src/kartbeta/product/controller.js:244:hardcoded number:	    for (let i = 0; i < products.length; i++) {
microservices-middleware/server/src/kartbeta/product/controller.js:245:hardcoded array:	      const lineItemObject = await getLineItemsObject({ sku: products[i], draftOrderId, studentId, basePrice: basePrices[i] })
microservices-middleware/server/src/kartbeta/product/controller.js:246:hardcoded variable:	      const createdItem = await DoLineItem.create(lineItemObject)
microservices-middleware/server/src/kartbeta/product/controller.js:248:hardcoded object:	        errorMsg = `${errorMsg} \n Error in while creating line item of index : ${index}`
microservices-middleware/server/src/kartbeta/product/controller.js:253:hardcoded object:	    return { skuList, errorMsg: `${errorMsg} \n Line items created` }
microservices-middleware/server/src/kartbeta/product/controller.js:255:hardcoded string:	    throw new NotFoundError("Error in while creating line items")
microservices-middleware/server/src/kartbeta/product/helper.js:3:hardcoded variable:	const getStudentMappingObject = async (payload) => {
microservices-middleware/server/src/kartbeta/product/helper.js:7:hardcoded variable:	    const studentMappingObject = {
microservices-middleware/server/src/kartbeta/product/helper.js:8:hardcoded string:	        status: 'active',
microservices-middleware/server/src/kartbeta/product/helper.js:12:hardcoded string:	        course: 'K10',
microservices-middleware/server/src/kartbeta/product/helper.js:21:hardcoded string:	        centerId: get(batchDetails, 'centreId', ''),
microservices-middleware/server/src/kartbeta/product/helper.js:22:hardcoded string:	        batchId: get(batchDetails, 'batchId', ''),
microservices-middleware/server/src/kartbeta/product/helper.js:27:hardcoded string:	        createdBy: "xyz@byjus.com",
microservices-middleware/server/src/kartbeta/product/helper.js:28:hardcoded string:	        updatedBy: "xyz@byjus.com"
microservices-middleware/server/src/kartbeta/product/helper.js:33:hardcoded variable:	const getBatchMappingObject = async (payload) => {
microservices-middleware/server/src/kartbeta/product/helper.js:34:hardcoded string:	    const { studentId='', quotationId='', draftOrderId='', orderId='', batchDetails } = payload;
microservices-middleware/server/src/kartbeta/product/helper.js:35:hardcoded object:	    const centreDetails = await getCentreDetails({...payload})
microservices-middleware/server/src/kartbeta/product/helper.js:36:hardcoded variable:	    const batchMappingObject = {
microservices-middleware/server/src/kartbeta/product/helper.js:42:hardcoded array:	        electiveDetails: [],
microservices-middleware/server/src/kartbeta/product/helper.js:43:hardcoded array:	        doubtClassDetails: [],
microservices-middleware/server/src/kartbeta/product/helper.js:46:hardcoded string:	        createdBy: "xyz@byjus.com",
microservices-middleware/server/src/kartbeta/product/helper.js:48:hardcoded string:	        updatedBy: "xyz@byjus.com"
microservices-middleware/server/src/kartbeta/product/helper.js:54:hardcoded variable:	const getRegSkuPrice = (details) => {
microservices-middleware/server/src/kartbeta/product/helper.js:55:hardcoded object:	    let {products, finalPrice, tabletPrice} = details || {};
microservices-middleware/server/src/kartbeta/product/helper.js:56:hardcoded string:	    const reqistrationSkus = products.filter(ele => ele.category == 'btc_registration') || null;
microservices-middleware/server/src/kartbeta/product/helper.js:58:hardcoded number:	    let regSkuPrice = 0;
microservices-middleware/server/src/kartbeta/product/helper.js:60:hardcoded variable:	    const totalRegSkuPrice = reqistrationSkus.reduce((acc, sku) => {
microservices-middleware/server/src/kartbeta/product/helper.js:62:hardcoded number:	    }, 0);
microservices-middleware/server/src/kartbeta/product/helper.js:70:hardcoded number:	    if (products.length > 0) {
microservices-middleware/server/src/kartbeta/product/helper.js:72:hardcoded string:	            if (sku.category == 'btc_registration') {
microservices-middleware/server/src/kartbeta/product/helper.js:79:hardcoded variable:	    const totalRegSkuPriceAfterSplit = regSkuPrice * reqistrationSkus.length;
microservices-middleware/server/src/kartbeta/product/helper.js:80:hardcoded string:	    console.log("Reg sku", totalRegSkuPriceAfterSplit)
microservices-middleware/server/src/kartbeta/product/helper.js:82:hardcoded object:	    return { totalRegSkuPriceAfterSplit, updatedProducts: products };
microservices-middleware/server/src/kartbeta/product/helper.js:85:hardcoded object:	const computeSkuPrice = async ({products, finalPrice, maxPrice}) => {
microservices-middleware/server/src/kartbeta/product/helper.js:86:hardcoded number:	    let tabletPrice = 0, regSkuPrice = 0;
microservices-middleware/server/src/kartbeta/product/helper.js:88:hardcoded string:	    const tabletSku = products.filter(ele => ele.category == 'tablet') || null;
microservices-middleware/server/src/kartbeta/product/helper.js:93:hardcoded string:	    const productSkus = products.filter(ele => !['btc_registration', 'tablet'].includes(ele.category)) || null;
microservices-middleware/server/src/kartbeta/product/helper.js:94:hardcoded object:	    let { totalRegSkuPriceAfterSplit, updatedProducts } = await getRegSkuPrice({products, finalPrice, tabletPrice});
microservices-middleware/server/src/kartbeta/product/helper.js:96:hardcoded variable:	    let priceToBeExcluded = tabletPrice + totalRegSkuPriceAfterSplit;
microservices-middleware/server/src/kartbeta/product/helper.js:97:hardcoded variable:	    let maxCourseSkuPrice = parseInt(maxPrice) - parseInt(priceToBeExcluded);
microservices-middleware/server/src/kartbeta/product/helper.js:98:hardcoded variable:	    let priceToBeDivided = parseInt(finalPrice) - parseInt(priceToBeExcluded);
microservices-middleware/server/src/kartbeta/product/helper.js:99:hardcoded number:	    maxCourseSkuPrice = maxCourseSkuPrice > 0 ? maxCourseSkuPrice : 0;
microservices-middleware/server/src/kartbeta/product/helper.js:100:hardcoded number:	    priceToBeDivided = priceToBeDivided > 0 ? priceToBeDivided : 0;
microservices-middleware/server/src/kartbeta/product/helper.js:102:hardcoded variable:	    const btcShare = await getComponentPriceShare(productSkus, maxCourseSkuPrice);
microservices-middleware/server/src/kartbeta/product/helper.js:103:hardcoded variable:	    const basePrices = await getBasePrices(products)
microservices-middleware/server/src/kartbeta/product/helper.js:104:hardcoded variable:	    const finalProducts = await getUpdatedProducts(products, btcShare, priceToBeDivided);
microservices-middleware/server/src/kartbeta/product/helper.js:112:hardcoded variable:	const getBasePrices = (products) => {
microservices-middleware/server/src/kartbeta/product/helper.js:113:hardcoded array:	    let basePrices = [];
microservices-middleware/server/src/kartbeta/product/helper.js:115:hardcoded object:	        const { price } = sku
microservices-middleware/server/src/kartbeta/product/helper.js:121:hardcoded variable:	const getComponentPriceShare = (productSkus, maxCourseSkuPrice) => {
microservices-middleware/server/src/kartbeta/product/helper.js:122:hardcoded number:	    let btcShare = 0;
microservices-middleware/server/src/kartbeta/product/helper.js:124:hardcoded string:	        if (['byjus_learning_center', 'tlp_blc_upgrade', 'bocp_blc_upgrade'].includes(sku.category)) {
microservices-middleware/server/src/kartbeta/product/helper.js:125:hardcoded string:	            btcShare += get(sku, "price");
microservices-middleware/server/src/kartbeta/product/helper.js:128:hardcoded number:	    btcShare = Math.ceil((btcShare * 100) / maxCourseSkuPrice);
microservices-middleware/server/src/kartbeta/product/helper.js:132:hardcoded variable:	const getUpdatedProducts = (products, btcShare, priceToBeDivided) => {
microservices-middleware/server/src/kartbeta/product/helper.js:134:hardcoded string:	    const btcSkus = products.filter(ele => ['byjus_learning_center', 'tlp_blc_upgrade', 'bocp_blc_upgrade'].includes(ele.category)) || null;
microservices-middleware/server/src/kartbeta/product/helper.js:135:hardcoded string:	    const tlpSkus = products.filter(ele => !['byjus_learning_center', 'tlp_blc_upgrade', 'bocp_blc_upgrade', 'tablet', 'btc_registration'].includes(ele.category));
microservices-middleware/server/src/kartbeta/product/helper.js:136:hardcoded variable:	    const totalBtcGrades = btcSkus.length;
microservices-middleware/server/src/kartbeta/product/helper.js:137:hardcoded variable:	    const totalTlpGrades = tlpSkus.length;
microservices-middleware/server/src/kartbeta/product/helper.js:138:hardcoded number:	    const btcPrice = Math.round((priceToBeDivided * btcShare) / (100 * totalBtcGrades) * 100) / 100;
microservices-middleware/server/src/kartbeta/product/helper.js:139:hardcoded number:	    const btlpPrice = Math.round(((priceToBeDivided * (100 - btcShare)) / (100 * totalTlpGrades) * 100) / 100);
microservices-middleware/server/src/kartbeta/product/helper.js:142:hardcoded string:	        if (['byjus_learning_center', 'tlp_blc_upgrade', 'bocp_blc_upgrade'].includes(sku.category)) {
microservices-middleware/server/src/kartbeta/product/helper.js:145:hardcoded string:	        if (!['byjus_learning_center', 'tlp_blc_upgrade', 'bocp_blc_upgrade', 'tablet', 'btc_registration'].includes(sku.category)) {
microservices-middleware/server/src/kartbeta/product/helper.js:149:hardcoded variable:	    const updatedProducts = products;
microservices-middleware/server/src/kartbeta/product/helper.js:154:hardcoded object:	const getLineItemsObject = async ({sku, draftOrderId, studentId, basePrice}) => {
microservices-middleware/server/src/kartbeta/product/helper.js:155:hardcoded object:	    const { skuId, skuName, type, grade, hsnCode, price, itemId, subType, category } = sku;
microservices-middleware/server/src/kartbeta/product/helper.js:156:hardcoded variable:	    const lineItemObject = {
microservices-middleware/server/src/kartbeta/product/helper.js:159:hardcoded string:	        status: 'active',
microservices-middleware/server/src/kartbeta/product/helper.js:168:hardcoded number:	        invoicePrice: 9999,
microservices-middleware/server/src/kartbeta/product/helper.js:169:hardcoded number:	        remainingAmount: 789654,
microservices-middleware/server/src/kartbeta/product/helper.js:171:hardcoded string:	        draftOrderId: '',
microservices-middleware/server/src/kartbeta/product/helper.js:173:hardcoded string:	        createdBy: 'xyz@byjus.com',
microservices-middleware/server/src/kartbeta/product/helper.js:174:hardcoded string:	        updatedBy: 'xyz@byjus.com',
microservices-middleware/server/src/kartbeta/product/helper.js:181:hardcoded variable:	const getCentreDetails = (details) => {
microservices-middleware/server/src/kartbeta/product/helper.js:182:hardcoded object:	    const { stateId,stateName, cityId, cityName, centreId, centreName, requestedBatchId, cohortId, batchDetails } = details;
microservices-middleware/server/src/kartbeta/product/helper.js:183:hardcoded string:	    const { blcCourse=[], batchType='' } = batchDetails;
microservices-middleware/server/src/kartbeta/product/helper.js:184:hardcoded variable:	    const centreDetails = {
microservices-middleware/server/src/kartbeta/product/helper.js:185:hardcoded string:	        "stateId": stateId,
microservices-middleware/server/src/kartbeta/product/helper.js:186:hardcoded string:	        "state": stateName,
microservices-middleware/server/src/kartbeta/product/helper.js:187:hardcoded string:	        "cityId": cityId,
microservices-middleware/server/src/kartbeta/product/helper.js:188:hardcoded string:	        "city": cityName,
microservices-middleware/server/src/kartbeta/product/helper.js:189:hardcoded string:	        "centreId": centreId,
microservices-middleware/server/src/kartbeta/product/helper.js:190:hardcoded string:	        "centre": centreName,
microservices-middleware/server/src/kartbeta/product/helper.js:191:hardcoded string:	        "requestedBatchId": get(requestedBatchId, ''),
microservices-middleware/server/src/kartbeta/product/helper.js:192:hardcoded string:	        "requestId": null,
microservices-middleware/server/src/kartbeta/product/helper.js:193:hardcoded string:	        "batchType": batchType,
microservices-middleware/server/src/kartbeta/product/helper.js:194:hardcoded string:	        "courseAliasId": get(blcCourse,'courseAliasId', ''),
microservices-middleware/server/src/kartbeta/product/helper.js:195:hardcoded string:	        "cohortId": cohortId
