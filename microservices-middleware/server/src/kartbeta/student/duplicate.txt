microservices-middleware/server/src/kartbeta/student/service.js:1:hardcoded object:const { invokeMicroService } = require('../utils');
microservices-middleware/server/src/kartbeta/student/service.js:3:hardcoded object:const fetchStudentProfiles = async ({ primaryNumber, secondaryNumber }) => {
microservices-middleware/server/src/kartbeta/student/service.js:4:hardcoded variable:    const payload = {
microservices-middleware/server/src/kartbeta/student/service.js:8:hardcoded object:    const url = `${process.env.NUCLEUS_API_URI}/postordermanagement/premiumaccount/getPremiumAccountsByMobile`;
microservices-middleware/server/src/kartbeta/student/service.js:10:hardcoded variable:        const response = await invokeMicroService(
microservices-middleware/server/src/kartbeta/student/service.js:20:hardcoded object:const createStudentProfile = async ({ studentName, studentDob, studentEmail, studentPhone }) => {
microservices-middleware/server/src/kartbeta/student/service.js:21:hardcoded variable:    const payload = {
microservices-middleware/server/src/kartbeta/student/service.js:26:hardcoded string:        schoolId: '1',
microservices-middleware/server/src/kartbeta/student/service.js:28:hardcoded object:    const url = `${process.env.NUCLEUS_API_URI}/postordermanagement/stms/students/createLeadStudent`;
microservices-middleware/server/src/kartbeta/student/service.js:30:hardcoded variable:        const response = await invokeMicroService(
microservices-middleware/server/src/kartbeta/student/service.js:34:hardcoded object:        const { studentId } = response;
microservices-middleware/server/src/kartbeta/student/controller.js:1:hardcoded object:const { isEmpty, orderBy } = require('lodash');
microservices-middleware/server/src/kartbeta/student/controller.js:3:hardcoded object:const { fetchStudentProfiles, createStudentProfile } = require('./service');
microservices-middleware/server/src/kartbeta/student/controller.js:4:hardcoded object:const { fetchStudentMapping, deleteOrderStudent, fetchBatchCentreDetails } = require('./dto');
microservices-middleware/server/src/kartbeta/student/controller.js:6:hardcoded file path:const logger = require('../../../lib/bunyan-logger')('Draft Order Beta Student Controller');
microservices-middleware/server/src/kartbeta/student/controller.js:8:hardcoded variable:const fetchStudents = async (req, res) => {
microservices-middleware/server/src/kartbeta/student/controller.js:9:hardcoded string:    const { primaryNumber, secondaryNumber = '', draftOrderId='' } = req.body
microservices-middleware/server/src/kartbeta/student/controller.js:13:hardcoded variable:    let phoneNumer = primaryNumber.trim();
microservices-middleware/server/src/kartbeta/student/controller.js:14:hardcoded number:    phoneNumer = phoneNumer.substr(phoneNumer.length - 10); //todo revisit this logic or apply existing
microservices-middleware/server/src/kartbeta/student/controller.js:15:hardcoded number:    phoneNumer = `+91-${phoneNumer}`; // todo add logic for other country codes
microservices-middleware/server/src/kartbeta/student/controller.js:17:hardcoded variable:    let secondPhoneNumer = secondaryNumber.trim();
microservices-middleware/server/src/kartbeta/student/controller.js:18:hardcoded number:    secondPhoneNumer = secondPhoneNumer.substr(secondPhoneNumer.length - 10); //todo revisit this logic or apply existing
microservices-middleware/server/src/kartbeta/student/controller.js:19:hardcoded string:    secondPhoneNumer = isEmpty(secondPhoneNumer) ? '' : `+91-${secondPhoneNumer}`; // todo add logic for other country codes
microservices-middleware/server/src/kartbeta/student/controller.js:22:hardcoded object:        const students = await fetchStudentProfiles({ primaryNumber: phoneNumer, secondaryNumber: secondPhoneNumer });
microservices-middleware/server/src/kartbeta/student/controller.js:23:hardcoded object:        const draftOrderStudents = await fetchStudentMapping({ draftOrderId });
microservices-middleware/server/src/kartbeta/student/controller.js:24:hardcoded object:        const studentIds = draftOrderStudents.map((item)=>{return item.studentId});
microservices-middleware/server/src/kartbeta/student/controller.js:25:hardcoded variable:        const filteredStudents = students.filter((item)=> !studentIds.includes(item.premium_account_id));
microservices-middleware/server/src/kartbeta/student/controller.js:26:hardcoded string:        const sortedStudents = orderBy(filteredStudents, ['createdAt'], ['desc']);
microservices-middleware/server/src/kartbeta/student/controller.js:27:hardcoded number:        return res.status(200).json({
microservices-middleware/server/src/kartbeta/student/controller.js:29:hardcoded string:            message: "Fetched Student Profiles"
microservices-middleware/server/src/kartbeta/student/controller.js:32:hardcoded string:        logger.error({ method: 'Draft Order', error }, 'Error occured');
microservices-middleware/server/src/kartbeta/student/controller.js:33:hardcoded number:        return res.status(500).json({
microservices-middleware/server/src/kartbeta/student/controller.js:34:hardcoded number:            statusCode: 500,
microservices-middleware/server/src/kartbeta/student/controller.js:36:hardcoded string:                response: 'Error while getting data from Profile API.',
microservices-middleware/server/src/kartbeta/student/controller.js:43:hardcoded variable:const fetchDraftOrderStudents = async (req, res) => {
microservices-middleware/server/src/kartbeta/student/controller.js:44:hardcoded object:    const { draftOrderId } = req.body
microservices-middleware/server/src/kartbeta/student/controller.js:49:hardcoded object:        const students = await fetchStudentMapping({ draftOrderId });
microservices-middleware/server/src/kartbeta/student/controller.js:51:hardcoded object:            const {studentId} = student;
microservices-middleware/server/src/kartbeta/student/controller.js:52:hardcoded object:            const batchCentreDetails = await fetchBatchCentreDetails({draftOrderId, studentId});
microservices-middleware/server/src/kartbeta/student/controller.js:53:hardcoded number:            student.batchCentreDetails=batchCentreDetails[0];
microservices-middleware/server/src/kartbeta/student/controller.js:55:hardcoded number:        return res.status(200).json({
microservices-middleware/server/src/kartbeta/student/controller.js:57:hardcoded string:            message: "Fetched Student Profiles"
microservices-middleware/server/src/kartbeta/student/controller.js:60:hardcoded string:        logger.error({ method: 'fetchDraftOrderStudents', error }, 'Draft Order Student Error occured');
microservices-middleware/server/src/kartbeta/student/controller.js:61:hardcoded number:        return res.status(500).json({
microservices-middleware/server/src/kartbeta/student/controller.js:62:hardcoded number:            statusCode: 500,
microservices-middleware/server/src/kartbeta/student/controller.js:64:hardcoded string:                response: 'Error while getting data from db.',
microservices-middleware/server/src/kartbeta/student/controller.js:71:hardcoded variable:const createStudent = async (req, res) => {
microservices-middleware/server/src/kartbeta/student/controller.js:72:hardcoded object:    const { studentName, studentDob, studentEmail, studentPhone } = req.body
microservices-middleware/server/src/kartbeta/student/controller.js:77:hardcoded object:        const studentDetails = await createStudentProfile({ studentName, studentDob, studentEmail, studentPhone });
microservices-middleware/server/src/kartbeta/student/controller.js:78:hardcoded number:        return res.status(200).json({
microservices-middleware/server/src/kartbeta/student/controller.js:80:hardcoded string:            message: "Created new student profile successfully"
microservices-middleware/server/src/kartbeta/student/controller.js:83:hardcoded string:        logger.error({ method: 'createStudent', error }, 'Create Student Error');
microservices-middleware/server/src/kartbeta/student/controller.js:84:hardcoded number:        return res.status(500).json({
microservices-middleware/server/src/kartbeta/student/controller.js:85:hardcoded number:            statusCode: 500,
microservices-middleware/server/src/kartbeta/student/controller.js:87:hardcoded string:                response: 'Error while getting data from API.',
microservices-middleware/server/src/kartbeta/student/controller.js:94:hardcoded variable:const deleteStudent = async (req, res) => {
microservices-middleware/server/src/kartbeta/student/controller.js:95:hardcoded object:    const { studentId, draftOrderId } = req.body
microservices-middleware/server/src/kartbeta/student/controller.js:100:hardcoded object:        await deleteOrderStudent({ studentId, draftOrderId });
microservices-middleware/server/src/kartbeta/student/controller.js:101:hardcoded number:        return res.status(200).json({
microservices-middleware/server/src/kartbeta/student/controller.js:102:hardcoded string:            message: "Deleted draft order student successfully"
microservices-middleware/server/src/kartbeta/student/controller.js:105:hardcoded string:        logger.error({ method: 'deleteStudent', error }, 'Delete Student Error');
microservices-middleware/server/src/kartbeta/student/controller.js:106:hardcoded number:        return res.status(500).json({
microservices-middleware/server/src/kartbeta/student/controller.js:107:hardcoded number:            statusCode: 500,
microservices-middleware/server/src/kartbeta/student/controller.js:109:hardcoded string:                response: 'Error while getting data from DB.',
microservices-middleware/server/src/kartbeta/student/dto.js:1:hardcoded string:const { OrderStudentMapping, StmsStudent, SalesProgram} = require('@byjus-orders/npgexemplum');
microservices-middleware/server/src/kartbeta/student/dto.js:2:hardcoded string:const { StudentOrderBatchCentreDetail } = require('@byjus-orders/nexemplum/stms')
microservices-middleware/server/src/kartbeta/student/dto.js:4:hardcoded object:const fetchStudentMapping = async ({ draftOrderId }) => {
microservices-middleware/server/src/kartbeta/student/dto.js:5:hardcoded variable:    const students = await OrderStudentMapping.findAll({
microservices-middleware/server/src/kartbeta/student/dto.js:12:hardcoded string:                as: "student",
microservices-middleware/server/src/kartbeta/student/dto.js:15:hardcoded string:                as: "salesProgram",
microservices-middleware/server/src/kartbeta/student/dto.js:18:hardcoded number:        limit: 5,
microservices-middleware/server/src/kartbeta/student/dto.js:24:hardcoded object:const fetchBatchCentreDetails = async({draftOrderId, studentId}) => {
microservices-middleware/server/src/kartbeta/student/dto.js:25:hardcoded variable:    const batchCentreDetails = await StudentOrderBatchCentreDetail.find({
microservices-middleware/server/src/kartbeta/student/dto.js:28:hardcoded number:    }).lean().limit(1);
microservices-middleware/server/src/kartbeta/student/dto.js:32:hardcoded object:const deleteOrderStudent = async({studentId, draftOrderId}) => {
microservices-middleware/server/src/kartbeta/student/dto.js:33:hardcoded variable:    const response = await OrderStudentMapping.destroy({
