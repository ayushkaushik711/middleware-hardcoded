microservices-middleware/server/src/kartbeta/salesprogram/controller.js:1:hardcoded object:const { fetchSalesProgram, fetchSalesProgramById, fetchSalesProgramBundle } = require('./dto');
microservices-middleware/server/src/kartbeta/salesprogram/controller.js:3:hardcoded file path:const logger = require('../../../lib/bunyan-logger')('Sales Program Controller');
microservices-middleware/server/src/kartbeta/salesprogram/controller.js:6:hardcoded variable:const getSalesProgram = async(req, res) => {
microservices-middleware/server/src/kartbeta/salesprogram/controller.js:8:hardcoded variable:        const salesPrograms = await fetchSalesProgram();
microservices-middleware/server/src/kartbeta/salesprogram/controller.js:10:hardcoded array:            const {spId} = salesPrograms[program];
microservices-middleware/server/src/kartbeta/salesprogram/controller.js:11:hardcoded variable:            const bundle = await fetchSalesProgramBundle(spId);
microservices-middleware/server/src/kartbeta/salesprogram/controller.js:12:hardcoded array:            salesPrograms[program].spBundle = bundle || [];
microservices-middleware/server/src/kartbeta/salesprogram/controller.js:14:hardcoded number:        return res.status(200).json({
microservices-middleware/server/src/kartbeta/salesprogram/controller.js:16:hardcoded string:            message: "Sales Programs fetched successfully"
microservices-middleware/server/src/kartbeta/salesprogram/controller.js:19:hardcoded string:        logger.error({ method: 'getSalesProgram', error }, 'Get Sales Program Error');
microservices-middleware/server/src/kartbeta/salesprogram/controller.js:20:hardcoded number:        return res.status(500).json({
microservices-middleware/server/src/kartbeta/salesprogram/controller.js:21:hardcoded number:            statusCode: 500,
microservices-middleware/server/src/kartbeta/salesprogram/controller.js:23:hardcoded string:                response: 'Error while getting data from db.',
microservices-middleware/server/src/kartbeta/salesprogram/controller.js:30:hardcoded variable:const getSalesProgramById = async(req, res) => {
microservices-middleware/server/src/kartbeta/salesprogram/controller.js:32:hardcoded object:        const {salesProgramId} = req.body;
microservices-middleware/server/src/kartbeta/salesprogram/controller.js:36:hardcoded variable:        const salesProgramDetails = await fetchSalesProgramById(salesProgramId);
microservices-middleware/server/src/kartbeta/salesprogram/controller.js:37:hardcoded number:        return res.status(200).json({
microservices-middleware/server/src/kartbeta/salesprogram/controller.js:39:hardcoded string:            message: "Sales Program By Id fetched successfully"
microservices-middleware/server/src/kartbeta/salesprogram/controller.js:42:hardcoded string:        logger.error({ method: 'getSalesProgramById', error }, 'Get Sales Program By Id Error');
microservices-middleware/server/src/kartbeta/salesprogram/controller.js:43:hardcoded number:        return res.status(500).json({
microservices-middleware/server/src/kartbeta/salesprogram/controller.js:44:hardcoded number:            statusCode: 500,
microservices-middleware/server/src/kartbeta/salesprogram/controller.js:46:hardcoded string:                response: 'Error while getting data from db.',
microservices-middleware/server/src/kartbeta/salesprogram/dto.js:1:hardcoded string:const { SalesProgram, SalesProgramBundle, SpBundleMapping } = require('@byjus-orders/npgexemplum');
microservices-middleware/server/src/kartbeta/salesprogram/dto.js:3:hardcoded variable:const fetchSalesProgram = async () => {
microservices-middleware/server/src/kartbeta/salesprogram/dto.js:5:hardcoded variable:        const salesProgram = await SalesProgram.findAll({
microservices-middleware/server/src/kartbeta/salesprogram/dto.js:7:hardcoded string:                status: "active"
microservices-middleware/server/src/kartbeta/salesprogram/dto.js:9:hardcoded string:            order: [['createdAt', 'DESC']],
microservices-middleware/server/src/kartbeta/salesprogram/dto.js:10:hardcoded number:            limit: 10,
microservices-middleware/server/src/kartbeta/salesprogram/dto.js:20:hardcoded variable:const fetchSalesProgramBundle = async (spId) => {
microservices-middleware/server/src/kartbeta/salesprogram/dto.js:22:hardcoded variable:        const bundles = await SpBundleMapping.findAll({
microservices-middleware/server/src/kartbeta/salesprogram/dto.js:24:hardcoded string:                status: "active",
microservices-middleware/server/src/kartbeta/salesprogram/dto.js:25:hardcoded string:                "$spBundle.sp_id$": spId
microservices-middleware/server/src/kartbeta/salesprogram/dto.js:30:hardcoded string:                    as: "spBundle",
microservices-middleware/server/src/kartbeta/salesprogram/dto.js:31:hardcoded string:                    attributes: ["spBundleId", "spId"]
microservices-middleware/server/src/kartbeta/salesprogram/dto.js:35:hardcoded string:                    as: "secondarySalesProgram",
microservices-middleware/server/src/kartbeta/salesprogram/dto.js:36:hardcoded string:                    attributes: ["name", "spId", "mol"]
microservices-middleware/server/src/kartbeta/salesprogram/dto.js:39:hardcoded number:            limit: 100,
microservices-middleware/server/src/kartbeta/salesprogram/dto.js:45:hardcoded string:        console.log('-----error', error)
microservices-middleware/server/src/kartbeta/salesprogram/dto.js:50:hardcoded variable:const fetchSalesProgramById = async (salesPogramId) => {
microservices-middleware/server/src/kartbeta/salesprogram/dto.js:52:hardcoded variable:        const salesProgram = await SalesProgram.findOne({
