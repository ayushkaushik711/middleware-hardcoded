microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:1:hardcoded object:const { get, isEmpty, flattenDeep } = require('lodash');
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:3:hardcoded string:const { SalesSkuMaster } = require('@byjus-orders/npgexemplum')
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:4:hardcoded string:const { DraftOrder, PremiumAccount } = require('@byjus-orders/nexemplum/oms');
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:5:hardcoded file path:const logger = require('../../../lib/bunyan-logger')('Byjus Math Upgrade Controller');
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:6:hardcoded object:const { BadRequestError } = require('../../../lib/errors')
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:7:hardcoded object:const { productConstant } = require('../../productmanagement/utils/productConstants');
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:8:hardcoded object:const { getCourseSku, getPostgresCourseSKU ,getMathUpgradeSkus, getByjusClassesskus} = require('../../productmanagement/bfsProductManagement/bfsHelper');
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:9:hardcoded file path:const draftOrderConverterUtility = require('../../../utility/draftOrderConverterUtility');
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:10:hardcoded object:const { checkIfDraftOrderExists } = require('../../../utility/draftOrderUtility')
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:11:hardcoded object:const { getDraftCustomerId } = require('../../customermanagement/customerController');
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:12:hardcoded object:const { reserveBonusPoints, getBonusPointsDiscount } = require('../../paymentmanagement/byjuswallet/bonusPoints')
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:14:hardcoded variable:const getUpgradeProduct = async (req, res) => {
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:15:hardcoded string:    // logger.info({ method: 'getUpgradeProduct' }, { message: "Fetching Byjus Math Upgrade Product" });
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:16:hardcoded string:    const { students = [], leadDetails, productType = '', identifier = '' } = req.body;
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:17:hardcoded number:    let student = students[0] || {}
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:18:hardcoded number:    const { bfsBatch, initialClass, bfsProductType, board, validity, finalClass } = students[0];
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:19:hardcoded number:    let maxPrice = 0, minPrice = 0;
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:20:hardcoded array:    let skuArray = [];
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:21:hardcoded string:    let scheme = 'monthly';
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:22:hardcoded string:    const isDevEnv = ["local","development"].includes(process.env.NODE_ENV)
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:24:hardcoded string:    if (bfsProductType == 'bfsStandard') scheme = 'standard'
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:25:hardcoded string:    else if (bfsProductType == 'bfsPremium') scheme = 'premium'
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:27:hardcoded number:    let courseSkus = await getMathUpgradeSkus(students[0])
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:28:hardcoded number:    if(finalClass > 3) {
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:29:hardcoded number:    courseSkus.push(await getByjusClassesskus(students[0]))
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:34:hardcoded number:            minPrice += (Math.floor(sku.basePrice * productConstant.BYJUS_MATH_UPGRADE_MIN_PRICE / 1000)) * 1000;
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:37:hardcoded number:            minPrice += (Math.floor(sku.continuousPrice * productConstant.BYJUS_MATH_UPGRADE_MIN_PRICE / 1000)) * 1000;
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:43:hardcoded string:    student["items"] = skuArray;
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:44:hardcoded string:    student["bfsProductType"] = bfsProductType;
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:45:hardcoded string:    student["bfsBatch"] = bfsBatch;
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:46:hardcoded string:    student["formValues"] = { ...student };
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:48:hardcoded variable:    let discountDetails = {
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:49:hardcoded number:        discountedPrice: 0,
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:51:hardcoded number:        bonusPointsDiscount: 0
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:53:hardcoded variable:    const bonusPointsDiscount = await getBonusPointsDiscount(identifier);
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:54:hardcoded number:    if(parseInt(bonusPointsDiscount) > 0){
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:55:hardcoded string:        discountDetails['discountedPrice'] = minPrice - bonusPointsDiscount;
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:56:hardcoded string:        discountDetails['areBonusPointsUsed'] = true;
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:57:hardcoded string:        discountDetails['bonusPointsDiscount'] = bonusPointsDiscount;
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:62:hardcoded array:            students: [student],
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:63:hardcoded string:            productCombination: 'byjus_math_upgrade',
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:68:hardcoded string:            areBonusPointsUsed: get(discountDetails,'areBonusPointsUsed'),
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:69:hardcoded string:            bonusPointsDiscount: get(discountDetails,'bonusPointsDiscount'),
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:70:hardcoded string:            discountedPrice: get(discountDetails,'discountedPrice'),
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:79:hardcoded variable:const getStudentProfileDetails = async (productDetails) => {
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:80:hardcoded array:    const { students = [] } = productDetails;
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:81:hardcoded string:    let familyIdVal = '', premiumAccountId = '';
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:83:hardcoded number:        for (let i = 0; i < students.length; i++) {
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:84:hardcoded array:            if (students[i].userProfile) {
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:85:hardcoded string:                const premiumAccountDoc = await PremiumAccount.findOne({premium_account_id: students[i].userProfile}).select('familyReferenceNumber').lean()
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:86:hardcoded string:                const { familyReferenceNumber = '' } = premiumAccountDoc;
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:88:hardcoded array:                premiumAccountId = students[i].userProfile
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:90:hardcoded variable:            let studentProfileDetails = {
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:91:hardcoded array:                isExistingProfile: [undefined].includes(students[i].userProfile) ? false : true,
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:92:hardcoded string:                existingPremiumId: [undefined].includes(students[i].userProfile) ? "" : premiumAccountId,
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:93:hardcoded string:                existingFamilyId: [undefined].includes(students[i].userProfile) ? "" : familyIdVal,
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:95:hardcoded array:            students[i].studentProfileDetails = studentProfileDetails;
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:96:hardcoded array:            delete students[i].userProfile
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:103:hardcoded variable:const storeProductDetails = async (req, res) => {
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:105:hardcoded object:        let { tlpOrderData, productDetail, identifier, leadDetails } = req.body;
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:106:hardcoded array:        let { minPrice, maxPrice, finalPrice, paymentType, updatedStudentDetails = [], products, students } = productDetail;
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:108:hardcoded string:            throw new BadRequestError("Parameter missing");
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:110:hardcoded object:        let { customerDetails: orderCustomerDetails, orderId, customerId: tlpCustomerId ,orderPunchingCategory} = tlpOrderData;
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:111:hardcoded number:        const type = orderCustomerDetails[0].type
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:112:hardcoded variable:        let draftOrder = await draftOrderConverterUtility.getDraftOrderConverter(tlpOrderData);
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:113:hardcoded object:        let { customerDetails = {}, addressDetails, salesDetails, contactDetails } = draftOrder
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:114:hardcoded number:        let { initialClass, items = [], bfsBatch, bfsProductType ,usageMode } = students[0];
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:115:hardcoded object:        let productDetails = {};
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:116:hardcoded object:        const { customerId, customerType } = await getDraftCustomerId(customerDetails, leadDetails);
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:117:hardcoded string:        students[0].productSelectionType = "byjus_math_upgrade";
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:118:hardcoded number:        students[0].initialClass = initialClass
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:119:hardcoded string:        students[0]["studentId"] = orderCustomerDetails[0].studentName;
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:120:hardcoded string:        students[0]["studentName"] = orderCustomerDetails[0].studentName;
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:122:hardcoded number:            item.studentId = orderCustomerDetails[0].studentName
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:124:hardcoded string:        students["items"] = items[0];
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:125:hardcoded string:        students["bfsProductType"] = bfsProductType;
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:126:hardcoded string:        students["usageMode"] = usageMode;
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:127:hardcoded string:        students["bfsBatch"] = bfsBatch;
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:128:hardcoded string:        let courseType = ['K3']
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:129:hardcoded string:        students[0]['courseType'] = courseType;
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:131:hardcoded string:        productDetails["students"] = students[0]
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:132:hardcoded string:        productDetails["products"] = products;
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:133:hardcoded string:        productDetails["minPrice"] = minPrice;
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:134:hardcoded string:        productDetails["maxPrice"] = maxPrice;
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:135:hardcoded string:        productDetails["finalPrice"] = finalPrice;
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:136:hardcoded string:        productDetails["paymentType"] = paymentType;
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:137:hardcoded string:        productDetails["productType"] = "byjus_math_upgrade";
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:138:hardcoded string:        productDetails["students"] = await getStudentProfileDetails({ students });
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:139:hardcoded string:        productDetails['mentoringDetails'] = get(students[0], 'mentoringDetails', []);
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:140:hardcoded string:        productDetails['bhlpCourseDetails'] = get(students[0], 'bhlpCourseDetails', {});
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:144:hardcoded string:            studentMobileNo: orderCustomerDetails[0]["studentMobile"] || "",
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:145:hardcoded string:            parentMobileNo: orderCustomerDetails[0]["parentMobile"] || "",
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:150:hardcoded string:        const finalProductPrice = get(productDetails, 'finalPrice', 0);
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:153:hardcoded variable:            const draftOrder = await checkIfDraftOrderExists(identifier);
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:155:hardcoded variable:                const transactionId = await reserveBonusPoints(draftOrder);
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:156:hardcoded string:                await DraftOrder.findOneAndUpdate({ '_id': identifier }, {
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:160:hardcoded string:                        orderPunchingType: "UPGRADE",
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:163:hardcoded string:                            newCourse: "byjus_math",
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:166:hardcoded string:                        orderPunchingCategory: "byjus_math",
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:167:hardcoded string:                        status: "product_saved",
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:168:hardcoded string:                        upgradedOrder: [get(draftOrder, 'draftOrderId')],
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:169:hardcoded string:                        "bonusPointsDetails.transactionId": transactionId
microservices-middleware/server/src/upgradeordermanagement/byjusmath/productController.js:179:hardcoded string:        logger.error({ method: 'storeProductDetails', error }, 'Error occured');
