microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:1:hardcoded string:const { SalesSkuMaster } = require('@byjus-orders/npgexemplum')
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:2:hardcoded object:const { isEmpty} = require('lodash');
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:3:hardcoded file path:const AakashNeo = require('../../productmanagement/aakashneomanagement/aakashNeo');
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:4:hardcoded object:const { NotFoundError } = require('../../../lib/errors');
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:5:hardcoded file path:const AakashNeoUpgrade = require('../../upgradeordermanagement/aakashNeo/aakashNeoUpgrade');
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:7:hardcoded object:const getTestSeriesUpgradeSkus = async ({ productDetails,productLearningType }) => {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:8:hardcoded object:  let {initialClass, finalClass, subCourse, validity, subType } = productDetails;
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:9:hardcoded variable:  let grade = initialClass;
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:10:hardcoded string:  if (initialClass == "11" && finalClass == "12") {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:11:hardcoded string:    grade = '11+12'
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:14:hardcoded string:  if (grade == '11+12') {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:15:hardcoded number:      validity += 1;
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:19:hardcoded variable:  const queryForTestSeries = {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:26:hardcoded string:      status: 'active',
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:28:hardcoded variable:  let testSeriesSku = await getUpgradeSkus(queryForTestSeries)
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:33:hardcoded variable:const getUpgradeSkus = async (queryForTestSeries) => {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:34:hardcoded variable:  let upgradeSkus = await SalesSkuMaster.findOne({
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:39:hardcoded variable:      const errorMsg = getErrorMsg(queryForTestSeries);
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:45:hardcoded variable:const getErrorMsg = function (queryDetails) {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:46:hardcoded object:  const { grade, subCourse, validity, type } = queryDetails || {};
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:49:hardcoded string:  ${subCourse ? `Course: ${subCourse}` : ''}
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:50:hardcoded string:  ${grade ? `Grade: ${grade}` : ''}
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:51:hardcoded string:  ${type ? `Type: ${type}` : ''}
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:52:hardcoded string:  ${validity ? `Validity: ${validity}` : ''}
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:56:hardcoded variable:const getNeoLiveClassesUpgradeProduct = async (details) => {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:58:hardcoded object:  let { initialClass, finalClass, grade, subCourse, validity } = details;
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:61:hardcoded string:  if (grade == '11+12') {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:62:hardcoded number:    validity += 1;
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:66:hardcoded variable:  const queryForUpgrade = {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:73:hardcoded string:    status: 'active'
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:76:hardcoded variable:  let skus = await getUpgradeSkus(queryForUpgrade)
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeHelper.js:77:hardcoded object:  return { skus };
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeRoutes.js:1:hardcoded file path:const Router = require('express-promise-router');
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeRoutes.js:2:hardcoded file path:const controller = require('./aakashTestSeriesUpgradeController');
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeRoutes.js:3:hardcoded object:const { storeCalculatedPriceMw, validateCalculatedPriceMw } = require('../../productmanagement/productHelper')
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeRoutes.js:5:hardcoded object:const router = Router({ mergeParams: true });
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeRoutes.js:8:hardcoded string:    const baseRoute = '/aakashTestSeriesUpgrade';
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeRoutes.js:10:hardcoded object:    router.route(`${baseRoute}/storeProductDetails`)
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeRoutes.js:16:hardcoded object:    router.route(`${baseRoute}/product/getProduct`)
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeRoutes.js:22:hardcoded object:    router.route(`${baseRoute}/product/getUpgradeProduct`)
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:1:hardcoded object:const { get, isEmpty, flattenDeep, isArray } = require('lodash');
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:2:hardcoded file path:const logger = require('../../../lib/bunyan-logger')('AakashNeo Controller');
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:4:hardcoded string:const { DraftOrder } = require('@byjus-orders/nexemplum/oms');
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:6:hardcoded object:const { BadRequestError } = require('../../../lib/errors');
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:7:hardcoded object:const { manageCashbacks } = require('../../cashbackmanagement/cashbackHelper');
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:8:hardcoded file path:const config = require('../../../config');
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:9:hardcoded object:const { reserveBonusPoints, getBonusPointsDiscount } = require('../../paymentmanagement/byjuswallet/bonusPoints')
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:10:hardcoded object:const { productConstant } = require('../../productmanagement/utils/productConstants');
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:11:hardcoded object:const { getSkuItemId, getAakashByjusCoursesSkus } = require('../../productmanagement/aakashneomanagement/aakashNeoHelper');
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:12:hardcoded object:const { checkIsOmsOrder, attachSiblingDetails, getStudentProfileDetails, validatingFOCPremiumAccount } = require("../../productmanagement/productHelper");
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:13:hardcoded object:const { checkIfDraftOrderExists } = require('../../../utility/draftOrderUtility');
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:14:hardcoded object:const { getBooksSkuFromProductDetails } = require('../../bookmanagement/stationarySkuPriceCalculation');
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:15:hardcoded object:const { getTestSeriesUpgradeSkus, getNeoLiveClassesUpgradeProduct } = require('./aakashTestSeriesUpgradeHelper')
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:17:hardcoded variable:const getProduct = async (req, res) => {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:18:hardcoded number:    let maxPrice = 0, minPrice = 0;
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:19:hardcoded string:    let { paymentType, productType, productCombination, leadDetails, identifier = '', productDetails, student, productLearningType ,previousOrderLineItems} = req.body;
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:22:hardcoded array:    let courseSkuArray = [];
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:23:hardcoded object:    let upgradeSku = await getTestSeriesUpgradeSkus({ productDetails: student, productLearningType })
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:27:hardcoded string:        sku["price"] = sku.basePrice
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:28:hardcoded string:        sku["itemId"] = getSkuItemId(sku);
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:29:hardcoded string:        sku["combinationType"] = get(sku, "category", "").toLowerCase()
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:32:hardcoded string:    student["formValues"] = { ...student };
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:33:hardcoded string:    student["items"] = flattenDeep(courseSkuArray);
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:35:hardcoded string:    previousOrderLineItems = previousOrderLineItems.filter((item) => item.subType !== "tablet" )
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:37:hardcoded number:    prevOrderMaxPrice = previousOrderLineItems.reduce((total, sku) => parseInt(sku.price) + total, 0)
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:38:hardcoded number:    maxPrice = courseSkuArray.reduce((total, sku) => parseInt(sku.price) + total, 0)
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:41:hardcoded number:    minPrice = (Math.floor(minPrice / 1000)) * 1000
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:43:hardcoded variable:    let discountDetails = {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:44:hardcoded number:        discountedPrice: 0,
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:46:hardcoded number:        bonusPointsDiscount: 0
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:48:hardcoded variable:    const bonusPointsDiscount = await getBonusPointsDiscount(identifier);
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:49:hardcoded number:    if (parseInt(bonusPointsDiscount) > 0) {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:50:hardcoded string:        discountDetails['discountedPrice'] = minPrice - bonusPointsDiscount;
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:51:hardcoded string:        discountDetails['areBonusPointsUsed'] = true;
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:52:hardcoded string:        discountDetails['bonusPointsDiscount'] = bonusPointsDiscount;
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:62:hardcoded array:            students: [student],
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:63:hardcoded string:            areBonusPointsUsed: get(discountDetails, 'areBonusPointsUsed'),
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:64:hardcoded string:            bonusPointsDiscount: get(discountDetails, 'bonusPointsDiscount'),
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:65:hardcoded string:            discountedPrice: get(discountDetails, 'discountedPrice'),
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:73:hardcoded variable:const getAakashNeoLiveProduct = async (req, res) => {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:74:hardcoded number:    let maxPrice = 0, minPrice = 0;
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:75:hardcoded string:    let { paymentType, productType='combo', productCombination, leadDetails, identifier = '', productDetails, student, productLearningType='aakash_byjus_live', isAcceleratorProgram, previousOrderLineItems } = req.body;
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:77:hardcoded number:    student = isArray(student) ? student[0] : student;
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:79:hardcoded object:    let { initialClass, finalClass, validity, subCourse } = student;
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:81:hardcoded array:    let courseSkuArray = [];
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:85:hardcoded variable:    let grade = initialClass;
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:88:hardcoded number:        if (grade === 11 && finalClass === 12) {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:89:hardcoded string:            grade = '11+12';
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:91:hardcoded number:        if (grade == 13) {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:92:hardcoded string:            grade = "13+"
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:94:hardcoded object:        let { skus } = await getNeoLiveClassesUpgradeProduct({
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:104:hardcoded string:        grade += (grade === '11+12') ? 2 : 1;
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:110:hardcoded string:        sku["price"] = sku.basePrice
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:111:hardcoded string:        sku["itemId"] = getSkuItemId(sku);
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:112:hardcoded string:        sku["combinationType"] = get(sku, "category", "").toLowerCase()
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:115:hardcoded string:    student["formValues"] = { ...student };
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:116:hardcoded string:    student["items"] = flattenDeep(courseSkuArray);
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:118:hardcoded number:    prevOrderMaxPrice = previousOrderLineItems.reduce((total, sku) => parseInt(sku.price) + total, 0)
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:119:hardcoded number:    maxPrice = courseSkuArray.reduce((total, sku) => parseInt(sku.price) + total, 0)
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:122:hardcoded number:    minPrice = (Math.floor(minPrice / 1000)) * 1000
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:124:hardcoded variable:    let discountDetails = {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:125:hardcoded number:        discountedPrice: 0,
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:127:hardcoded number:        bonusPointsDiscount: 0
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:129:hardcoded variable:    const bonusPointsDiscount = await getBonusPointsDiscount(identifier);
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:130:hardcoded number:    if (parseInt(bonusPointsDiscount) > 0) {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:131:hardcoded string:        discountDetails['discountedPrice'] = minPrice - bonusPointsDiscount;
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:132:hardcoded string:        discountDetails['areBonusPointsUsed'] = true;
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:133:hardcoded string:        discountDetails['bonusPointsDiscount'] = bonusPointsDiscount;
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:143:hardcoded array:            students: [student],
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:144:hardcoded string:            areBonusPointsUsed: get(discountDetails, 'areBonusPointsUsed'),
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:145:hardcoded string:            bonusPointsDiscount: get(discountDetails, 'bonusPointsDiscount'),
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:146:hardcoded string:            discountedPrice: get(discountDetails, 'discountedPrice'),
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:154:hardcoded variable:const storeProductDetails = async (req, res) => {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:155:hardcoded string:    let { identifier, productDetails, productCombination = "", studentDetails } = req.body;
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:156:hardcoded string:    const { email } = get(req, 'user', {});
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:157:hardcoded string:    logger.info({ method: 'storeProductDetails', msg: `Storing Product Details for _id:${identifier}` });
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:161:hardcoded string:            throw new BadRequestError(`Parameters - ${identifier ? '' : 'identifier'} ${productDetails ? '' : 'productDetails'} Missing`);
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:162:hardcoded variable:        const draftOrder = await checkIfDraftOrderExists(identifier);
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:165:hardcoded object:            const { isOmsOrder, customerDetails } = draftOrder;
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:166:hardcoded object:            const { productType, isGstIn, student = {} } = productDetails;
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:167:hardcoded string:            const { validity = "", subCourse, product, productLearningType, upgradeOrderDetails } = student;
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:168:hardcoded variable:            const isOmsEligibleOrder = await checkIsOmsOrder(productType, isOmsOrder, validity);
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:169:hardcoded object:            const { redeemedCashback, unutilizedCashbacks, amountToCustomer, amountToSalesPerson } = await manageCashbacks(draftOrder, productDetails);
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:170:hardcoded object:            let { orgFormattedName, orderPunchingType } = draftOrder
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:185:hardcoded string:            if (get(config, 'isStudentProfileAvailable') === "true" && productDetails.students && productDetails.students.length) {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:190:hardcoded array:            const { formattedProducts = [], formattedStudents = [] } = await attachSiblingDetails(productDetails, productType, draftOrder, studentDetails);
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:191:hardcoded string:            productDetails["students"] = formattedStudents;
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:192:hardcoded string:            productDetails["products"] = formattedProducts;
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:193:hardcoded string:            const orderPunchingCategory = "aakash_test_series";
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:194:hardcoded string:            orgFormattedName = "aakash";
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:195:hardcoded string:            orderPunchingType = "upgrade_order";
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:196:hardcoded string:            let bookInvoicing = 'not_applicable';
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:197:hardcoded array:            let addOnLineItems = [];
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:198:hardcoded string:            if (['local'].includes(process.env.NODE_ENV)) {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:200:hardcoded string:                bookInvoicing = 'applicable';
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:205:hardcoded variable:            const updateObj = {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:208:hardcoded array:                addOnLineItems: addOnLineItems || [],
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:212:hardcoded string:                finalPrice: get(productDetails, 'finalPrice', 0),
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:213:hardcoded string:                status: "product_saved",
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:214:hardcoded array:                [`actionDetails.productSavedAt`]: new Date(),
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:215:hardcoded array:                [`actionDetails.productSavedBy`]: email,
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:217:hardcoded string:                "customerDetails.gstDetails.isGstIn": isGstIn,
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:221:hardcoded variable:            const transactionId = await reserveBonusPoints(draftOrder);
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:222:hardcoded string:            if (transactionId !== "") {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:223:hardcoded string:                updateObj["bonusPointsDetails.transactionId"] = transactionId;
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:226:hardcoded string:            await DraftOrder.findOneAndUpdate({ '_id': identifier }, {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesUpgradeController.js:229:hardcoded object:            return res.json({ productDetails, cashbackDetails: { redeemedCashback, unutilizedCashbacks } });
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:1:hardcoded object:const { isEmpty } = require('lodash');
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:3:hardcoded object:const { getPaymentType } = require('../../productmanagement/aakashneomanagement/aakashNeoHelper')
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:4:hardcoded object:const { getAakashNeoExtensionSkus } = require('../../productmanagement/dto')
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:6:hardcoded variable:const formattedAakashLiveClassesLineItems = async (orderDetails) => {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:7:hardcoded string:    const { productDetails, orderPunchingCategory = "", paymentDetails = {} } = orderDetails;
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:8:hardcoded array:    const { students = [], paymentType, student } = productDetails;
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:9:hardcoded object:    let lineItems = {};
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:10:hardcoded object:    const actualPaymentType = getPaymentType({paymentDetails, paymentType}) ;
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:13:hardcoded number:        const { items, formValues, studentId, productSelectionType } = students[0];
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:15:hardcoded string:            throw new Error("Order Split Failed: Aakash Live Classes Order Punching LineItems Are Empty");
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:17:hardcoded variable:        const splittedLineItems = await getLineItems(items, formValues, productSelectionType, paymentType, studentId)
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:18:hardcoded object:        const { parentLineItems, childLineItems } = splittedLineItems || {};
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:19:hardcoded string:        const orderType = childLineItems.length ? 'split_order' : 'single_order';
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:21:hardcoded string:            throw new Error(" Order Split Failed: Aakash Live Classes Order LineItems Are Empty");
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:28:hardcoded string:        throw new Error(error || "Error in splitting line Items");
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:33:hardcoded variable:const getLineItems = async (items, formValues, productSelectionType, paymentType, studentId) => {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:34:hardcoded array:    let parentLineItems = [], childLineItems = [], tabletItem = [], skuItems = [], sdCardItem = [];
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:35:hardcoded object:    const { initialClass, subCourse} = formValues
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:37:hardcoded string:        if (item.subType === "tablet") {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:39:hardcoded string:        } else if (item.subType === "sd_card") {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:46:hardcoded string:    if(productSelectionType == 'AAKASH_TEST_SERIES_UPGRADE') {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:50:hardcoded array:            childLineItems =   []
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:54:hardcoded array:            parentLineItems = [...tabletItem, ...skuItems]
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:55:hardcoded array:            childLineItems = []
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:59:hardcoded string:    if(productSelectionType == 'AAKASH_NEO_LIVE_CLASSES_UPGRADE') { 
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:60:hardcoded string:        if (paymentType == 'NON_EMI') {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:62:hardcoded array:            childLineItems = []
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:64:hardcoded string:        if (paymentType == 'EMI') {
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:66:hardcoded object:            let extensionSkus = await getAakashNeoExtensionSkus({ initialClass, subCourse ,studentId})
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:72:hardcoded array:        parentLineItems:Array.isArray(parentLineItems) ? parentLineItems : [parentLineItems],
microservices-middleware/server/src/upgradeordermanagement/aakashTestSeriesUpgrade/aakashTestSeriesOrderSplit.js:73:hardcoded array:        childLineItems: Array.isArray(childLineItems) ? childLineItems : [childLineItems]
