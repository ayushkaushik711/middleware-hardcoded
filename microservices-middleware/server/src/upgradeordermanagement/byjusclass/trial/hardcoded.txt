microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:5:hardcoded string:	const { DraftOrder } = require('@byjus-orders/nexemplum/oms');
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:16:hardcoded variable:	const getUpdatedStudentDetailsWithgradeCombination = async (students, productCombination, orderPunchingType) => {
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:20:hardcoded object:	            let { board, subCourse, state } = st;
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:21:hardcoded variable:	            let initialClass = st.initialClass, finalClass = st.finalClass;
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:22:hardcoded string:	            let byjusFinalClass = get(st, "byjusFinalClass", "");
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:24:hardcoded string:	            let initialClassValue = initialClass.split('-');
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:25:hardcoded number:	            initialClass = initialClassValue[0];
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:26:hardcoded object:	            const orderDetail = { board, initialClass, finalClass, subCourse, byjusFinalClass, state }
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:27:hardcoded variable:	            let getGradeCombinationDetail = await getUpgradeOrderDetails(orderDetail, productCombination, orderPunchingType);
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:28:hardcoded object:	            const { gradeCombinationDetails, productSelectionType } = getGradeCombinationDetail;
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:30:hardcoded string:	                st["hlpDetails"] = {}
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:32:hardcoded string:	            st.hlpDetails["gradeCombinationDetails"] = gradeCombinationDetails;
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:40:hardcoded variable:	const storeProductDetails = async (req, res) => {
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:41:hardcoded object:	    const { identifier, productDetails } = req.body;
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:43:hardcoded string:	    logger.info({ method: 'storeProductDetails', msg: `Storing Product Details for _id:${identifier}` });
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:46:hardcoded string:	            throw new BadRequestError(`Parameters - ${identifier ? '' : 'identifier'} ${productDetails ? '' : 'productDetails'} Missing`);
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:47:hardcoded variable:	        const draftOrder = await checkIfDraftOrderExists(identifier);
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:49:hardcoded object:	            let { isOmsOrder, draftOrderId } = draftOrder;
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:50:hardcoded object:	            const { productType, orderPunchingType } = productDetails;
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:51:hardcoded variable:	            const isOmsEligibleOrder = await checkIsOmsOrder(productType, isOmsOrder);
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:52:hardcoded object:	            const { redeemedCashback, unutilizedCashbacks, amountToCustomer, amountToSalesPerson } = await manageCashbacks(draftOrder, productDetails);
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:69:hardcoded object:	            const { productCombination } = productDetails;
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:70:hardcoded string:	            if (["byjus_classes", "byjus_classes_plus_byjus_tlp"].includes(productCombination)) {
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:76:hardcoded string:	            productDetails["students"] = await getUpdatedStudentDetailsWithgradeCombination(productDetails.students, productCombination, orderPunchingType);
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:79:hardcoded array:	            const { formattedProducts = [], formattedStudents = [] } = await attachSiblingDetails(productDetails, productType, draftOrder);
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:80:hardcoded string:	            productDetails["students"] = formattedStudents;
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:81:hardcoded string:	            productDetails["products"] = formattedProducts;
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:84:hardcoded string:	            if (productCombination === 'byjus_tlp') {
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:85:hardcoded string:	                orderPunchingCategory = 'byjus_tlp'
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:86:hardcoded string:	            } else if (productCombination === 'byjus_classes') {
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:87:hardcoded string:	                orderPunchingCategory = 'byjus_classes'
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:89:hardcoded variable:	            const transactionId = await reserveBonusPoints(draftOrder);
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:91:hardcoded string:	            await DraftOrder.findOneAndUpdate({ '_id': identifier }, {
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:96:hardcoded string:	                    finalPrice: get(productDetails, 'finalPrice', 0),
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:97:hardcoded string:	                    status: "product_saved",
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:100:hardcoded string:	                    "bonusPointsDetails.transactionId": transactionId
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:103:hardcoded object:	            return res.json({ productDetails, cashbackDetails: { redeemedCashback, unutilizedCashbacks } });
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:105:hardcoded string:	            throw new BadRequestError(`Parameters - ${identifier ? '' : 'identifier'} ${productDetails ? '' : 'productDetails'} Missing`);
microservices-middleware/server/src/upgradeordermanagement/byjusclass/trial/trialUpgradeProductController.js:108:hardcoded string:	        logger.error({ method: 'storeProductDetails', error }, 'Error occured in  upgrade storeProductDetails');
