microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgrade.js:1:hardcoded string:	const K10_GRADES = ['8','9', '10'];
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgrade.js:4:hardcoded string:	    productCombination: "aakash_neo_upgrade",
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgrade.js:5:hardcoded string:	    orderPunchingCategory:"aakash_neo_upgrade",
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgrade.js:6:hardcoded string:	    orderPunchingType:"upgrade_order",
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgrade.js:7:hardcoded number:	    K10_GRADES,
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgrade.js:9:hardcoded string:	        type: "service",
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgrade.js:10:hardcoded string:	        subType: "live",
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgrade.js:11:hardcoded string:	        category: "aakash_neo_upgrade",
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgrade.js:12:hardcoded string:	        k10Category:"byjus_classes_upgrade",
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgrade.js:13:hardcoded string:	        orderPunchingType: "upgrade_order",
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgrade.js:14:hardcoded string:	        orgFormattedName: "aakash",
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgrade.js:15:hardcoded string:	        orderPunchingCategory: "aakash_neo_upgrade"
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgrade.js:18:hardcoded string:	        type: "service",
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgrade.js:19:hardcoded string:	        subType: "extension",
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgrade.js:20:hardcoded string:	        category: "aakash_extension",
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgrade.js:21:hardcoded string:	        k10Category:"extension"
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeRoutes.js:5:hardcoded object:	const router = Router({ mergeParams: true });
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeRoutes.js:8:hardcoded string:	    const baseRoute = '/aakashNeoUpgrade';
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeRoutes.js:10:hardcoded object:	    router.route(`${baseRoute}/storeProductDetails`)
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeRoutes.js:16:hardcoded object:	    router.route(`${baseRoute}/product/getUpgradeProduct`)
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeOrderSplit.js:6:hardcoded variable:	const formattedAakashNeoUpgradeLineItems = async (orderDetails) => {
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeOrderSplit.js:7:hardcoded object:	    const { productDetails, orderPunchingCategory, paymentDetails = {} } = orderDetails;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeOrderSplit.js:8:hardcoded array:	    const { students = [], paymentType, student } = productDetails;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeOrderSplit.js:9:hardcoded object:	    let lineItems = {};
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeOrderSplit.js:10:hardcoded object:	    const actualPaymentType = getPaymentType({paymentDetails, paymentType});
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeOrderSplit.js:13:hardcoded number:	        const { items, formValues, studentId } = students[0];
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeOrderSplit.js:15:hardcoded string:	            throw new Error(" Order Split Failed: Aakash Neo Upgrade Order Punching LineItems Are Empty");
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeOrderSplit.js:17:hardcoded variable:	        const splittedLineItems = await getLineItems(items, formValues, actualPaymentType, studentId)
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeOrderSplit.js:18:hardcoded object:	        const { parentLineItems, childLineItems } = splittedLineItems || {};
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeOrderSplit.js:21:hardcoded string:	            throw new Error(" Order Split Failed: Aakash Neo Upgrade Order Punching LineItems Are Empty");
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeOrderSplit.js:23:hardcoded string:	        if ((actualPaymentType=='NON-EMI' &&(items.length != (parentLineItems.length + childLineItems.length)))|| 
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeOrderSplit.js:24:hardcoded string:	        (actualPaymentType=='EMI' &&(items.length + 1 != (parentLineItems.length + childLineItems.length))))
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeOrderSplit.js:26:hardcoded string:	            throw new Error(" Order Split Failed: Total lineItems Count Is Not Equal To Splitted Line Items Count ");
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeOrderSplit.js:34:hardcoded string:	        throw new Error(error || "Error in splitting line Items");
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeOrderSplit.js:39:hardcoded variable:	const getLineItems = async (items, student, paymentType, studentId) => {
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeOrderSplit.js:40:hardcoded object:	    const { productLearningType, initialClass, subCourse } = student;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeOrderSplit.js:41:hardcoded array:	    let parentLineItems = [], childLineItems = [], tabletItem = [], skuItems = [], sdCardItem = [];
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeOrderSplit.js:42:hardcoded string:	    if (paymentType == 'NON_EMI') {
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeOrderSplit.js:44:hardcoded array:	        childLineItems = []
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeOrderSplit.js:46:hardcoded string:	    if (paymentType == 'EMI') {
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeOrderSplit.js:48:hardcoded object:	        let extensionSkus = await getAakashNeoExtensionSkus({ initialClass, subCourse ,studentId})
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeOrderSplit.js:53:hardcoded array:	        parentLineItems: Array.isArray(parentLineItems) ? parentLineItems : [parentLineItems],
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeOrderSplit.js:54:hardcoded array:	        childLineItems: Array.isArray(childLineItems) ? childLineItems : [childLineItems]
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:6:hardcoded string:	const { DraftOrder, ProductDetail, PremiumAccount } = require('@byjus-orders/nexemplum/oms');
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:20:hardcoded variable:	const getUpgradeProduct = async (req, res) => {
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:21:hardcoded number:	    let maxPrice = 0, minPrice = 0;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:22:hardcoded string:	    let { paymentType, updatedStudentDetails, productType, productCombination, leadDetails, identifier = '' } = req.body;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:24:hardcoded string:	    const loggedInUserRole = get(leadDetails, "orderPunchedByRole", "");
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:27:hardcoded array:	    let skuArray = [];
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:28:hardcoded array:	    let courseSkuArray = [];
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:29:hardcoded number:	    for (var i = 0; i < updatedStudentDetails.length; i++) {
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:30:hardcoded array:	        let { initialClass, finalClass, board, subCourse, state, validity } = updatedStudentDetails[i];
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:31:hardcoded variable:	        const initialValidity = validity;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:32:hardcoded object:	        if (!board) { board = null; }
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:37:hardcoded number:	        //let validity = new Date().getFullYear() + 1;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:38:hardcoded variable:	        let grade = initialClass;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:40:hardcoded number:	            if (grade === 11 && finalClass === 12) {
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:41:hardcoded string:	                grade = '11+12';
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:43:hardcoded number:	            if (grade == 13) {
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:44:hardcoded string:	                grade = "13+"
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:46:hardcoded variable:	            const productDetails = {
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:50:hardcoded object:	            let { skus } = await getNeoUpgradeProduct(productDetails)
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:53:hardcoded string:	            grade += (grade === '11+12') ? 2 : 1;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:60:hardcoded string:	                if(sku.grade == finalClass || sku.grade == '11+12'){
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:61:hardcoded string:	                    sku["price"] = sku.basePrice
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:62:hardcoded string:	                }else if(sku.grade == initialClass && !['11+12','13+'].includes(sku.grade) && initialValidity == productConstant.DISCOUNT_ALLOWED_YEAR){
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:63:hardcoded string:	                    sku["price"] = productConstant.TLP_TO_BYJUS_CLASSES_DISC_PRICE;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:66:hardcoded string:	                    sku["price"] = sku.continuousPrice
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:68:hardcoded string:	                sku["itemId"] = getSkuItemId(sku);
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:69:hardcoded string:	                sku["combinationType"] = get(sku, "type", "").toLowerCase()
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:73:hardcoded string:	                sku["price"] = sku.basePrice
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:74:hardcoded string:	                sku["itemId"] = getSkuItemId(sku);
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:75:hardcoded string:	                sku["combinationType"] = get(sku, "type", "").toLowerCase()
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:79:hardcoded string:	        updatedStudentDetails[i]["formValues"] = { ...updatedStudentDetails[i] };
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:80:hardcoded string:	        updatedStudentDetails[i]["items"] = flattenDeep(courseSkuArray);
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:83:hardcoded number:	    maxPrice = courseSkuArray.reduce((total, sku) => parseInt(sku.price) + total, 0)
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:86:hardcoded number:	    minPrice = (Math.floor(minPrice / 1000)) * 1000
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:88:hardcoded variable:	    let discountDetails = {
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:89:hardcoded number:	        discountedPrice: 0,
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:91:hardcoded number:	        bonusPointsDiscount: 0
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:93:hardcoded variable:	    const bonusPointsDiscount = await getBonusPointsDiscount(identifier);
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:94:hardcoded number:	    if (parseInt(bonusPointsDiscount) > 0) {
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:95:hardcoded string:	        discountDetails['discountedPrice'] = minPrice - bonusPointsDiscount;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:96:hardcoded string:	        discountDetails['areBonusPointsUsed'] = true;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:97:hardcoded string:	        discountDetails['bonusPointsDiscount'] = bonusPointsDiscount;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:108:hardcoded string:	            areBonusPointsUsed: get(discountDetails, 'areBonusPointsUsed'),
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:109:hardcoded string:	            bonusPointsDiscount: get(discountDetails, 'bonusPointsDiscount'),
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:110:hardcoded string:	            discountedPrice: get(discountDetails, 'discountedPrice'),
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:119:hardcoded variable:	const storeProductDetails = async (req, res) => {
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:121:hardcoded object:	        let { tlpOrderData, productDetail, identifier, leadDetails } = req.body;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:122:hardcoded array:	        let { minPrice, maxPrice, finalPrice, paymentType, updatedStudentDetails = [], products, students } = productDetail;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:125:hardcoded string:	            throw new BadRequestError("Parameter missing");
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:127:hardcoded object:	        let { customerDetails: orderCustomerDetails, orderId, customerId: tlpCustomerId } = tlpOrderData;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:128:hardcoded number:	        const type = orderCustomerDetails[0].type
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:129:hardcoded string:	        const { productSelectionType: oldProductSelectionType } = orderCustomerDetails[0] || ""
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:130:hardcoded variable:	        let draftOrder = await draftOrderConverterUtility.getDraftOrderConverter(tlpOrderData);
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:131:hardcoded object:	        let { customerDetails = {}, addressDetails, salesDetails, contactDetails } = draftOrder
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:132:hardcoded object:	        let productDetails = {};
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:133:hardcoded string:	        if (type !== 'sibling') {
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:134:hardcoded number:	            let { initialClass, finalClass, subCourse } = updatedStudentDetails[0];
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:136:hardcoded string:	            let { board, state = "", items } = students[0];
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:137:hardcoded number:	            students[0].initialClass = initialClass
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:138:hardcoded string:	            students[0]["studentId"] = orderCustomerDetails[0].studentName;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:140:hardcoded number:	                item.studentId = orderCustomerDetails[0].studentName
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:142:hardcoded string:	            students["items"] = items[0];
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:143:hardcoded string:	            productDetails["students"] = students[0]
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:150:hardcoded string:	        //             let { board, subCourse, state = "", items } = st;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:151:hardcoded variable:	        //             let initialClass = st.initialClass, finalClass = st.finalClass;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:153:hardcoded string:	        //             st.productSelectionType = "byjus_aakash";
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:155:hardcoded array:	        //             st.studentId = `${orderCustomerDetails[idx].studentName}-${idx}`
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:157:hardcoded array:	        //                 item.studentId = `${orderCustomerDetails[idx].studentName}-${idx}`
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:159:hardcoded string:	        //             st["items"] = items;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:163:hardcoded object:	        const { customerId, customerType } = (!tlpCustomerId) ? await getDraftCustomerId(customerDetails, leadDetails) : { customerId: tlpCustomerId };
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:165:hardcoded string:	        productDetails["students"] = await getStudentProfileDetails({ students, productCombination: "aakash_neo_upgrade" });
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:166:hardcoded string:	        productDetails["products"] = products;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:167:hardcoded string:	        productDetails["productType"] = type;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:168:hardcoded string:	        productDetails["minPrice"] = minPrice;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:169:hardcoded string:	        productDetails["maxPrice"] = maxPrice;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:170:hardcoded string:	        productDetails["finalPrice"] = finalPrice;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:171:hardcoded string:	        productDetails["paymentType"] = paymentType;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:174:hardcoded string:	            studentMobileNo: orderCustomerDetails[0]["studentMobile"] || "",
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:175:hardcoded string:	            parentMobileNo: orderCustomerDetails[0]["parentMobile"] || "",
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:179:hardcoded string:	        const finalProductPrice = get(productDetails, 'finalPrice', 0);
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:182:hardcoded variable:	            const draftOrder = await checkIfDraftOrderExists(identifier);
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:184:hardcoded string:	                await DraftOrder.findOneAndUpdate({ '_id': identifier }, {
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:188:hardcoded string:	                        status: "product_saved",
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:192:hardcoded string:	                            newCourse: "aakash_neo_upgrade",
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:195:hardcoded string:	                        orgFormattedName: 'aakash',
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:206:hardcoded variable:	        const updateData = {
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:216:hardcoded string:	            status: "product_saved"
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:219:hardcoded variable:	        const transactionId = await reserveBonusPoints(draftOrder);
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:220:hardcoded string:	        if (transactionId !== "") {
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:221:hardcoded string:	            updateData["bonusPointsDetails.transactionId"] = transactionId;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:224:hardcoded variable:	        const newOrder = new DraftOrder({
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeController.js:238:hardcoded string:	        logger.error({ method: 'storeProductDetails', error }, 'Error occured');
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeHelper.js:5:hardcoded string:	const { SalesSkuMaster } = require('@byjus-orders/npgexemplum')
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeHelper.js:11:hardcoded variable:	const getNeoUpgradeProduct = async (details) => {
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeHelper.js:13:hardcoded string:	    let { initialClass, finalClass, grade, productCombination, subCourse, validity, board, state = "" } = details;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeHelper.js:16:hardcoded string:	    if (grade == '11+12') {
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeHelper.js:17:hardcoded number:	        validity += 1;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeHelper.js:21:hardcoded variable:	    const queryForUpgrade = {
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeHelper.js:24:hardcoded string:	        board:board === 'STATE' ? state : board,
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeHelper.js:29:hardcoded string:	        status: 'active'
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeHelper.js:31:hardcoded number:	    if (AakashNeoUpgrade.K10_GRADES.includes(grade)) {
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeHelper.js:33:hardcoded string:	        queryForUpgrade["category"] = AakashNeoUpgrade.live.k10Category;
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeHelper.js:37:hardcoded variable:	        let skus = await getAakashNeoUpgradeSkus(queryForUpgrade)
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeHelper.js:38:hardcoded object:	        return {skus };
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeHelper.js:42:hardcoded variable:	const getErrorMsg = function (queryDetails) {
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeHelper.js:43:hardcoded object:	    const { grade, subCourse, validity, type } = queryDetails || {};
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeHelper.js:46:hardcoded string:	    ${subCourse ? `Course: ${subCourse}` : ''}
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeHelper.js:47:hardcoded string:	    ${grade ? `Grade: ${grade}` : ''}
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeHelper.js:48:hardcoded string:	    ${type ? `Type: ${type}` : ''}
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeHelper.js:49:hardcoded string:	    ${validity ? `Validity: ${validity}` : ''}
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeHelper.js:53:hardcoded variable:	const getSkuItemId = (product) => {
microservices-middleware/server/src/upgradeordermanagement/aakashNeo/aakashNeoUpgradeHelper.js:54:hardcoded number:	    const itemId = nanoid(24)
