microservices-middleware/server/src/upgradeordermanagement/upgradeRoutes.js:1:hardcoded file path:const Router = require('express-promise-router');
microservices-middleware/server/src/upgradeordermanagement/upgradeRoutes.js:2:hardcoded file path:const byjusMathproductController = require('./byjusmath/productController');
microservices-middleware/server/src/upgradeordermanagement/upgradeRoutes.js:3:hardcoded file path:const blcUpgradeProductController = require('./blc/blcUpgradeProductController');
microservices-middleware/server/src/upgradeordermanagement/upgradeRoutes.js:4:hardcoded file path:const aakashLiveProductController = require('./aakashlive/aakashLiveUpgradeProductController');
microservices-middleware/server/src/upgradeordermanagement/upgradeRoutes.js:5:hardcoded file path:const byjusClassProductController = require('./byjusclass/btlp/tlpToByjusClassController');
microservices-middleware/server/src/upgradeordermanagement/upgradeRoutes.js:6:hardcoded file path:const trialProductController = require('./byjusclass/trial/trialUpgradeProductController');
microservices-middleware/server/src/upgradeordermanagement/upgradeRoutes.js:7:hardcoded file path:const salesController = require('./upgradeSaleAndCustomerDetailsController')
microservices-middleware/server/src/upgradeordermanagement/upgradeRoutes.js:8:hardcoded object:const { storeCalculatedPriceMw, validateCalculatedPriceMw } = require('../productmanagement/productHelper')
microservices-middleware/server/src/upgradeordermanagement/upgradeRoutes.js:11:hardcoded object:    const router = Router({ mergeParams: true });
microservices-middleware/server/src/upgradeordermanagement/upgradeRoutes.js:76:hardcoded string:    router.route('/upgrade/saveSalesAndCustomerDetails')
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:1:hardcoded object:const { get, isEmpty } = require('lodash');
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:2:hardcoded object:const { BadRequestError } = require('../../lib/errors');
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:4:hardcoded string:const { DraftOrder } = require('@byjus-orders/nexemplum/oms');
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:7:hardcoded file path:    checkIfCashbackLockedWithDiffDraftOrder, getUpdatedSalesDetails, getLeadEvaluationDetails, getOrgFormattedName } = require("../detailsmanagement/detailsHelper");
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:8:hardcoded object:const { generateDraftOrderId } = require('../../utility/draftOrderUtility');
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:9:hardcoded file path:const logger = require('../../lib/bunyan-logger')('Upgrade Sales and Customer Details Controller');
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:10:hardcoded object:const { getDraftCustomerId } = require('../customermanagement/customerController');
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:11:hardcoded object:const {getOrderApprovalStatus} = require('../../lib/rcnHelper');
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:12:hardcoded object:const { isDevEnv, getSalesComments } = require("../../lib/featureHelper");
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:15:hardcoded variable:const saveSalesAndCustomerDetails = async (req, res) => {
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:17:hardcoded string:        let { originalOrderId, salesDetails, customerDetails, leadDetails, identifier, orderPunchingType = "TRIAL_PACK_TO_BYJUS_CLASSES", omsConfig = {}, loggedInUserDetails = {} } = req.body;
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:18:hardcoded string:        const { email } = get(req, 'user', {});
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:20:hardcoded string:            throw new BadRequestError("Parameter missing");
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:24:hardcoded variable:        const salesDetailsValidation = await validateSalesDetails(salesDetails, orderPunchingType, leadDetails);
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:26:hardcoded number:            return res.status(400).json(salesDetailsValidation);
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:29:hardcoded variable:        const lockedErrors = await checkIfCashbackLockedWithDiffDraftOrder(customerDetails);
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:31:hardcoded number:            return res.status(400).json({ lockedErrors });
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:35:hardcoded string:        const orderApproval = isDevEnv && await getOrderApprovalStatus(salesDetails) || "not_applicable";
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:37:hardcoded object:        let draftOrder = {};
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:38:hardcoded string:        let orgFormattedName = "byjus"
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:40:hardcoded variable:        const updatedSalesDetails = await getUpdatedSalesDetails(salesDetails, omsConfig, loggedInUserDetails);
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:42:hardcoded string:        if (get(updatedSalesDetails, 'isOmsOrderEligible')) {
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:46:hardcoded string:        leadDetails["isLeadMobileUsed"] = get(leadDetails, "studentMobile", "").split(",")[0] === get(customerDetails, "parentMobileNo", "");
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:47:hardcoded string:        const isEligibleForEvalution = await getLeadEvaluationDetails(leadDetails, get(salesDetails, "directSalesBy", ""));
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:48:hardcoded string:        leadDetails["isEligibleForEvalution"] = isEligibleForEvalution;
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:49:hardcoded string:        leadDetails["loggedInRole"] = get(leadDetails, "orderPunchedByRole", "");
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:51:hardcoded object:        const {customerId, customerType } = await getDraftCustomerId(customerDetails, leadDetails);
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:58:hardcoded variable:        const comments = getSalesComments(email,updatedSalesDetails?.directSalesBy,updatedSalesDetails?.salesAppointmentBy);
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:60:hardcoded variable:        const updateData = {
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:61:hardcoded string:            isOmsOrder: get(updatedSalesDetails, 'isOmsOrderEligible', false),//to track oms orders in Draft order worker
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:65:hardcoded string:            status: "details_saved",
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:67:hardcoded array:            [`actionDetails.detailsSavedAt`]: new Date(),
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:68:hardcoded array:            [`actionDetails.detailsSavedBy`]: email,
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:74:hardcoded string:            source: 'kart',
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:80:hardcoded object:            await DraftOrder.findOneAndUpdate({ _id: identifier }, {
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:87:hardcoded variable:            const newOrder = new DraftOrder({
microservices-middleware/server/src/upgradeordermanagement/upgradeSaleAndCustomerDetailsController.js:102:hardcoded string:        logger.error({ method: 'getSalesPersonDetails', error }, 'Error occured');
