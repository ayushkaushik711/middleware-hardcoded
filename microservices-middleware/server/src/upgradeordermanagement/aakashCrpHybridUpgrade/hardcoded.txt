microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeOrderSplit.js:6:hardcoded variable:	const formattedAakashCrpHybridUpgradeLineItems = async (orderDetails) => {
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeOrderSplit.js:7:hardcoded object:	    const { productDetails, orderPunchingCategory, paymentDetails = {} } = orderDetails;
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeOrderSplit.js:8:hardcoded array:	    const { students = [], student } = productDetails;
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeOrderSplit.js:9:hardcoded object:	    let lineItems = {};
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeOrderSplit.js:10:hardcoded variable:	    const paymentType = getPaymentType(paymentDetails);
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeOrderSplit.js:13:hardcoded number:	        const { items, formValues, studentId } = students[0];
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeOrderSplit.js:15:hardcoded string:	            throw new Error(" Order Split Failed: Aakash Crp Hybrid Upgrade Order Punching LineItems Are Empty");
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeOrderSplit.js:17:hardcoded object:	        const splittedLineItems = await getLineItems({ items, paymentType, studentId, productDetails: formValues, orderPunchingCategory })
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeOrderSplit.js:18:hardcoded object:	        const { parentLineItems, childLineItems } = splittedLineItems || {};
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeOrderSplit.js:21:hardcoded string:	            throw new Error(" Order Split Failed: Aakash Crp Hybrid Upgrade Order Punching Items Are Empty");
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeOrderSplit.js:23:hardcoded string:	        if ((paymentType == 'NON-EMI' && (items.length != (parentLineItems.length + childLineItems.length))) ||
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeOrderSplit.js:24:hardcoded string:	            (paymentType == 'EMI' && (items.length + 1 != (parentLineItems.length + childLineItems.length)))) {
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeOrderSplit.js:25:hardcoded string:	            throw new Error(" Order Split Failed: Total lineItems Count Is Not Equal To Splitted Line Items Count ");
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeOrderSplit.js:33:hardcoded string:	        throw new Error(error || "Error in splitting line Items");
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeOrderSplit.js:38:hardcoded object:	const getLineItems = async ({ items, paymentType, studentId, productDetails, orderPunchingCategory }) => {
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeOrderSplit.js:39:hardcoded array:	    let parentLineItems = [], childLineItems = []
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeOrderSplit.js:40:hardcoded string:	    if (paymentType == 'NON_EMI') {
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeOrderSplit.js:42:hardcoded array:	        childLineItems = []
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeOrderSplit.js:44:hardcoded string:	    if (paymentType == 'EMI') {
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeOrderSplit.js:46:hardcoded object:	        let extensionSku = await getAakashCrpHybridExtensionSkus({ orderPunchingCategory, productDetails, studentId })
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeRoutes.js:5:hardcoded object:	const router = Router({ mergeParams: true });
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeRoutes.js:8:hardcoded string:	    const baseRoute = '/aakashCrpHybridUpgrade';
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeRoutes.js:10:hardcoded object:	    router.route(`${baseRoute}/storeProductDetails`)
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeRoutes.js:16:hardcoded object:	    router.route(`${baseRoute}/getProduct`)
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:4:hardcoded string:	const { DraftOrder } = require('@byjus-orders/nexemplum/oms');
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:17:hardcoded variable:	const getProduct = async (req, res) => {
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:18:hardcoded number:	    let maxPrice = 0, minPrice = 0;
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:19:hardcoded string:	    let { paymentType, productType, productCombination, leadDetails, identifier = '', productDetails, student } = req.body;
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:23:hardcoded array:	    let courseSkuArray = [];
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:24:hardcoded object:	    let upgradeSku = await getUpgradeSku({ productDetails: student, productCombination })
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:28:hardcoded string:	        sku["price"] = sku.basePrice
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:29:hardcoded string:	        sku["itemId"] = getSkuItemId(sku);
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:30:hardcoded string:	        sku["combinationType"] = get(sku, "type", "").toLowerCase()
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:33:hardcoded string:	    student["formValues"] = { ...student };
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:34:hardcoded string:	    student["items"] = flattenDeep(courseSkuArray);
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:37:hardcoded number:	    maxPrice = courseSkuArray.reduce((total, sku) => parseInt(sku.price) + total, 0)
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:40:hardcoded number:	    minPrice = (Math.floor(minPrice / 1000)) * 1000
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:42:hardcoded variable:	    let discountDetails = {
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:43:hardcoded number:	        discountedPrice: 0,
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:45:hardcoded number:	        bonusPointsDiscount: 0
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:47:hardcoded variable:	    const bonusPointsDiscount = await getBonusPointsDiscount(identifier);
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:48:hardcoded number:	    if (parseInt(bonusPointsDiscount) > 0) {
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:49:hardcoded string:	        discountDetails['discountedPrice'] = minPrice - bonusPointsDiscount;
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:50:hardcoded string:	        discountDetails['areBonusPointsUsed'] = true;
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:51:hardcoded string:	        discountDetails['bonusPointsDiscount'] = bonusPointsDiscount;
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:61:hardcoded array:	            students: [student],
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:62:hardcoded string:	            areBonusPointsUsed: get(discountDetails, 'areBonusPointsUsed'),
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:63:hardcoded string:	            bonusPointsDiscount: get(discountDetails, 'bonusPointsDiscount'),
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:64:hardcoded string:	            discountedPrice: get(discountDetails, 'discountedPrice'),
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:73:hardcoded variable:	const storeProductDetails = async (req, res) => {
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:74:hardcoded string:	    let { identifier, productDetails, productCombination = "", studentDetails } = req.body;
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:75:hardcoded string:	    const { email } = get(req, 'user', {});
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:76:hardcoded string:	    logger.info({ method: 'storeProductDetails', msg: `Storing Product Details for _id:${identifier}` });
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:80:hardcoded string:	            throw new BadRequestError(`Parameters - ${identifier ? '' : 'identifier'} ${productDetails ? '' : 'productDetails'} Missing`);
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:81:hardcoded variable:	        const draftOrder = await checkIfDraftOrderExists(identifier);
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:84:hardcoded object:	            const { isOmsOrder, customerDetails } = draftOrder;
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:85:hardcoded object:	            const { productType, isGstIn, student = {} } = productDetails;
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:86:hardcoded string:	            const { validity = "", subCourse, product, productLearningType, upgradeOrderDetails } = student;
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:87:hardcoded variable:	            const isOmsEligibleOrder = await checkIsOmsOrder(productType, isOmsOrder, validity);
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:88:hardcoded object:	            const { redeemedCashback, unutilizedCashbacks, amountToCustomer, amountToSalesPerson } = await manageCashbacks(draftOrder, productDetails);
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:89:hardcoded object:	            let { orgFormattedName, orderPunchingType } = draftOrder
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:104:hardcoded string:	            if (get(config, 'isStudentProfileAvailable') === "true" && productDetails.students && productDetails.students.length) {
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:109:hardcoded array:	            const { formattedProducts = [], formattedStudents = [] } = await attachSiblingDetails(productDetails, productType, draftOrder, studentDetails);
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:110:hardcoded string:	            productDetails["students"] = formattedStudents;
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:111:hardcoded string:	            productDetails["products"] = formattedProducts;
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:112:hardcoded string:	            const orderPunchingCategory = "aakash_crp_hybrid_upgrade";
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:113:hardcoded string:	            orgFormattedName = "aakash";
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:114:hardcoded string:	            orderPunchingType = "upgrade_order";
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:115:hardcoded string:	            let bookInvoicing = 'not_applicable';
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:116:hardcoded array:	            let addOnLineItems = [];
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:117:hardcoded string:	            if (['local'].includes(process.env.NODE_ENV)) {
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:119:hardcoded string:	                bookInvoicing = 'applicable';
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:124:hardcoded variable:	            const updateObj = {
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:127:hardcoded array:	                addOnLineItems: addOnLineItems || [],
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:131:hardcoded string:	                finalPrice: get(productDetails, 'finalPrice', 0),
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:132:hardcoded string:	                status: "product_saved",
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:133:hardcoded array:	                [`actionDetails.productSavedAt`]: new Date(),
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:134:hardcoded array:	                [`actionDetails.productSavedBy`]: email,
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:136:hardcoded string:	                "customerDetails.gstDetails.isGstIn": isGstIn,
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:140:hardcoded variable:	            const transactionId = await reserveBonusPoints(draftOrder);
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:141:hardcoded string:	            if (transactionId !== "") {
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:142:hardcoded string:	                updateObj["bonusPointsDetails.transactionId"] = transactionId;
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:145:hardcoded string:	            await DraftOrder.findOneAndUpdate({ '_id': identifier }, {
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/aakashCrpHybridUpgradeController.js:148:hardcoded object:	            return res.json({ productDetails, cashbackDetails: { redeemedCashback, unutilizedCashbacks } });
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/dto.js:1:hardcoded string:	const { SalesSkuMaster } = require('@byjus-orders/npgexemplum')
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/dto.js:4:hardcoded object:	const getUpgradeSku = async ({ productDetails, productCombination }) => {
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/dto.js:11:hardcoded variable:	    const grade = getGrade(initialClass, finalClass)
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/dto.js:13:hardcoded variable:	    let query = {
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/dto.js:16:hardcoded string:	        validity: `${grade == '11+12' ? validity + 1 : validity}`,
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/dto.js:20:hardcoded variable:	    let sku = await SalesSkuMaster.findOne({
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/dto.js:25:hardcoded string:	        throw new Error("Error while Fetching Skus for Selected combination")
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/dto.js:32:hardcoded variable:	const getGrade = (initialClass, finalClass) => {
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/dto.js:33:hardcoded string:	    if (initialClass == "11" && finalClass == "12") {
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/dto.js:34:hardcoded string:	        return '11+12'
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/dto.js:37:hardcoded object:	    return `${initialClass}`
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/dto.js:40:hardcoded object:	const getAakashCrpHybridExtensionSkus = async ({ orderPunchingCategory, productDetails, studentId }) => {
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/dto.js:46:hardcoded variable:	    const grade = getGrade(initialClass, finalClass)
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/dto.js:48:hardcoded variable:	    let query = {
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/dto.js:51:hardcoded string:	        subType: "extension",
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/dto.js:54:hardcoded variable:	    let sku = await SalesSkuMaster.findOne({
microservices-middleware/server/src/upgradeordermanagement/aakashCrpHybridUpgrade/dto.js:59:hardcoded string:	        throw new Error("Extension sku not Found for this combination")
