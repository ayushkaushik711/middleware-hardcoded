microservices-middleware/server/src/student/proficiencyController.js:6:hardcoded variable:	const getProficiency = async (req, res) => {
microservices-middleware/server/src/student/proficiencyController.js:7:hardcoded object:	    let { mathsMarks, scienceMarks, board, state } = req.body
microservices-middleware/server/src/student/proficiencyController.js:10:hardcoded string:	    if (board == "STATE") {
microservices-middleware/server/src/student/proficiencyController.js:11:hardcoded string:	        board = state == "Other" ? "CBSE" : state
microservices-middleware/server/src/student/proficiencyController.js:14:hardcoded variable:	    const payload = {
microservices-middleware/server/src/student/proficiencyController.js:22:hardcoded string:	        proficiencyDetails = await callStmsApi('stms/students/getProficiency', 'POST', payload)
microservices-middleware/server/src/student/proficiencyController.js:23:hardcoded string:	        proficiency = get(proficiencyDetails, 'proficiency', '')
microservices-middleware/server/src/student/proficiencyController.js:24:hardcoded object:	        res.json({ proficiency: proficiency })
microservices-middleware/server/src/student/proficiencyController.js:26:hardcoded object:	        console.log(err, `Error is getting proficiency. Payload - ${payload}`)
microservices-middleware/server/src/student/proficiencyController.js:27:hardcoded object:	        throw new Error(err, `Error is getting proficiency. Payload - ${payload}`);
microservices-middleware/server/src/student/studentRoutes.js:6:hardcoded object:	    const router = Router({ mergeParams: true });
microservices-middleware/server/src/student/studentRoutes.js:8:hardcoded string:	    router.route('/school/getStates')
microservices-middleware/server/src/student/studentRoutes.js:14:hardcoded string:	    router.route('/school/getCities')
microservices-middleware/server/src/student/studentRoutes.js:20:hardcoded string:	    router.route('/school/getSchools')
microservices-middleware/server/src/student/studentRoutes.js:26:hardcoded string:	    router.route('/school/getOtherSchools')
microservices-middleware/server/src/student/studentRoutes.js:32:hardcoded string:	    router.route('/school/getTrackId')
microservices-middleware/server/src/student/studentRoutes.js:38:hardcoded string:	    router.route('/school/getProficiency')
microservices-middleware/server/src/student/schoolController.js:6:hardcoded variable:	const getStates = async (req, res) => {
microservices-middleware/server/src/student/schoolController.js:10:hardcoded string:	        states = await callDsslApiV2('/states', 'GET');
microservices-middleware/server/src/student/schoolController.js:14:hardcoded object:	        throw new Error(`ERROR : Error in fetching state from school universe, ${error}`);
microservices-middleware/server/src/student/schoolController.js:18:hardcoded variable:	const getCities = async (req, res) => {
microservices-middleware/server/src/student/schoolController.js:19:hardcoded object:	    const { schoolState } = req.body
microservices-middleware/server/src/student/schoolController.js:22:hardcoded string:	        let cities = await callDsslApiV2(`/cities?state_name=${schoolState}`, 'GET');
microservices-middleware/server/src/student/schoolController.js:26:hardcoded object:	        throw new Error(`ERROR : Error in fetching cities for state ${schoolState} from school universe, ${error}`);
microservices-middleware/server/src/student/schoolController.js:30:hardcoded variable:	const getSchools = async (req, res) => {
microservices-middleware/server/src/student/schoolController.js:31:hardcoded object:	    let { cityId, board, state, grade } = req.body;
microservices-middleware/server/src/student/schoolController.js:32:hardcoded object:	    board = mapDsslBoardValue({ board, state, grade })
microservices-middleware/server/src/student/schoolController.js:34:hardcoded object:	    const params = `city_id=${cityId}&board=${board}`
microservices-middleware/server/src/student/schoolController.js:36:hardcoded string:	        const schoolsList = await callDsslApiV2(`/schools?${params}`, 'GET');
microservices-middleware/server/src/student/schoolController.js:40:hardcoded object:	        throw new Error(`ERROR : Error in fetching schools from school universe, Params -${params}. ${error}`);
microservices-middleware/server/src/student/schoolController.js:44:hardcoded variable:	const getOtherSchools = async (req, res) => {
microservices-middleware/server/src/student/schoolController.js:45:hardcoded object:	    const { searchText } = req.body;
microservices-middleware/server/src/student/schoolController.js:47:hardcoded variable:	    const resp = await callGoogleApiToGetSchools(searchText)
microservices-middleware/server/src/student/schoolController.js:52:hardcoded variable:	const getTrackId = async (req, res) => {
microservices-middleware/server/src/student/schoolController.js:53:hardcoded object:	    let { grade, schoolId, board, state } = req.body
microservices-middleware/server/src/student/schoolController.js:56:hardcoded object:	    board = mapDsslBoardValue({ board, state, grade })
microservices-middleware/server/src/student/schoolController.js:57:hardcoded object:	    const params = `universal_id=${schoolId}&grade=${grade}&board=${board}`
microservices-middleware/server/src/student/schoolController.js:60:hardcoded string:	        trackDetails = await callDsslApiV2(`/learning_tracks?${params}`, 'GET');
microservices-middleware/server/src/student/schoolController.js:67:hardcoded object:	        } else res.json({ error: `Track ID not found, Params ${params}` })
microservices-middleware/server/src/student/schoolController.js:70:hardcoded object:	        throw new Error(`ERROR : Error in fetching trackId. Params ${params}. ${err}`);
