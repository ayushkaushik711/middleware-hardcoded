microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:1:hardcoded object:import React, { useState, useEffect, useMemo } from 'react';
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:2:hardcoded object:import { Card, Col, Input, Row, Button, Table } from 'reactstrap';
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:3:hardcoded object:import { useSelector } from 'react-redux';
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:4:hardcoded object:import { get, isEmpty } from 'lodash';
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:6:hardcoded file path:import CallApi from 'api/callApi';
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:7:hardcoded file path:import currencyFormatter from 'utility/currencyFormatter';
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:9:hardcoded file path:import EmiCardPaymentForm from './EmiCardPaymentForm';
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:10:hardcoded file path:import EmiCardPaymentsTable from './EmiCardPaymentsTable';
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:13:hardcoded object:    const {selectedQuotation, selectedProduct, loading, user, isEmiCardPaymentExpired = false, collapseLoanAndEmi, orgId, prospectId, leadPhoneNo } = props;
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:14:hardcoded string:    const [emiCardOption, setEmiCardOption] = useState('');
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:15:hardcoded array:    const [showEmiCardPaymentForm, setShowEmiCardPaymentForm] = useState(false);
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:16:hardcoded array:    const [paymentConfig,setPaymentConfig] = useState([]);
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:17:hardcoded array:    const [error, setError] = useState(null);
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:18:hardcoded array:    const [eligibilityCheck, setEligibilityCheck] = useState({});
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:20:hardcoded string:    const leadLoans = useSelector(state => get(state, 'auth.details.leadLoans', []));
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:21:hardcoded string:    const loan = useSelector(state => get(state, 'payment.paymentAssociatedWithLead.loans', []));
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:22:hardcoded variable:    let payment = isEmpty(loan) ? leadLoans : loan;
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:23:hardcoded object:    const { isDevEnv } = window;
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:25:hardcoded string:    payment = payment.filter(loan => loan.mode === "bajaj_emi" || loan.paymentPartner === "shopse" || loan.paymentPartner === "bajaj");
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:29:hardcoded array:    }, []);
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:31:hardcoded variable:    const getPaymentConfig = () => {
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:34:hardcoded string:                url: '/api/config/getPaymentConfig',
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:35:hardcoded string:                method: 'POST',
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:36:hardcoded object:                body: {}
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:39:hardcoded object:                const { data } = response;
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:48:hardcoded variable:    const getMinAllowedAmount = useMemo(()=> {
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:49:hardcoded number:        return paymentConfig?.find(ele=>ele?.formattedName === emiCardOption)?.dpConfig?.default?.webapp?.default?.minValue || 0;
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:50:hardcoded array:    }, [paymentConfig,emiCardOption])
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:52:hardcoded variable:    const getMaxAllowedAmount = useMemo(()=> {
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:53:hardcoded number:        return paymentConfig?.find(ele=>ele?.formattedName === emiCardOption)?.dpConfig?.default?.webapp?.default?.maxValue || 100000;
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:54:hardcoded array:    }, [paymentConfig,emiCardOption])
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:56:hardcoded variable:    const getDpConfig = useMemo(()=> {
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:57:hardcoded array:       return paymentConfig?.find(ele=>ele?.formattedName === emiCardOption)?.dpConfig?.default?.webapp?.default?.dpConfig || [];
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:58:hardcoded array:    },[paymentConfig,emiCardOption])
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:60:hardcoded variable:    const slabwiseDownPayment = ()=> {
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:62:hardcoded string:            <Table striped size="sm">
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:72:hardcoded object:                            <tr key={index}>
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:73:hardcoded string:                                <td>{index === getDpConfig.length-1 ? `Greater than ${currencyFormatter(ele.minRange-1,"INR")}` : `${currencyFormatter(ele.minRange,"INR")} - ${currencyFormatter(ele.maxRange,"INR")}`}</td>
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:74:hardcoded string:                                <td>{currencyFormatter(ele.amount,"INR")}</td>
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:83:hardcoded string:    <Card className='p-2'>
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:84:hardcoded string:        <Row className='mb-2'>
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:87:hardcoded string:        {!isEmpty(eligibilityCheck) && ["BAJAJ"].includes(emiCardOption) && <Row>
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:88:hardcoded string:            <Col className={`text-${eligibilityCheck.code==="YY" ? "info" : "danger"} font-weight-bold`}>{eligibilityCheck.message}</Col>
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:90:hardcoded string:        {!isEmpty(emiCardOption) && !["--Select payment option--"].includes(emiCardOption) && (["BAJAJ","SHOPSE", "BAJAJ_VIA_PAYU"].includes(emiCardOption) ? slabwiseDownPayment() : <Row className='text-danger ml-1 mb-2 mr-2'>
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:91:hardcoded number:        Please note that a minimum Down Payment of INR 10,000 is required along with this payment method
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:93:hardcoded object:        {!isEmpty(payment) && <EmiCardPaymentsTable payment={payment} />}
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:94:hardcoded string:        {(isEmiCardPaymentExpired || isEmpty(payment)) && <Row className='mb-2'>
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:96:hardcoded string:                <Input name="provider" type="select" onChange={e => setEmiCardOption(e.target.value)}>
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:98:hardcoded string:                    <option value="SHOPSE">Shopse</option>
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:99:hardcoded string:                    <option value="BAJAJ">Bajaj Finance</option>
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:100:hardcoded string:                    <option value="BAJAJ_VIA_PAYU">Bajaj EMI Card (via PayU)</option>
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:104:hardcoded string:                <Button color='info' onClick={()=>setShowEmiCardPaymentForm(true)}>Create Payment</Button>
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:107:hardcoded string:        {showEmiCardPaymentForm && ["SHOPSE","BAJAJ_VIA_PAYU","BAJAJ"].includes(emiCardOption) && 
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:109:hardcoded object:                selectedQuotation={selectedQuotation}
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:110:hardcoded object:                selectedProduct={selectedProduct}
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:111:hardcoded object:                loading={loading}
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:112:hardcoded object:                user={user}
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:113:hardcoded object:                provider={emiCardOption}
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:114:hardcoded object:                collapseLoanAndEmi={collapseLoanAndEmi}
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:115:hardcoded object:                payment={payment}
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:116:hardcoded object:                setEligibilityCheck={setEligibilityCheck}
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:117:hardcoded object:                maxValueAllowed={getMaxAllowedAmount}
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPayments.jsx:118:hardcoded object:                minValueAllowed={getMinAllowedAmount}
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/Style.js:1:hardcoded string:import styled from "@emotion/styled";
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/Style.js:3:hardcoded variable:export const Label = styled.label`
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/Style.js:5:hardcoded string:        content: "*";
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/Style.js:7:hardcoded number:        margin-left: 5px;
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentsTable.jsx:1:hardcoded file path:import React from 'react';
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentsTable.jsx:2:hardcoded object:import { Table } from 'reactstrap';
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentsTable.jsx:3:hardcoded object:import { startCase } from 'lodash';
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentsTable.jsx:5:hardcoded object:function EmiCardPaymentsTable({payment}) {
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentsTable.jsx:7:hardcoded string:    <Table striped size="md">
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentsTable.jsx:19:hardcoded object:                <tr key={idx}>
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentsTable.jsx:20:hardcoded string:                    <th scope="row">{idx + 1}</th>
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentsTable.jsx:21:hardcoded object:                    <td>{payment.referenceId}</td>
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentsTable.jsx:22:hardcoded object:                    <td>{startCase(payment.paymentPartner || payment.paymentTransferPartner)}</td>
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentsTable.jsx:23:hardcoded object:                    <td>{payment.amount}</td>
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentsTable.jsx:24:hardcoded object:                    <td>{startCase(payment.status)}</td>
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:1:hardcoded object:import React, { useState, useEffect, useRef, lazy } from 'react';
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:2:hardcoded object:import { get, upperFirst } from 'lodash';
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:3:hardcoded object:import { Button, Input, Alert, Row, Col, ModalBody, Card } from 'reactstrap';
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:4:hardcoded file path:import CallApi from 'api/callApi';
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:5:hardcoded number:import uuidv4 from 'uuid/v4'
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:6:hardcoded object:import { Select,Modal } from 'antd';
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:7:hardcoded object:import { useSelector } from 'react-redux';
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:8:hardcoded file path:import Joi from "joi";
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:10:hardcoded object:import { Label } from './Style';
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:11:hardcoded file path:import currencyFormatter from 'utility/currencyFormatter';
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:12:hardcoded object:import { getReportersList } from 'modules/payment/helper/helper';
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:13:hardcoded object:import { createPaymentActivityOnLS } from 'modules/payment/helper/lsPaymentActivityHelper';
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:14:hardcoded object:import { shopseValidation, bajajValidation } from '../../../helper/paymentValidation';
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:15:hardcoded object:import { BAJAJ_LOAN_TENURES } from "../../../helper/constants";
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:16:hardcoded object:import { leadquaredRelatedPermissions } from "utility/screenPermission";
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:17:hardcoded string:const MaskedInput = lazy(() => import("components/masking/MaskedInput"));
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:19:hardcoded object:const EmiCardPaymentForm = ({ loading, provider, quotationId, selectedProduct, user, collapseLoanAndEmi, payment, setEligibilityCheck, maxValueAllowed, minValueAllowed }) => {
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:20:hardcoded string:    const [error, setError] = useState("");
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:21:hardcoded array:    const [salesEmailList, setSalesEmailList] = useState([]);
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:22:hardcoded string:    const [shopseEligibility, setShopseEligibility] = useState({ message: "", code: "", isValidated: false })
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:23:hardcoded array:    const [shopsePaymentValidated, setShopsePaymentValidated] = useState(false)
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:24:hardcoded array:    const [showShopseModal, setShowShopseModal] = useState(false)
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:25:hardcoded string:    const [bajajEligibility, setBajajEligibility] = useState({ message: "",code: "", isValidated: false })
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:26:hardcoded array:    const [bajajPaymentValidated, setBajajPaymentValidated] = useState(false)
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:27:hardcoded variable:    const mobileRef = useRef(null);
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:28:hardcoded variable:    const emailRef = useRef(null);
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:30:hardcoded string:    const userPermissions = get(user, "permissions", [])
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:31:hardcoded variable:    const isPrivilegedUser = userPermissions.includes(leadquaredRelatedPermissions.allownMultipleOrderOnSameProspectId);
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:33:hardcoded string:    const leadDetails = useSelector(state => get(state, 'auth.leadDetails', {}));
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:34:hardcoded string:    const { prospectId = "", accountNumber = "" } = leadDetails;
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:35:hardcoded string:    const { email = "" } = user;
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:36:hardcoded object:    const { isDevEnv } = window;
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:38:hardcoded string:    let mobile = get(leadDetails, "studentMobile", "");
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:39:hardcoded string:    mobile = mobile.split(",")[0];
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:40:hardcoded string:    mobile = mobile.split("-");
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:41:hardcoded number:    mobile = mobile.length > 1 ? mobile[1] : mobile[0];
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:42:hardcoded variable:    const leadPhoneNo = mobile;
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:44:hardcoded array:    const [formValues, setFormValues] = useState({
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:51:hardcoded object:        getReportersList({ user }).then(res => {
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:55:hardcoded number:                salesEmail: res[0]?.value
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:59:hardcoded array:    }, [])
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:63:hardcoded string:        if (provider==="SHOPSE" && shopseEligibility && shopseEligibility.isValidated) {
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:66:hardcoded string:        }else if (provider==="BAJAJ" && bajajEligibility && bajajEligibility.isValidated) {
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:69:hardcoded array:    }, [shopseEligibility,bajajEligibility])
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:75:hardcoded array:    },[provider])
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:77:hardcoded variable:    const onChange = (e) => {
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:78:hardcoded object:        const { name, value } = e.target;
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:81:hardcoded array:            [name]: value
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:85:hardcoded variable:    const getSelectValue = (value, name) => {
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:88:hardcoded array:            [name]: value
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:92:hardcoded variable:    const checkShopseEligibility = async (payload) => {
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:93:hardcoded object:        const { validationResp, error } = await shopseValidation({ payload, loading, leadPayments:payment })
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:94:hardcoded number:        if (error.length>0) {
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:95:hardcoded string:            setError("Runtime Error. Please try again.");
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:98:hardcoded object:            setShopseEligibility({ ...shopseEligibility, ...validationResp })
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:102:hardcoded variable:    const checkBajajEligibility = async (payload) => {
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:103:hardcoded object:        const { validationResp, error } = await bajajValidation({ payload, loading })
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:104:hardcoded number:        if (error.length>0) {
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:105:hardcoded string:            setError("Request timed out. Please try again.");
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:108:hardcoded object:            setBajajEligibility({ ...bajajEligibility, ...validationResp })
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:109:hardcoded object:            setEligibilityCheck({...validationResp});
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:113:hardcoded variable:    const onClickCreatePayment = async () => {
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:114:hardcoded object:        setEligibilityCheck({});
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:115:hardcoded string:        formValues["provider"] = provider
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:116:hardcoded string:        if (formValues["userEmail"]) leadDetails["userEmail"] = formValues["userEmail"]
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:118:hardcoded string:    const payload = { ...formValues, quotationId,userEmail: email, selectedProduct, leadPhoneNo, prospectId, accountNumber, mobile: mobileRef?.current?.value, email: emailRef?.current?.value, provider: "BAJAJ_VIA_PAYU" === provider ? "PAYU_BAJAJ_EMI" : provider};
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:119:hardcoded string:        if (provider === "SHOPSE" && !shopsePaymentValidated && isValidForm(payload)) {
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:121:hardcoded string:        }else if (provider === "BAJAJ" && !bajajPaymentValidated && isValidForm(payload)) {
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:127:hardcoded string:                    url: provider==="BAJAJ" ? '/api/payment/createBajajPayment' : '/api/payment/createPayment',
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:128:hardcoded string:                    method: 'POST',
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:132:hardcoded object:                    const { data } = response;
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:133:hardcoded object:                    const { resp } = data;
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:134:hardcoded object:                    createPaymentActivityOnLS({ ...resp, ...payload })
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:144:hardcoded variable:    const validateEmail = (email) => {
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:145:hardcoded variable:        const re = /\S+@\S+\.\S+/;
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:149:hardcoded variable:    const validateCustomerName = (customerName) =>{
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:150:hardcoded object:        const nameObj = {customerName : customerName}
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:151:hardcoded variable:        const schema = Joi.object({
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:152:hardcoded number:            customerName: Joi.string().regex(/^([a-zA-Z]+[\s]*)+$/).min(3).max(60).trim().required()
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:154:hardcoded variable:        const validate = schema.validate(nameObj);
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:161:hardcoded variable:    const isValidForm = (payload) => {
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:162:hardcoded object:        const { amount, mobile, customerName, email, provider, tenure } = payload
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:163:hardcoded variable:        let isValid = true
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:165:hardcoded string:            setError("Amount should be number")
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:168:hardcoded object:            setError(`Minimum Applicable Amount: ${currencyFormatter(minValueAllowed)}`)
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:171:hardcoded object:            setError(`Maximum Applicable Amount: ${currencyFormatter(maxValueAllowed)}`);
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:173:hardcoded number:        } else if (!mobile || mobile.length !== 10) {
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:174:hardcoded string:            setError("Enter valid mobile number")
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:177:hardcoded string:            setError("Enter Customer Name")
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:180:hardcoded string:            setError("Enter valid Customer Name")
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:183:hardcoded string:            setError("Enter Email Id")
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:186:hardcoded string:            setError("Enter valid email Id")
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:188:hardcoded string:        }else if (["BAJAJ"].includes(provider) && !tenure) {
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:189:hardcoded string:            setError("Please select EMI Tenure");
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:192:hardcoded string:            setError("");
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:197:hardcoded variable:    const closeModal = () => {
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:202:hardcoded variable:    const shopseModalButtons = ()=>{
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:203:hardcoded string:        if(["NN","YN"].includes(shopseEligibility?.code)){
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:204:hardcoded string:            return [<Button key="cancel" color="danger" onClick={closeModal}>Close</Button>]
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:207:hardcoded string:                <Button key="submit" color="info" onClick={onClickCreatePayment}>Send Link To Customer</Button>,
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:208:hardcoded string:                <Button key="cancel" color="danger" onClick={closeModal}>Cancel Transaction</Button>
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:215:hardcoded string:            {error && <Alert color="danger">{error}</Alert>}
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:217:hardcoded string:                <Col md="6" sm="12">
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:219:hardcoded string:                    <Input type="text" name="customerName" disabled={bajajPaymentValidated} defaultValue={formValues.customerName} onChange={e => onChange(e)} />
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:221:hardcoded string:                <Col md="6" sm="12">
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:223:hardcoded string:                    <MaskedInput ref={emailRef} initialValue={formValues.email} field={{ isSuperUser: isPrivilegedUser, type: "maskedMail", disabled: bajajPaymentValidated }} />
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:228:hardcoded string:                <Col md="6" sm="12">
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:230:hardcoded string:                    <MaskedInput ref={mobileRef} initialValue={formValues.mobile} field={{ isSuperUser: isPrivilegedUser, type: "maskedMobile", disabled: bajajPaymentValidated }} />
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:232:hardcoded string:                <Col md="6" sm="12">
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:234:hardcoded string:                    <Input type="text" name="amount" disabled={bajajPaymentValidated} defaultValue={formValues?.amount} onChange={e => onChange(e)} />
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:238:hardcoded string:            {["BAJAJ"].includes(provider) && <><Row>
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:239:hardcoded string:                <Col md="6" sm="12">
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:241:hardcoded string:                    <Input type='select' name="tenure" disabled={bajajPaymentValidated} onChange={e => onChange(e)} >
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:242:hardcoded string:                        <option value="">Select EMI tenure</option>
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:243:hardcoded object:                        {BAJAJ_LOAN_TENURES?.map(item => <option value={item?.value}>{item?.label}</option>)}
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:247:hardcoded string:                    <Card className="text-red my-4 p-3 text-center">
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:248:hardcoded string:                        <span>Please ask the customer to send an SMS "BFLAPP" to "9667712715" from the registered phone number to check the available limit on the EMI card.</span>
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:255:hardcoded string:                    <Label htmlFor="salesEmail">Sales Email</Label>
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:256:hardcoded string:                    <Select showSearch name="salesEmail" id="salesEmail" value={formValues?.salesEmail} disabled={salesEmailList?.length == 1 || bajajPaymentValidated} onChange={(value) => getSelectValue(value, "salesEmail")} >
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:257:hardcoded string:                        <Select.Option value="" key={uuidv4()}>Select Sales Email</Select.Option>
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:258:hardcoded number:                        {salesEmailList?.map(item => <Select.Option key={uuidv4()} value={item?.value}>{item?.label}</Select.Option>)}
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:260:hardcoded string:                    <div className="text-info" style={{ fontSize: "0.75rem", fontWeight: 400 }}>*Selected sales person will only be able to punch order with this reference</div>
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:264:hardcoded string:            <Row style={{flexDirection: "row-reverse",marginRight: 0,marginLeft: 0}}>
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:265:hardcoded string:                {(["SHOPSE","BAJAJ"].includes(provider) && !bajajPaymentValidated) ? <Button color="success" onClick={() => onClickCreatePayment()}>Check Eligibility</Button> :
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:266:hardcoded string:                (["BAJAJ"].includes(provider) && bajajPaymentValidated)? <Col className="d-flex justify-content-between"><Button style={{backgroundColor:"#207868",marginLeft:"-15px"}} onClick={()=>{setBajajPaymentValidated(false);setEligibilityCheck({});}}>Reset</Button>
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:267:hardcoded string:                <Button style={{backgroundColor:"#207868",marginRight:"-15px"}} onClick={()=>onClickCreatePayment()}>Send Payment Link</Button></Col> :
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:268:hardcoded string:                <Button color="success" onClick={() => onClickCreatePayment()}>Create Payment</Button>}
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:272:hardcoded string:                    title="Check For Eligibility"
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:273:hardcoded object:                    visible={showShopseModal}
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:274:hardcoded object:                    onOk={onClickCreatePayment}
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:275:hardcoded string:                    okText="Send Link To Customer"
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:276:hardcoded string:                    cancelText="Cancel Transaction"
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:277:hardcoded object:                    onCancel={closeModal}
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:278:hardcoded number:                    zIndex={0}
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:279:hardcoded object:                    footer={shopseModalButtons()}
microservices-middleware/client/src/modules/payment/components/paymentform/emicardpayments/EmiCardPaymentForm.jsx:281:hardcoded string:                    <ModalBody style={{fontSize:"large"}}>{shopseEligibility.message}</ModalBody>
