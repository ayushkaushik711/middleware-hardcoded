microservices-middleware/client/src/modules/quotationschool/student/address/index.js:1:hardcoded object:import React, { useRef, useState } from "react";
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:2:hardcoded object:import { Button } from "reactstrap";
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:3:hardcoded object:import { get, isEmpty, isArray } from "lodash";
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:5:hardcoded file path:import CallApi from "../../../../api/callApi";
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:6:hardcoded file path:import FormBuilder from "components/form/ReactstrapFormBuilder";
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:8:hardcoded variable:const AddressForm = (props) => {
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:9:hardcoded variable:  const addressForm = useRef();
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:10:hardcoded array:  const [loading, setLoading] = useState(false);
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:11:hardcoded array:  const [error, setError] = useState(null);
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:12:hardcoded array:  const [city, setCity] = useState([]);
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:13:hardcoded array:  const [state, setState] = useState([]);
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:14:hardcoded array:  const [country, setCountry] = useState([]);
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:15:hardcoded number:  const [zipCode, setZipCode] = useState(0);
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:16:hardcoded array:  const [formValues, setFormValues] = useState({});
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:17:hardcoded array:  const [addressDetails, setAddressDetails] = useState({});
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:19:hardcoded variable:  const handleOnChange = async (value) => {
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:21:hardcoded number:        if (value.length === 6) {
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:22:hardcoded variable:            const payload = {
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:25:hardcoded variable:            const response = await CallApi({
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:26:hardcoded string:                url: "/api/quotation-school/getPincodeInfo",
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:27:hardcoded string:                method: "POST",
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:31:hardcoded string:            const data = get(response, "data", []);
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:32:hardcoded string:            const cities = get(data, 'city', []);
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:33:hardcoded variable:            const cityListOptions = !isArray(cities)
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:35:hardcoded object:                : cities?.map((city) => { return { value: city, label: city } });
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:37:hardcoded string:            setCountry(get(data, "country", ""));
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:38:hardcoded string:            setState(get(data, "state", ""));
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:40:hardcoded string:            setFormValues(prevState => ({ ...prevState, ['city']: cityListOptions }))
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:41:hardcoded object:            setAddressDetails({});
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:50:hardcoded variable:  const validateAddressValues = (formValues) => {
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:51:hardcoded object:    let validationErrors = {};
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:52:hardcoded variable:    let regexNumber = /\d/g;
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:53:hardcoded array:    let regexSpecial = /[`!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~]/g;
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:54:hardcoded number:    var zipcode = /(^\d{6}$)/
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:56:hardcoded string:        if (["state", "city", "country"].includes(key)) {
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:58:hardcoded string:                regexNumber.test(get(formValues[key], 'value') ? get(formValues[key], 'value') : formValues[key]) ||
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:59:hardcoded string:                regexSpecial.test(get(formValues[key], 'value') ? get(formValues[key], 'value') : formValues[key])
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:61:hardcoded array:                validationErrors[key] = `Enter a valid ${key}`;
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:64:hardcoded string:        else if (key === 'zipCode') {
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:66:hardcoded array:                !zipcode.test(formValues[key])
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:68:hardcoded array:                validationErrors[key] = `Enter a valid ${key}`;
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:76:hardcoded variable:const handleOnAddressChange = (e, name, options) => {
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:78:hardcoded array:      let record = []
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:84:hardcoded array:      setFormValues(prevState => ({ ...prevState, [name]: record }))
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:88:hardcoded variable:  const onClickProceed = async () => {
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:89:hardcoded variable:    const addressFormValues = addressForm.current.validateFormAndGetValues();
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:94:hardcoded string:        setError("Form values are missing");
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:98:hardcoded variable:  const addressFormDetails = () => {
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:99:hardcoded variable:    const addressFields = [
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:101:hardcoded string:        type: "text",
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:102:hardcoded string:        name: "zipCode",
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:103:hardcoded string:        label: "Zipcode",
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:104:hardcoded string:        placeholder: "Zipcode",
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:105:hardcoded number:        maxLength: 6,
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:107:hardcoded string:        value: isEmpty(zipCode) ? "" : zipCode,
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:111:hardcoded string:        type: "text",
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:112:hardcoded string:        name: "address1",
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:113:hardcoded string:        label: "Adress 1(School Name/Plat No.)",
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:117:hardcoded string:        type: "text",
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:118:hardcoded string:        name: "address2",
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:119:hardcoded string:        label: "Address 2(Street Name/locality)",
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:123:hardcoded string:        type: "text",
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:124:hardcoded string:        name: "address3",
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:125:hardcoded string:        label: "Address 2(Post Office)",
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:129:hardcoded string:        type: 'text',
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:130:hardcoded string:        name: "country",
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:131:hardcoded string:        label: "Country",
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:132:hardcoded string:        placeholder: "Country",
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:134:hardcoded string:        value: isEmpty(country) ? "India" : country,
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:138:hardcoded string:        type: "text",
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:139:hardcoded string:        name: "state",
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:140:hardcoded string:        label: "State",
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:141:hardcoded string:        placeholder: "State",
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:143:hardcoded string:        value: isEmpty(state) ? "" : state,
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:147:hardcoded string:      type: !isEmpty(city) && isArray(city) ? "select" : "text",
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:148:hardcoded string:      name: "city",
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:149:hardcoded string:      label: "City",
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:150:hardcoded string:      placeholder: "City",
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:154:hardcoded string:      onChange: (e) => handleOnAddressChange(e, "city", city),
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:159:hardcoded object:        ref={addressForm}
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:160:hardcoded object:        fields={addressFields}
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:161:hardcoded object:        validateAddressValues={validateAddressValues}
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:163:hardcoded string:          zipCode: !isEmpty(get(addressFields, "0.value"))
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:164:hardcoded string:              ? get(addressFields, "0.value")
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:165:hardcoded string:              : get(addressDetails, "zipCode"),
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:166:hardcoded string:          country: !isEmpty(get(addressFields, "4.value"))
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:167:hardcoded string:              ? get(addressFields, "4.value")
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:168:hardcoded string:              : get(addressDetails, "country"),
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:169:hardcoded string:          state: !isEmpty(get(addressFields, "5.value"))
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:170:hardcoded string:              ? get(addressFields, "5.value")
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:171:hardcoded string:              : get(addressDetails, "state"),
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:172:hardcoded string:          city: get(formValues, "city")
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:179:hardcoded object:      {addressFormDetails()}
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:181:hardcoded string:      <div style={{ display: "flex", justifyContent: "space-between" }}>
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:182:hardcoded string:        <Button color="primary" onClick={props.toggleSection(props.index - 1)}>
microservices-middleware/client/src/modules/quotationschool/student/address/index.js:185:hardcoded string:        <Button color="primary" onClick={onClickProceed}>
