microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:1:hardcoded variable:	export const getGenderMode = {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:2:hardcoded string:	    'gender': [
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:4:hardcoded string:	            label: 'Any',
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:5:hardcoded string:	            value: 'any'
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:8:hardcoded string:	            label: 'Male',
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:9:hardcoded string:	            value: 'male'
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:13:hardcoded string:	            label: 'Female',
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:14:hardcoded string:	            value: 'female'
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:18:hardcoded string:	    'mode': [{
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:19:hardcoded string:	        label: 'Offline',
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:20:hardcoded string:	        value: 'offline'
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:24:hardcoded string:	        label: 'Online',
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:25:hardcoded string:	        value: 'online'
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:30:hardcoded variable:	export const getSameTutorList = [
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:32:hardcoded string:	        label: 'Yes',
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:33:hardcoded string:	        value: 'yes'
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:37:hardcoded string:	        label: 'No',
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:38:hardcoded string:	        value: 'no'
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:43:hardcoded string:	export const getTutorLanguages = [{label: "English", value: "english"}]
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:45:hardcoded variable:	export const dayOfWeekData = {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:46:hardcoded string:	    '1': "Mon",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:47:hardcoded string:	    '2': "Tue",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:48:hardcoded string:	    '3': "Wed",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:49:hardcoded string:	    '4': "Thur",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:50:hardcoded string:	    '5': "Fri",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:51:hardcoded string:	    '6': "Sat",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:52:hardcoded string:	    '7': "Sun",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:56:hardcoded string:	export const getFrequencies = [{label: "3", value: 3}, {label: "4", value: 4}, {label: "5", value: 5}]
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:58:hardcoded string:	export const getFrequencyFiveOptions = [{label: "2Maths + 3Science", value: "2Maths + 3Science", mathsCount: 2, scienceCount:3},{label: "3Maths + 2Science", value: "3Maths + 2Science", mathsCount: 3, scienceCount:2}]
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:60:hardcoded string:	export const getFrequencyFourOptions = [{label: "2Maths + 2Science", value: "2Maths + 2Science"}]
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:62:hardcoded number:	export const proficiencyRange = { min: 1, max: 100 }
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:64:hardcoded variable:	export const dayMapping = {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:65:hardcoded string:	    1: "Monday",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:66:hardcoded string:	    2: "Tuesday",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:67:hardcoded string:	    3: "Wednesday",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:68:hardcoded string:	    4: "Thursday",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:69:hardcoded string:	    5: "Friday",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:70:hardcoded string:	    6: "Saturday",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:71:hardcoded string:	    7: "Sunday"
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:74:hardcoded variable:	export const dateRange = {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:76:hardcoded string:	        "trial_pack": 0, // current date + 2
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:77:hardcoded string:	        "quarterly_pack": 0, // current date + 5
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:78:hardcoded string:	        "1_month_pack": 0 // current date + 5
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:81:hardcoded string:	        "trial_pack": 14, // current date + 14
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:82:hardcoded string:	        "quarterly_pack": 30, // current date + 30
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:83:hardcoded string:	        "1_month_pack": 30 // current date + 30
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:88:hardcoded variable:	export const boardMapping = {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:89:hardcoded string:	    "CBSE":"CBSE",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:90:hardcoded string:	    "ICSE": "ICSE",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:91:hardcoded string:	    "Punjab": "PSEB",	
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:92:hardcoded string:	    "Bihar": "BSET",	
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:93:hardcoded string:	    "West Bengal": "WBBSE",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:94:hardcoded string:	    "Andhra Pradesh": "BSEAP",	 
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:95:hardcoded string:	    "Kerala": "KBPE",	
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:96:hardcoded string:	    "Karnataka": "KSEEB",	
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:97:hardcoded string:	    "Gujarat": "GSEB",	
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:98:hardcoded string:	    "Maharashtra": "MSBSHSE",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:99:hardcoded string:	    "Tamil Nadu": "TNBSE",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/constant.js:100:hardcoded string:	    "Telangana": "BSET",	
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:27:hardcoded string:	} from "./dataSource";
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:31:hardcoded variable:	const BHT = (props) => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:32:hardcoded array:	  const [loading, setLoading] = useState(false);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:33:hardcoded array:	  const [error, setError] = useState(null);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:34:hardcoded variable:	  const productFormRef = useRef();
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:35:hardcoded variable:	  const subjectFormRef = useRef();
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:36:hardcoded variable:	  const batchDetailsRef = useRef();
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:37:hardcoded variable:	  const FetchPriceRef = useRef();
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:38:hardcoded variable:	  const proficiencyFormRef = useRef();
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:39:hardcoded variable:	  const slotsFormRef = useRef();
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:40:hardcoded variable:	  const tutorFormRef = useRef();
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:41:hardcoded variable:	  const teachingFormRef = useRef();
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:42:hardcoded variable:	  const trialDateTimeFormRef = useRef();
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:43:hardcoded array:	  const [formValues, setFormValues] = useState({});
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:44:hardcoded array:	  const [resetPrice, setResetPrice] = useState(false);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:45:hardcoded array:	  const [slotsFormValues, setSlotsFormValues] = useState({});
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:46:hardcoded array:	  const [tutorFormValues, setTutorFormValues] = useState({});
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:47:hardcoded array:	  const [slotFormValues, setSlotFormValues] = useState({});
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:48:hardcoded array:	  const [tabletFormValues, setTabletFormValues] = useState({});
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:49:hardcoded array:	  const [onChangeEffect, setOnChangeEffect] = useState(true);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:50:hardcoded string:	  const [selectedSubject, setSelectedSubject] = useState("");
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:51:hardcoded string:	  const [selectedFrequency, setSelectedFrequency] = useState("");
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:52:hardcoded string:	  const [selectedGrade, setSelectedGrade] = useState("");
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:53:hardcoded string:	  const [selectedBoard, setSelectedBoard] = useState("");
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:54:hardcoded string:	  const [selectedStateBoard, setSelectedStateBoard] = useState("")
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:55:hardcoded string:	  const [selectedGender, setSelectedGender] = useState("");
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:56:hardcoded string:	  const [selectedLanguage, setSelectedLanguage] = useState("");
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:57:hardcoded string:	  const [selectedCluster, setSelectedCluster] = useState("");
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:58:hardcoded string:	  const [teachingMode, setTeachingMode] = useState("");
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:59:hardcoded array:	  const [boardList, setBoardList] = useState([]);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:60:hardcoded string:	  const [selectedValidity, setSelectedValidity] = useState("");
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:61:hardcoded array:	  const [languageList, setLanguageList] = useState([]);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:62:hardcoded array:	  const [gradeList, setGradeList] = useState([]);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:63:hardcoded array:	  const [proficiencyValidation, setProficiencyValidation] = useState(false);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:64:hardcoded array:	  const [showPrice, setShowPrice] = useState(false)
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:65:hardcoded array:	  const [selectedStartDate, setSelectedStartDate] = useState(null);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:66:hardcoded array:	  const [teachingModeValues, setTeachingModeValues] = useState([]);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:67:hardcoded array:	  const [isBatchesAvailable, setIsBatchesAvailable] = useState(false);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:68:hardcoded array:	  const [selectedSlots, setSelectedSlots] = useState({});
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:69:hardcoded array:	  const [requestSlots, setRequestSlots] = useState({});
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:70:hardcoded array:	  const [quotationStudent, setQuotationStudent] = useRecoilState(
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:73:hardcoded object:	  const {tutorAvailable, tutorUnAvailable} = slotsFormValues;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:74:hardcoded array:	  const [upgradeData, setupgradeData] = useRecoilState(upgradeOrderDetails);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:75:hardcoded string:	  const { productSelectionType='', activeBoard='', currentGrade, finalGrade} = upgradeData
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:82:hardcoded string:	    quotationStatus = "",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:83:hardcoded object:	    product = {},
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:86:hardcoded object:	    voucherDetails = {},
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:89:hardcoded string:	  const autoFillEnabled = ["product_saved"].includes(quotationStatus)
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:92:hardcoded string:	  const existingFormValues = get(product, "formValues", "");
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:100:hardcoded string:	    const modeList = getGenderMode['mode'];
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:101:hardcoded string:	    setTeachingModeValues((prevState) => ({ ...prevState, modeList, mode: modeList.filter(list => list.value === 'offline') }));
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:103:hardcoded object:	      const { stateListOptions: statesList, errormsg } = await getStates();
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:105:hardcoded object:	      setFormValues((prevState) => ({ ...prevState, statesList }));
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:106:hardcoded object:	      const { validityListOptions: validities, errormessage } = await getValidity({
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:111:hardcoded object:	      setFormValues((prevState) => ({ ...prevState, validities }));
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:112:hardcoded object:	      const { languageListOptions: languages, error } = await getLanguages();
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:115:hardcoded object:	      //setLanguageFormValues((prevState) => ({ ...prevState, primary: languages }));
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:116:hardcoded string:	      const genderList = getGenderMode['gender'];
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:117:hardcoded variable:	      const tutorLanguageList = languages;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:118:hardcoded variable:	      const sameTutorList = getSameTutorList;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:120:hardcoded string:	        sameTutorList, gender: genderList.filter(ele => ele.value === "any") }));
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:124:hardcoded array:	  }, []);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:129:hardcoded object:	      const { boardListOptions: boardsList, stateBoardListOptions: stateBoardList, errormsg } = await getBoards({
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:135:hardcoded number:	        const board = boardsList && boardsList.filter(item => item.label == activeBoard)[0]
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:136:hardcoded object:	        const { gradeListOptions: gradesList, errormsg } = await getGrades({
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:142:hardcoded number:	        const initialClass = gradesList && gradesList.filter(item => item.label == currentGrade)[0]
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:144:hardcoded object:	        setFormValues((prevState) => ({ ...prevState, board, initialClass, gradesList }));
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:146:hardcoded object:	      setFormValues((prevState) => ({ ...prevState, boardsList, stateBoardList }));
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:151:hardcoded array:	  }, []);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:160:hardcoded variable:	  const assembleFormDetails = async() => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:164:hardcoded string:	    if(isEmpty(productForm)) return { errormsg: "Please fill the required product Details" };
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:165:hardcoded object:	    const {validity: validityDetails, centre: centreDetails} = productForm || {};
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:166:hardcoded object:	    const {value: validity} = validityDetails || {};
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:167:hardcoded string:	    const {areaUniqueCode = ''} = centreDetails || {};
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:168:hardcoded variable:	    const formDetails = getFormDetailsForBatch();
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:169:hardcoded variable:	    let teachingForm = teachingFormRef.current && (await teachingFormRef.current.validateFormAndGetValues());
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:170:hardcoded string:	    if(isEmpty(teachingForm)) return { errormsg: "Please fill the required teaching form Details" };
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:171:hardcoded variable:	    let proficiencyForm = proficiencyFormRef.current && (await proficiencyFormRef.current.validateFormAndGetValues());
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:172:hardcoded string:	    if(isEmpty(proficiencyForm)) return { errormsg: "Please fill the required proficiencyForm Details" };
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:173:hardcoded string:	    if (!proficiencyValidation) return { errormsg: "Please enter student proficiency..." };
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:174:hardcoded variable:	    let tutorForm = tutorFormRef.current && (await tutorFormRef.current.validateFormAndGetValues());
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:175:hardcoded string:	    if(isEmpty(tutorForm)) return { errormsg: "Please fill the required tutor form Details" };
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:176:hardcoded object:	    const {mode: teachingMode} = teachingForm;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:177:hardcoded object:	    const {value: mode} = teachingMode||{};
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:179:hardcoded object:	    const {board: boardDetails} = productForm;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:180:hardcoded object:	    const {label: board} = boardDetails || {};
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:182:hardcoded object:	    const {stateBoard: stateBoardDetails} = productForm;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:183:hardcoded object:	    const {label: stateBoard} = stateBoardDetails || {};
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:185:hardcoded object:	    const {initialClass: gradeDetails} = productForm;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:186:hardcoded object:	    const {label: grade} = gradeDetails || {};
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:188:hardcoded object:	    const {gender: genderDetails} = tutorForm;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:189:hardcoded object:	    const {value: gender} = genderDetails || {}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:194:hardcoded object:	    if (isEmpty(subjectDetails)) return {};
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:196:hardcoded object:	    const {proficiency} = subjectDetails || {};
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:197:hardcoded string:	    const subject = get(formDetails, "subject");
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:198:hardcoded array:	    let subjectList = [];
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:199:hardcoded string:	    if(["Mathematics + Science"].includes(subject)){
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:200:hardcoded string:	      subjectList = ["Mathematics", "Science"]
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:202:hardcoded array:	      subjectList = [subject]
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:205:hardcoded string:	    const sameTutorValue = get(tutorForm, "sameTutor", true);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:206:hardcoded variable:	    let slotsFormDetails = slotsFormRef.current && (await slotsFormRef.current.validateFormAndGetValues());
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:209:hardcoded string:	      return {errormsg: "Please fill the required Slot Preference Details"}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:211:hardcoded object:	    const {tutorUnAvailable: preferredSlotOption} = slotsFormDetails || {};
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:212:hardcoded string:	    const tutorLanguage = get(tutorFormValues,'tutorLanguage.label')
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:213:hardcoded variable:	    const slotPayload = {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:214:hardcoded string:	      board: board == "STATE" ? get(boardMapping, stateBoard, stateBoard): board,
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:219:hardcoded array:	      preferredLanguage: tutorLanguage ? [tutorLanguage] : [],
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:220:hardcoded string:	      tenant: "bht",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:221:hardcoded string:	      product: "bht",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:222:hardcoded number:	      slotDuration: 60,
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:223:hardcoded number:	      teachingMode: mode ? mode : teachingModeValues?.mode[0]?.value,
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:226:hardcoded string:	      slotPreference: preferredSlotOption ? "tutorUnAvailable": "tutorAvailable" 
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:228:hardcoded object:	    let response={};
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:229:hardcoded string:	    if(!sameTutorValue && validity!="trial_pack"){
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:230:hardcoded string:	      slotPayload.subject = ["Mathematics"];
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:231:hardcoded array:	      let mathsResponse = await callSlots(slotPayload) || [];
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:232:hardcoded string:	      let mathSlotList = get(mathsResponse, "slotDateList", []);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:236:hardcoded string:	          subject:"Mathematics"
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:239:hardcoded string:	      slotPayload.subject = ["Science"];
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:240:hardcoded array:	      let scienceResponse = await callSlots(slotPayload) || [];
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:241:hardcoded string:	      let scienceSlotList = get(scienceResponse, "slotDateList", []);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:245:hardcoded string:	          subject:"Science"
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:250:hardcoded array:	      response = await callSlots(slotPayload) || [];
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:252:hardcoded string:	    let slotList = get(response, "slotDateList", []);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:253:hardcoded array:	    let slotDate = [];
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:254:hardcoded string:	    if(validity=='trial_pack'){
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:256:hardcoded string:	        return {label: item.startTime?.split("T")[0], value: item.startTime?.split("T")[0]}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:258:hardcoded string:	      slotDate = uniqBy(slotDate, 'value')
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:261:hardcoded object:	        return {label: item.startMinute, value: item.startMinute}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:263:hardcoded string:	      slotDate = uniqBy(slotDate, 'value')
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:276:hardcoded variable:	  const getFormDetailsForBatch = () => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:284:hardcoded string:	      proficiency: get(formValues, 'proficiency', null),
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:285:hardcoded string:	      teachingMode: get(tutorFormValues,'tutorLanguage.label', ''),
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:288:hardcoded string:	      slots: get(formValues, "slots", []),
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:289:hardcoded string:	      frequency: get(formValues, "frequency.value", ""),
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:290:hardcoded string:	      sameTutor: get(tutorFormValues, "sameTutor", true),
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:291:hardcoded string:	      subjectSlots: get(tutorFormValues, "subjectSlots")
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:295:hardcoded variable:	  const getIstTime = (slotTime) => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:296:hardcoded string:	    let slotTimings = slotTime.split(":");
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:297:hardcoded number:	        if(slotTimings.length>0){
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:298:hardcoded string:	            let hours = slotTimings[0] || "0";
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:299:hardcoded number:	            hours = parseInt(hours) + 5;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:300:hardcoded string:	            let mins = slotTimings[1] || "0";
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:301:hardcoded number:	            mins = parseInt(mins) + 30;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:302:hardcoded number:	            let updatedMins = parseInt((mins % 60));
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:303:hardcoded number:	            const extraHr = parseInt((mins / 60));
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:304:hardcoded variable:	            let updatedHours = hours + extraHr;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:305:hardcoded number:	            if(updatedMins<10){
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:306:hardcoded number:	                updatedMins = `0${updatedMins}`;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:308:hardcoded number:	            if(updatedHours<10){
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:309:hardcoded number:	                updatedHours = `0${updatedHours}`
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:311:hardcoded string:	            return `${updatedHours}:${updatedMins}:${get(slotTimings, "2", "00")}`
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:315:hardcoded variable:	  const checkBatchAvailability = async (slotList, sameTutor=true) => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:318:hardcoded string:	        let mathsSlots = slotList.filter(item=>item.subject=="Mathematics");
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:319:hardcoded string:	        let scienceSlots = slotList.filter(item=>item.subject=="Science");
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:320:hardcoded number:	        if(mathsSlots.length==0 || scienceSlots.length==0){
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:333:hardcoded variable:	  const getProductDetails = async () => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:335:hardcoded variable:	    let teachingForm = teachingFormRef.current && 
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:337:hardcoded string:	    if(!teachingForm) return { errormsg: "Please fill teaching mode"};
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:342:hardcoded string:	    if (!productForm) return { errormsg: "Please fill the required Details" };
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:344:hardcoded variable:	    let tutorForm = tutorFormRef.current && (await tutorFormRef.current.validateFormAndGetValues());
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:345:hardcoded string:	    if (!tutorForm) return { errormsg: "Please fill tutor preferences"};
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:350:hardcoded string:	    if (!subjectDetails) return { errormsg: "Please select subject" };
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:355:hardcoded string:	    if(productForm?.validity?.value === 'trial_pack') {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:357:hardcoded string:	        return { errormsg: "Please select start date and time"}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:365:hardcoded string:	    if (!selectedStartDate && !['trial_pack'].includes(get(productForm, 'validity.value', ''))) return { errormsg: "Please select a start date"};
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:367:hardcoded string:	    if(productForm?.validity?.value != "trial_pack") {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:368:hardcoded object:	      let {success, data={}} = nonTrialSlotDetails
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:369:hardcoded number:	      if (!success || Object.keys(nonTrialSlotDetails.data).length != productForm?.frequency?.value) return { errormsg: data[0] };
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:372:hardcoded string:	    if (!slotsFormValues) return { errormsg: "Please select a slot preference..."};
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:373:hardcoded string:	    if (!proficiencyValidation) return { errormsg: "Please enter student proficiency..." };
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:376:hardcoded object:	     const { updatedFormValues } = getUpdatedFormValues({
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:384:hardcoded number:	       defaultTeachingMode: teachingModeValues?.mode[0]?.value,
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:394:hardcoded string:	      url:"/api/quotation-beta/getBhtProduct",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:409:hardcoded variable:	  const handleChange = async (value, name, params) => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:414:hardcoded object:	    const { data } = params;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:417:hardcoded string:	    if (name === "state") {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:418:hardcoded object:	      const { statesList } = formValues;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:421:hardcoded array:	        cityList: [],
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:422:hardcoded array:	        centreList: [],
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:427:hardcoded object:	      const { label } = statesList.find((obj) => obj.value === value);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:428:hardcoded object:	      const { cityListOptions: cityList, errormsg } = await getCities(
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:439:hardcoded string:	    } else if (name === "city") {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:440:hardcoded object:	      const { cityList } = formValues;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:443:hardcoded array:	        centreList: [],
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:448:hardcoded object:	      const { label } = cityList.find((obj) => obj.value === value);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:449:hardcoded object:	      const { centreListOptions: centreList, errormsg } = await getCentres(
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:460:hardcoded string:	    } else if (name === "centre") {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:461:hardcoded object:	      const { centreList } = formValues;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:462:hardcoded object:	      const { label } = centreList.find((obj) => obj.value === value);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:472:hardcoded string:	    if (name === "board") {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:479:hardcoded string:	        isStateBoard: params.label === "STATE" ? true : false
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:482:hardcoded string:	      if (params.label !== "STATE") {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:483:hardcoded object:	        const { gradeListOptions: gradesList, errormsg } = await getGrades({
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:491:hardcoded object:	        setFormValues((prevState) => ({ ...prevState, gradesList }));
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:492:hardcoded variable:	        const filterboard = boardList.filter((item) => item.value === value);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:493:hardcoded string:	        setSelectedBoard(filterboard[0]['label'])
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:497:hardcoded string:	    if (name === 'stateBoard') {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:507:hardcoded array:	      const { isStateBoard, stateBoardList = [] } = formValues
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:509:hardcoded object:	        const { gradeListOptions: gradesList, errormsg } = await getGrades({
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:517:hardcoded object:	        setFormValues((prevState) => ({ ...prevState, gradesList }));
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:518:hardcoded variable:	        const filterboard = stateBoardList.filter((item) => item.value === value);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:519:hardcoded string:	        setSelectedStateBoard(filterboard[0]['label'])
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:520:hardcoded string:	        setSelectedBoard(filterboard[0]['label'])
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:524:hardcoded string:	    if (name === 'initialClass') {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:525:hardcoded variable:	      const filtergrade = gradeList.filter((item) => item.value === value);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:526:hardcoded string:	      setSelectedGrade(filtergrade[0]['label'])
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:527:hardcoded string:	      setFormValues((prevState) => ({ ...prevState, validity: ""}))
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:530:hardcoded string:	    if (name === 'tablet') {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:531:hardcoded array:	      setTabletFormValues((prevState) => ({...prevState, [name]: params ? (data ? data : false) : true}))
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:534:hardcoded string:	    if (name === 'validity') {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:535:hardcoded object:	      let { subjectListOptions: subjectList, errormessage } = await getSubjects();
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:539:hardcoded string:	      if(value === 'trial_pack' && props?.isPriviledgedUser) {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:540:hardcoded string:	        subjectList = subjectList.filter(subject => subject.label != "Science + Mathematics") // exclude mathematics + Science for TRIAL
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:541:hardcoded string:	        setFormValues((prevState) => ({ ...prevState, subjectList, subject: "", frequencyList: []}))
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:543:hardcoded string:	        setFormValues((prevState) => ({ ...prevState, subjectList, subject: "", frequencyList: getFrequencies}))
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:547:hardcoded string:	        "subjectSlots": "",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:548:hardcoded string:	        "sameTutor": true,
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:549:hardcoded string:	        "notSameTutor": ""
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:553:hardcoded object:	        slotDate: {}, 
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:554:hardcoded object:	        slotTime: {},
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:555:hardcoded array:	        slots: []
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:560:hardcoded string:	    if (name === 'subject') {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:561:hardcoded object:	      const {subjectList} = formValues;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:562:hardcoded variable:	      const filterSubject = subjectList.filter((item) => item.value === value);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:563:hardcoded string:	      setSelectedSubject(filterSubject[0]['label'])
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:564:hardcoded string:	      setFormValues((prevState) => ({ ...prevState, mathematics: null, science: null, proficiency: null, frequency: "" }))
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:567:hardcoded string:	    if(name === "frequency") {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:571:hardcoded string:	        "subjectSlots": "",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:572:hardcoded string:	        "sameTutor": true,
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:573:hardcoded string:	        "notSameTutor": ""
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:579:hardcoded string:	      [name]: typeof params === "object" ? (data ? data : value): value,
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:585:hardcoded variable:	  const updateLoading = (value) => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:588:hardcoded variable:	  const updateError = (value) => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:592:hardcoded variable:	  const updateResetPrice = (value) => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:596:hardcoded variable:	  const updatedSetShowPrice = (value) => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:600:hardcoded variable:	  const handleTeachingMode = async (value, name, params) => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:601:hardcoded object:	    const { data } = params;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:607:hardcoded array:	      [name]: params ? (data ? data : false) : true,
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:613:hardcoded variable:	  const onChangeStartDate = e => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:619:hardcoded variable:	  const handleSlotSelection = (name, value, params) => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:622:hardcoded array:	    setSelectedSlots(prevState => ({ ...prevState, [name]: params }))
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:623:hardcoded array:	    setSlotsFormValues(prevState => ({ ...prevState, [name]: params }))
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:630:hardcoded variable:	  const handleMentorGenderModeChange = async (value, name, params) => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:637:hardcoded object:	      slotDate: {}, 
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:638:hardcoded object:	      slotTime: {}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:642:hardcoded string:	      "tutorAvailable": false,
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:643:hardcoded string:	      "tutorUnAvailable": false,
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:644:hardcoded object:	      slotDate: {}, 
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:645:hardcoded object:	      slotTime: {},
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:646:hardcoded array:	      slots: []
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:648:hardcoded object:	    const { data } = params;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:649:hardcoded string:	    if (name === "gender") {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:651:hardcoded object:	      const { languageListOptions: languages, error } = await getLanguages();
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:656:hardcoded string:	    if (name === "tutorLanguage") {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:661:hardcoded array:	      [name]: params ? (data ? data : false) : true,
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:666:hardcoded variable:	  const handleSlotsChange = async (element) => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:669:hardcoded string:	    const name = get(element, 'target.name', '')
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:670:hardcoded string:	    const value = get(element, 'target.value', '')
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:673:hardcoded object:	      slotDate: {}, 
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:674:hardcoded object:	      slotTime: {}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:676:hardcoded string:	    if(name === 'tutorUnAvailable') {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:679:hardcoded string:	        "tutorAvailable": false,
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:680:hardcoded string:	        "tutorUnAvailable": true,
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:681:hardcoded object:	        slotDate: {}, 
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:682:hardcoded object:	        slotTime: {},
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:683:hardcoded array:	        slots: []
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:685:hardcoded string:	    } else if(name === 'tutorAvailable') {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:688:hardcoded string:	        "tutorUnAvailable": false,
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:689:hardcoded string:	        "tutorAvailable": true,
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:690:hardcoded object:	        slotDate: {}, 
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:691:hardcoded object:	        slotTime: {},
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:692:hardcoded array:	        slots: []
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:701:hardcoded string:	    setQuotationStudent((prevState) => ({...prevState, product: {...product, finalPrice: '', minPrice: '', maxPrice: '', discountedPrice: ''}})) // reset product prices
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:704:hardcoded array:	      [element.target.name]: element.target.value,
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:708:hardcoded variable:	  const handleSlotDateChange = async(value, name, params) => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:713:hardcoded object:	    const {data} = params;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:714:hardcoded string:	    if( name == 'slotDate'){
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:717:hardcoded object:	        slotTime: {},
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:719:hardcoded object:	      const {slots} = slotFormValues;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:720:hardcoded variable:	      let slotTime = slots.map((item)=>{
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:721:hardcoded string:	        const slotTime = get(item, "startTime", "T").split("T");
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:722:hardcoded string:	        let date = get(slotTime, "0", "");
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:723:hardcoded string:	        let time = get(slotTime, "1", "");
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:725:hardcoded string:	          return {label: getIstTime(time.split(".")[0]), value: item.startTime }
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:736:hardcoded array:	      [name]: params ? (data ? data : false) : true,
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:741:hardcoded variable:	  const handleProficiencyBlurEvent = async () => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:745:hardcoded variable:	    let proficiencyFormDetails = proficiencyFormRef.current && (await proficiencyFormRef.current.validateFormAndGetValues());
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:748:hardcoded variable:	      const validatedData = await validateProficiencyValues(selectedSubject, proficiencyFormDetails)
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:753:hardcoded string:	      const { proficiency='', errormsg=''} = await getProficiency({...proficiencyFormDetails, board: get(formValues, 'board.label', '')});
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:755:hardcoded object:	      setFormValues((prevState) => ({ ...prevState, proficiency }))
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:756:hardcoded object:	      setRequestSlots((prevState) => ({ ...prevState, proficiency}))
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:759:hardcoded string:	    setRequestSlots((prevState) => ({ ...prevState, proficiency: "" }))
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:763:hardcoded variable:	  const validateProficiencyValues = async (selectedSubject, proficiencyFormDetails) => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:764:hardcoded array:	    const subjectsArray = [];
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:765:hardcoded string:	    let splitedArray = selectedSubject.split("+");
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:767:hardcoded variable:	      let subject = ele.trim()
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:771:hardcoded variable:	    let validate = subjectsArray.length ? subjectsArray.every(ele => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:772:hardcoded string:	      let marks = parseInt(get(proficiencyFormDetails, `${ele}`, ''));    
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:779:hardcoded variable:	  const handleSameTutor = async (ele) => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:780:hardcoded string:	    const name = get(ele, "target.name");
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:781:hardcoded string:	    const value = get(ele, "target.value");
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:786:hardcoded object:	      slotDate: {}, 
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:787:hardcoded object:	      slotTime: {}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:791:hardcoded string:	      "tutorAvailable": false,
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:792:hardcoded string:	      "tutorUnAvailable": false,
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:793:hardcoded object:	      slotDate: {}, 
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:794:hardcoded object:	      slotTime: {},
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:795:hardcoded array:	      slots: []
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:799:hardcoded string:	      setTutorFormValues((prevState) => ({...prevState, "notSameTutor": true, sameTutor: false}))
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:801:hardcoded string:	      setTutorFormValues((prevState) => ({...prevState, "notSameTutor": false, sameTutor: true, subjectSlots: ""}))
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:806:hardcoded string:	    <LoadingWrapper loading={loading} message={"loading"}>
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:807:hardcoded object:	      <ErrorWrapper error={error} message={error} />
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:808:hardcoded string:	      {isUpgrade && <center><strong style={{color:"red"}}>Note: This is TLP to BHT Upgrade</strong></center>}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:811:hardcoded string:	          className="border-right border-dark"
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:812:hardcoded number:	          xs={6}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:813:hardcoded string:	          style={{ paddingInline: "8rem" }}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:816:hardcoded object:	            ref={teachingFormRef}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:817:hardcoded object:	            initialValues={teachingModeValues}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:818:hardcoded object:	            fields={teachingForm({ handleTeachingMode, ...props, teachingModeValues, selectedSubject })}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:819:hardcoded number:	            cols={1}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:823:hardcoded object:	            ref={productFormRef}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:824:hardcoded object:	            initialValues={formValues}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:825:hardcoded object:	            fields={clusterForm({ handleChange, ...props, formValues })}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:826:hardcoded number:	            cols={1}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:830:hardcoded object:	            ref={productFormRef}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:831:hardcoded object:	            initialValues={formValues}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:832:hardcoded object:	            fields={form({ handleChange, ...props, formValues, isUpgrade })}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:833:hardcoded number:	            cols={1}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:836:hardcoded object:	            ref={subjectFormRef}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:837:hardcoded object:	            initialValues={formValues}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:838:hardcoded object:	            fields={subjectForm({ handleChange, ...props, formValues, selectedSubject })}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:839:hardcoded number:	            cols={1}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:841:hardcoded object:	          {selectedSubject && <SubHeader>Student Proficiency</SubHeader>}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:843:hardcoded object:	            ref={proficiencyFormRef}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:844:hardcoded object:	            initialValues={formValues}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:845:hardcoded object:	            fields={proficiencyForm({ handleChange, ...props, selectedSubject, handleProficiencyBlurEvent })}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:846:hardcoded number:	            cols={2}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:849:hardcoded string:	        <Col xs={6} style={{ paddingInline: "8rem" }}>
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:852:hardcoded object:	            ref={tutorFormRef}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:853:hardcoded object:	            initialValues={tutorFormValues}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:854:hardcoded object:	            fields={tutorForm({ handleMentorGenderModeChange, handleSameTutor, ...props, tutorFormValues, selectedSubject, formValues })}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:855:hardcoded number:	            cols={1}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:859:hardcoded object:	              ref={slotsFormRef}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:860:hardcoded object:	              initialValues={slotsFormValues}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:861:hardcoded object:	              fields={slotsForm({ handleSlotsChange, ...props, slotsFormValues })}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:862:hardcoded number:	              cols={1}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:864:hardcoded string:	          {selectedValidity && selectedValidity === 'trial_pack' && <strong style={{color:"black"}}>Slot Details</strong>}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:865:hardcoded string:	          {selectedValidity && selectedValidity === 'trial_pack' ? (
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:867:hardcoded object:	              ref={trialDateTimeFormRef}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:868:hardcoded object:	              initialValues={slotFormValues}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:869:hardcoded object:	              fields={trialDateTimeForm({ ...props, handleSlotDateChange, slotFormValues, validity: selectedValidity })}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:870:hardcoded number:	              cols={2}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:875:hardcoded object:	                ref={batchDetailsRef}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:876:hardcoded object:	                {...props}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:877:hardcoded object:	                setLoading={updateLoading}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:878:hardcoded object:	                setError={updateError}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:879:hardcoded object:	                setResetPrice={updateResetPrice}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:880:hardcoded object:	                setShowPrice={updatedSetShowPrice}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:881:hardcoded object:	                formDetails={getFormDetailsForBatch()}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:882:hardcoded object:	                handleSlotSelection={handleSlotSelection}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:883:hardcoded object:	                onChangeStartDate={onChangeStartDate}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:884:hardcoded object:	                selectedStartDate={selectedStartDate}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:885:hardcoded object:	                validity={selectedValidity}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:888:hardcoded string:	          {(tutorAvailable || tutorUnAvailable) && selectedValidity && selectedValidity != 'trial_pack' && !isBatchesAvailable && <ErrorWrapper error="No slots available" message="No slots available" />}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:893:hardcoded object:	        ref={FetchPriceRef}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:894:hardcoded object:	        {...props}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:895:hardcoded object:	        resetPrice={resetPrice}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:896:hardcoded object:	        getProductDetails={getProductDetails}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:897:hardcoded object:	        setLoading={updateLoading}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:898:hardcoded object:	        setError={updateError}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:899:hardcoded object:	        showPrice={showPrice}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/shopCart.js:900:hardcoded object:	        setShowPrice={setShowPrice}
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:4:hardcoded variable:	export const getStates = async () => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:5:hardcoded array:	  let stateListOptions = [], errormsg = null;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:8:hardcoded string:	    url: "/api/quotation-beta/getStates",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:9:hardcoded string:	    method: "GET"
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:11:hardcoded object:	    const { data } = response;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:12:hardcoded array:	    const { states = [] } = data;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:15:hardcoded variable:	        let options = {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:23:hardcoded object:	  return { stateListOptions, errormsg };
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:26:hardcoded variable:	export const getCities = async (stateId, stateName) => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:27:hardcoded array:	  let cityListOptions = [], errormsg = null;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:31:hardcoded string:	    method: "POST",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:37:hardcoded object:	    const { data } = response;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:38:hardcoded array:	    const { cities = [] } = data;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:41:hardcoded variable:	        let options = {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:49:hardcoded object:	  return { cityListOptions, errormsg };
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:52:hardcoded variable:	export const getCentres = async (cityId, cityName) => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:53:hardcoded array:	  let centreListOptions = [], errormsg = null;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:57:hardcoded string:	    method: "POST",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:63:hardcoded object:	    const { data } = response;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:64:hardcoded array:	    const { clusters = [] } = data;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:67:hardcoded variable:	        let options = {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:78:hardcoded object:	  return { centreListOptions, errormsg };
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:81:hardcoded object:	export const getBoards = async ({ spId }) => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:82:hardcoded array:	  let boardList = [];
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:83:hardcoded array:	  let boardListOptions = [], stateBoardListOptions = [], errormsg = null;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:86:hardcoded string:	    url: "/api/quotation-beta/getBoards",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:87:hardcoded string:	    method: "POST",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:88:hardcoded object:	    body: { spId: spId },
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:90:hardcoded object:	    const { data } = response;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:91:hardcoded string:	    boardList = get(data, "boards", []);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:95:hardcoded variable:	    let options = {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:96:hardcoded string:	      label: '',
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:99:hardcoded string:	    if (obj.type === 'state') {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:109:hardcoded string:	    boardListOptions.push({ label: "STATE", value: "state" })
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:111:hardcoded object:	  return { boardListOptions, stateBoardListOptions, errormsg };
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:114:hardcoded object:	export const getValidity = async ({ spId }) => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:115:hardcoded array:	  let validityList = [];
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:116:hardcoded array:	  let validityListOptions = [], errormsg = null;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:119:hardcoded string:	    url: "/api/quotation-beta/bht/getValidity",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:120:hardcoded string:	    method: "POST",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:121:hardcoded object:	    body: { spId: spId },
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:123:hardcoded object:	    const { data } = response;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:124:hardcoded string:	    validityList = get(data, "validities", []);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:126:hardcoded variable:	      let options = {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:133:hardcoded object:	  return { validityListOptions, errormsg };
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:136:hardcoded object:	export const getGrades = async ({ spId, boardId, type, existingOrderId }) => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:137:hardcoded array:	  let gradeList = [];
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:138:hardcoded array:	  let gradeListOptions = [], errormsg = null;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:140:hardcoded string:	    url: "/api/quotation-beta/getGrades",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:141:hardcoded string:	    method: "POST",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:142:hardcoded object:	    body: { spId: spId, boardId: boardId, type, existingOrderId },
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:144:hardcoded object:	    const { data } = response;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:145:hardcoded string:	    gradeList = get(data, "grades", []);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:149:hardcoded object:	    let options = { label: upperCase(obj.grade), value: obj.gradeId };
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:152:hardcoded object:	  return { gradeListOptions, errormsg };
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:155:hardcoded variable:	export const getSubjects = async (details) => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:156:hardcoded array:	  let subjectListOptions = [], errormsg = null;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:157:hardcoded string:	  const { validity = "" } = details || {};
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:159:hardcoded string:	    url: "/api/quotation-beta/getSubjects",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:160:hardcoded string:	    method: "GET"
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:162:hardcoded object:	    const { data } = response;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:163:hardcoded object:	    const { subjects } = data;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:165:hardcoded variable:	      let options = {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:171:hardcoded string:	    if (validity && validity === "trial_pack") {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:172:hardcoded number:	      subjectListOptions = subjectListOptions.filter(item => item.value != 3)
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:175:hardcoded object:	  return { subjectListOptions, errormsg };
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:178:hardcoded variable:	export const getLanguages = async () => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:179:hardcoded array:	  let languageListOptions = [], errormsg = null;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:182:hardcoded string:	    url: "/api/quotation-beta/getLanguages",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:183:hardcoded string:	    method: "GET"
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:185:hardcoded object:	    const { data } = response;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:186:hardcoded object:	    const { languages } = data;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:188:hardcoded variable:	      let options = {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:195:hardcoded object:	  return { languageListOptions, errormsg };
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:198:hardcoded string:	export const getProficiency = async ({ board = '', mathematics = '', science = '' }) => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:199:hardcoded string:	  let proficiencyValue = '', errormsg = '';
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:200:hardcoded string:	  if (!mathematics && !science) return { errormsg: 'Mathematics or Science marks is required!' };
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:203:hardcoded string:	    url: "/api/quotation-beta/getProficiency",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:204:hardcoded string:	    method: "POST",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:212:hardcoded object:	    const { data } = response;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:213:hardcoded string:	    proficiencyValue = get(data, 'proficiency', '');
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:215:hardcoded object:	  return { proficiency: proficiencyValue, errormsg };
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:218:hardcoded variable:	export const callSlots = async (details) => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:219:hardcoded string:	  let { board = '', grade = '', validity = '', gender = '', areaUniqueCode = '',
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:220:hardcoded string:	    preferredLanguage = '', subject = '', teachingMode = '', proficiency = '', slotDuration = 30,
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:221:hardcoded string:	    slotPreference = "tutorAvailable" } = details
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:222:hardcoded string:	  let slotDateList = [], errormsg = '';
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:223:hardcoded string:	  //if (!board && !grade && !validity) return { errormsg: 'Maths or Science marks is required!'};
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:226:hardcoded string:	    url: "/api/quotation-beta/getSlotDetails",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:227:hardcoded string:	    method: "POST",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:242:hardcoded object:	    const { data } = response;
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:243:hardcoded string:	    slotDateList = get(data, 'slots', []);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:245:hardcoded object:	  return { slotDateList: slotDateList, errormsg };
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:248:hardcoded variable:	export const getCohorts = async () => {
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:249:hardcoded string:	  let cohorts = [], errorMsg = '';
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:251:hardcoded string:	    url: "/api/quotation-beta/getCohorts",
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:252:hardcoded string:	    method: "GET"
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:254:hardcoded string:	    cohorts = get(response, 'data.cohorts', []);
microservices-middleware/client/src/modules/quotationbeta/product/category/fresh/bht/dataSource.js:256:hardcoded object:	  return { cohorts, errorMsg };
