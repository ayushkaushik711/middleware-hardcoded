microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:2:hardcoded object:import { get, find } from 'lodash';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:3:hardcoded object:import { ELIGIBLE_COMBINATIONS_FOR_TLP_PLUS_BYJUS_CLASSES, ELIGIBLE_COMBINATIONS_FOR_TLP_PLUS_BYJUS_CLASSES_PLUS_TLP, productCombinationType, isAdvanceAdmission } from 'modules/product/utils/productConstant';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:4:hardcoded object:import { productPermissions } from 'utility/screenPermission';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:8:hardcoded string:} from 'modules/product/components/productHelper';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:9:hardcoded object:import { getLabelAndValueField, getInitialFinalGradeLabel } from 'modules/product/utils/ByjusClassesHelper';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:10:hardcoded object:import { getCurrentAcademicYear } from 'lib/validityHelper';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:12:hardcoded string:/**Filter previous order initial class, board and state if board is "STATE" only where the formNumber: 1 (Sibling case)
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:16:hardcoded variable:export const getComboFormFields = (details) => {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:17:hardcoded object:    const { state, props, handleChanges, handleClassBlurEvent } = details;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:18:hardcoded object:    const { board: selectedBoard, productConfig, initialClass: selectedInitialClass, finalClass: selectedFinalClass, byjusClassFinalGrade, classType } = state;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:20:hardcoded string:    let productLearningType = get(state, "productLearningType", "");
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:22:hardcoded object:    const { productType, user, productCombination, tlpOrderData, authDetails } = props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:23:hardcoded variable:    const isPrivilegedUser = checkIsPrivilegedUser(user)
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:24:hardcoded variable:    const isFinalGradeRestriction = checkFinalGradeRestriction(user);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:26:hardcoded array:    const { Boards = [] } = productConfig || {};
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:27:hardcoded object:    const selectedBoardConfig = find(Boards, { formattedName: selectedBoard }) || {};
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:28:hardcoded string:    const classes = getClasses(selectedBoardConfig, user, '', productLearningType);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:29:hardcoded variable:    const classesConfig = selectedBoardConfig.classes;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:31:hardcoded variable:    const byjusClassesMap = getByjusClassesMap(selectedBoardConfig.classes);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:33:hardcoded variable:    const isTlpBocp = ELIGIBLE_COMBINATIONS_FOR_TLP_PLUS_BYJUS_CLASSES.includes(productLearningType)
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:34:hardcoded variable:    const isAdvancePlusTlp = ELIGIBLE_COMBINATIONS_FOR_TLP_PLUS_BYJUS_CLASSES_PLUS_TLP.includes(productLearningType)
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:36:hardcoded string:    if (productCombination === "byjus_tlp") {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:42:hardcoded string:            type: productLearningType && selectedBoard ? 'select' : 'hidden',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:43:hardcoded string:            name: 'initialClass',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:44:hardcoded string:            label: getInitialFinalGradeLabel(productLearningType, "Initial"),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:46:hardcoded string:            options: productLearningType && selectedBoard ? filterInitialClass({ classes, productType: "combo", tlpOrderData, formNumber: 1, productCombination: productLearningType, classType, isPrivilegedUser, authDetails }) : [{}],
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:48:hardcoded string:            message: isTlpBocp ? 'Please Select Byjus Classes - Initial Grade' : "Please Select Initial Grade"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:50:hardcoded string:            type: productLearningType && selectedBoard ? 'select' : 'hidden',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:51:hardcoded string:            name: 'finalClass',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:52:hardcoded string:            label: getInitialFinalGradeLabel(productLearningType, "Final"),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:54:hardcoded array:            options: productLearningType && selectedBoard ? filterFinalClass({ classes, selectedInitialClass, productType, classesConfig, productCombination: productLearningType, isFinalGradeRestriction }) : [{}],
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:56:hardcoded string:            onBlur: () => handleClassBlurEvent("", "", "", byjusClassesMap),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:57:hardcoded string:            message: isTlpBocp ? 'Please Select Byjus Classes - Final Grade' : "Please Select Final Grade"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:59:hardcoded string:            type: (isTlpBocp || isAdvancePlusTlp) ? 'select' : 'hidden',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:60:hardcoded string:            name: getLabelAndValueField(productLearningType)["value"],
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:61:hardcoded string:            label: getLabelAndValueField(productLearningType)["label"],
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:63:hardcoded array:            options: (isTlpBocp || isAdvancePlusTlp) ? filterTLPFinalClass(classes, selectedInitialClass, selectedFinalClass, productLearningType, classesConfig) : [{}],
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:65:hardcoded string:            message: "Please Select TLP Final Grade"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:69:hardcoded variable:export const getSiblingFormFields = (details) => {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:70:hardcoded object:    const { state, props, handleChanges, handleClassBlurEvent, productLearningType, formNumber, serialNumber } = details;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:71:hardcoded object:    const { productConfig, byjusClassFinalGrade, classType } = state;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:73:hardcoded object:    const selectedBoard = get(state, `board-${formNumber}`);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:74:hardcoded object:    const selectedInitialClass = get(state, `initialClass-${formNumber}`);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:75:hardcoded object:    const selectedFinalClass = get(state, `finalClass-${formNumber}`);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:76:hardcoded object:    const selectedTlpFinalGrade = get(state, `tlpFinalGrade-${formNumber}`);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:77:hardcoded object:    const selectedByjusClassFinalGrade = get(state, `byjusClassFinalGrade-${formNumber}`);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:79:hardcoded object:    const { productType, user, productCombination, tlpOrderData, authDetails } = props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:80:hardcoded variable:    const isPrivilegedUser = checkIsPrivilegedUser(user)
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:82:hardcoded array:    const { Boards = [] } = productConfig || {};
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:83:hardcoded object:    const selectedBoardConfig = find(Boards, { formattedName: selectedBoard }) || {};
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:85:hardcoded string:    const classes = getClasses(selectedBoardConfig, user, '', productLearningType);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:86:hardcoded variable:    const classesConfig = selectedBoardConfig.classes;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:88:hardcoded variable:    const byjusClassesMap = getByjusClassesMap(selectedBoardConfig.classes);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:90:hardcoded variable:    const isTlpBocp = ELIGIBLE_COMBINATIONS_FOR_TLP_PLUS_BYJUS_CLASSES.includes(productLearningType);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:91:hardcoded variable:    const isAdvancePlusTlp = ELIGIBLE_COMBINATIONS_FOR_TLP_PLUS_BYJUS_CLASSES_PLUS_TLP.includes(productLearningType)
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:93:hardcoded string:    let classOption = filterInitialClass({ classes, productType: "sibling", tlpOrderData, formNumber: serialNumber, productCombination: productLearningType, classType, isPrivilegedUser, authDetails });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:94:hardcoded variable:    let grade = selectedTlpFinalGrade || selectedByjusClassFinalGrade;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:98:hardcoded string:            type: productLearningType && selectedBoard ? 'select' : 'hidden',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:99:hardcoded string:            name: 'initialClass',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:100:hardcoded string:            label: getInitialFinalGradeLabel(productLearningType, "Initial"),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:104:hardcoded string:            message: isTlpBocp ? "Please Select BYJU's CLASSES - Initial Grade" : "Please Select Initial Grade"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:106:hardcoded string:            type: productLearningType && selectedBoard ? 'select' : 'hidden',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:107:hardcoded string:            name: 'finalClass',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:108:hardcoded string:            label: getInitialFinalGradeLabel(productLearningType, "Final"),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:110:hardcoded array:            options: productLearningType && selectedBoard ? filterFinalClass({ classes, selectedInitialClass, productType, classesConfig, productCombination: productLearningType }) : [{}],
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:112:hardcoded string:            onBlur: () => handleClassBlurEvent("", "", "", formNumber, byjusClassesMap),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:113:hardcoded string:            message: isTlpBocp ? "Please Select BYJU's CLASSES - Final Grade" : "Please Select Final Grade"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:115:hardcoded string:            type: (isTlpBocp || isAdvancePlusTlp) ? 'select' : 'hidden',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:116:hardcoded string:            name: getLabelAndValueField(productLearningType)["value"],
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:117:hardcoded string:            label: getLabelAndValueField(productLearningType)["label"],
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:119:hardcoded array:            options: (isTlpBocp || isAdvancePlusTlp) ? filterTLPFinalClass(classes, selectedInitialClass, selectedFinalClass, productLearningType, classesConfig) : [{}],
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:121:hardcoded string:            onBlur: () => handleClassBlurEvent("", "", "", formNumber, byjusClassesMap),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:122:hardcoded string:            message: "Please Select TLP Final Grade"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:126:hardcoded object:export const getProductLearningType = ({ productType, isPrivilegedUser, authDetails = {} }) => {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:127:hardcoded string:    const env = get(authDetails, "env")
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:129:hardcoded variable:    const availableProductLearningType = [
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:130:hardcoded string:        { label: "BYJU's CLASSES", value: "byjus_classes" },
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:131:hardcoded string:        { label: 'Byjus-Classes + Byjus TLP', value: "byjus_classes_plus_byjus_tlp" },
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:132:hardcoded string:        // { label: "BTLP+BYJU's CLASSES(Advance Admission)", value: "byjus_tlp_plus_byjus_classes" }
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:133:hardcoded string:        // { label: "Advance Admission + TLP", value: "advance_admission_plus_byjus_classes" }
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:135:hardcoded string:    if (productType === "sibling") {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:136:hardcoded string:        availableProductLearningType.push({ label: "BYJU's-TLP", value: "byjus_tlp" })
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:142:hardcoded variable:export const filterInitialClass = (productDetail) => {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:143:hardcoded object:    let { classes, tlpOrderData, formNumber, productType, productCombination, classType, isPrivilegedUser, authDetails } = productDetail;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:144:hardcoded variable:    let filteredClass = classes;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:145:hardcoded string:    const grade = tlpOrderData && get(tlpOrderData, "customerDetails", [])[0].productInfo[0].initialClass;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:146:hardcoded number:    const gradeNext = parseInt(grade) + 1
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:148:hardcoded number:    if (parseInt(formNumber, 10) === 1) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:149:hardcoded string:        filteredClass = filteredClass.filter(ele => get(ele, "value", "") === grade.toString() || get(ele, "value", "") === gradeNext.toString());
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:151:hardcoded string:        if (productType == "combo") {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:152:hardcoded string:            const nonEligibleGrade = !ELIGIBLE_COMBINATIONS_FOR_TLP_PLUS_BYJUS_CLASSES.includes(productCombination) ? ["12", "11+12"] : ["11+12"]
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:154:hardcoded string:                return (nonEligibleGrade.indexOf(get(classObj, 'value', '')) < 0);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:159:hardcoded string:                const classValue = get(classObj, 'value', '');
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:160:hardcoded string:                return (["11+12"].indexOf(classValue) < 0);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:164:hardcoded string:        if (productType === "streaming") {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:165:hardcoded string:            let nonEligibleClass = ["1", "2", "3", "11+12"]
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:167:hardcoded string:                nonEligibleClass = ["1", "2", "3", "11+12", "11", "12"]
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:170:hardcoded string:                return (nonEligibleClass.indexOf(get(classObj, 'value', '')) < 0);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:174:hardcoded string:        if (productCombination != "byjus_tlp" && !isAdvanceAdmission.includes(productCombination)) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:175:hardcoded number:            //(!isPrivilegedUser && ((!PreK3EligibleManagers.includes(directSalesByTeamManager))))) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:176:hardcoded string:            filteredClass = filteredClass.filter(initialClass => !["-1", "0", "12+"].includes(initialClass.value))
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:179:hardcoded number:        /**Show 12 Crash in case of Byjus Class, Privileged and Single product type */
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:180:hardcoded string:        if (productCombination != "byjus_classes" || (!["streaming", "single"].includes(productType) && !isAdvanceAdmission.includes(productCombination))) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:181:hardcoded string:            if (productType === "streaming" && productCombination === "byjus_classes") {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:182:hardcoded string:                filteredClass = filteredClass.filter(initialClass => !["12+"].includes(initialClass.value))
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:184:hardcoded string:                filteredClass = filteredClass.filter(initialClass => !["14", "13", "12+"].includes(initialClass.value))
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:189:hardcoded string:        //     const classValue = get(classObj, 'value', '');
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:190:hardcoded string:        //     return (["11+12"].indexOf(classValue) < 0);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:192:hardcoded string:        // if (productCombination == "byjus_tlp" ) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:193:hardcoded string:        //    filteredClass = filteredClass.filter(initialClass => !["14", "13", "12+"].includes(initialClass.value))
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:196:hardcoded string:        // if (productCombination == "byjus_classes" ) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:197:hardcoded string:        //     filteredClass = filteredClass.filter(initialClass => !['-1','0','1', '2', '3',"14", "13", "12+"].includes(initialClass.value))
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:200:hardcoded string:        if (isPrivilegedUser && classType == "neo" && ["byjus_classes", "byjus_classes_plus_byjus_tlp"].includes(productCombination)) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:201:hardcoded string:            filteredClass = filteredClass.filter(initialClass => !["11", 11, "11+12", "12", 12, "12+", "13", "13+", "14"].includes(initialClass.value))
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:208:hardcoded variable:export const filterBoards = (productDetail) => {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:209:hardcoded object:    let { boards, tlpOrderData, formNumber } = productDetail
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:210:hardcoded number:    if (parseInt(formNumber, 10) === 1) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:211:hardcoded string:        let board = get(tlpOrderData, "customerDetails", [])[0].productInfo[0].board;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:212:hardcoded string:        boards = boards.filter(ele => get(ele, "value", "") === board);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:217:hardcoded variable:export const filterStateBoards = (productDetail) => {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:218:hardcoded array:    let { state = [], tlpOrderData, formNumber } = productDetail;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:219:hardcoded number:    if (parseInt(formNumber, 10) === 1) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:220:hardcoded string:        let selectedState = get(tlpOrderData, "customerDetails", [])[0].productInfo[0].state;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:221:hardcoded string:        state = state.filter(ele => get(ele, "value", "") === selectedState);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:226:hardcoded variable:export const getFormattedValidity = (productDetails) => {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:227:hardcoded string:    let { validity, user, initialClass, productCombination, authDetails = {}, orderPunchingType = "", finalClass = "" } = productDetails;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:228:hardcoded array:    let formattedValidity = [];
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:229:hardcoded string:    const permissions = get(user, "permissions", []);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:230:hardcoded number:    const isPriviledgedUser = permissions.indexOf(productPermissions.ignoreValidityCheck) >= 0;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:231:hardcoded string:    const orderPunchedByRole = get(authDetails.user, 'role', "");
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:232:hardcoded string:    const allowedCurrentYearValidity = (initialClass == finalClass) || finalClass == '' ? true : false;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:239:hardcoded object:            let { label, value } = entry;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:240:hardcoded variable:            let currentYear = getCurrentAcademicYear();
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:241:hardcoded number:            let updatedYear = currentYear + 2;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:242:hardcoded string:            label = label.includes('x') ? eval(label.replace('x', updatedYear)) : label;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:243:hardcoded string:            value = value.includes('x') ? eval(value.replace('x', updatedYear)) : value;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:259:hardcoded string:    if (productCombination && productCombination.indexOf("byjus_classes") >= 0 && initialClass) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:260:hardcoded object:        formattedValidity = byjusClassesValidity({ isPriviledgedUser, productCombination, initialClass, orderPunchedByRole });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:264:hardcoded string:    formattedValidity = formattedValidity.filter(validity => validity.value != "TRIAL_PACK");
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:268:hardcoded variable:const byjusClassesValidity = (details) => {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:269:hardcoded string:    let { isPriviledgedUser, productCombination, initialClass, orderPunchedByRole = "" } = details;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:270:hardcoded variable:    let currentAcademicYr = getCurrentAcademicYear();
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:272:hardcoded array:    let formattedValidity = []
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:274:hardcoded string:    if (["jumpstart_admission", "byjus_tlp_plus_byjus_classes", "advance_admission_plus_byjus_classes"].includes(productCombination) || parseInt(initialClass, 10) >= 11) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:284:hardcoded number:            label: currentAcademicYr + 1,
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:285:hardcoded number:            value: currentAcademicYr + 1
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:292:hardcoded variable:const getPriviledUserValidity = (allowedCurrentYearValidity) => {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:294:hardcoded variable:    let currentYear = getCurrentAcademicYear();
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:295:hardcoded number:    let updatedYear = allowedCurrentYearValidity ? currentYear + 2 : currentYear + 1;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:296:hardcoded number:    const validityUpto = updatedYear + 10; // Validity upto 2030 for priviled user
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:297:hardcoded array:    const validity = []
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:309:hardcoded object:export const validateProfileSelection = (productDetails = {}) => {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:310:hardcoded variable:    let result = true
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:311:hardcoded string:    const { userProfile = "", productType = "" } = productDetails;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper.js:312:hardcoded object:    if (!userProfile) { result = false };
