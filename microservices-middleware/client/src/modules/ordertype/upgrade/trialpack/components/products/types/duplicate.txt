microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:1:hardcoded object:import React, { Component } from 'react';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:2:hardcoded object:import { connect } from 'react-redux';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:3:hardcoded object:import { get, find, isEqual, size, isEmpty } from 'lodash';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:5:hardcoded object:import { saveProductDetails, addLoader, removeLoader, resetPrice, saveCashbackDetails } from 'modules/product/productReducer';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:8:hardcoded number:    isK12Class, isK3orPreKClass, getK3orPreKTablets, getTablets,
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:10:hardcoded string:} from 'modules/product/components/productHelper';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:11:hardcoded object:import { getComboFormFields, getProductLearningType, filterBoards, filterStateBoards, getFormattedValidity, validateProfileSelection } from '../UpgradeProductHelper';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:12:hardcoded file path:import CallApi from 'api/callApi';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:13:hardcoded file path:import ClassTypeForm from 'modules/product/components/ClassTypeForm'
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:14:hardcoded file path:import ProductDetailsForm from 'modules/product/components/ProducDetailsForm';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:15:hardcoded file path:import FetchPrices from 'modules/product/components/FetchPrices';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:16:hardcoded file path:import ErrorWrapper from 'components/ErrorWrapper';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:17:hardcoded object:import { validateByjusClassesMentoringDetails } from 'modules/product/components/mentoring/MentoringHelper';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:18:hardcoded file path:import ByjusMentoringClasses from 'modules/product/components/mentoring/ByjusMentoringClasses';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:23:hardcoded string:} from 'modules/product/utils/productConstant';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:24:hardcoded object:import { isProficiencyAndFotAvailable, getBatchesEligibility } from 'modules/product/utils/ByjusClassesHelper';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:25:hardcoded file path:import Proficiency from 'modules/student/Proficiency';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:26:hardcoded file path:import School from 'modules/student/School'
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:28:hardcoded variable:const mapStateToProps = state => ({
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:29:hardcoded string:    authDetails: get(state, 'auth.details'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:30:hardcoded string:    identifier: get(state, 'details.identifier'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:31:hardcoded string:    existingProfiles: get(state, 'product.existingProfiles'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:32:hardcoded string:    showProfileSelectionOption: get(state, 'product.showProfileSelectionOption'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:33:hardcoded string:    productDetails: get(state, 'product.details'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:34:hardcoded string:    productDetails: get(state, 'product.details'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:35:hardcoded string:    productConfig: get(state, 'product.config'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:36:hardcoded string:    loading: get(state, 'product.loading'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:37:hardcoded string:    error: get(state, 'product.error'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:38:hardcoded string:    orderPunchingType: get(state, 'auth.orderPunchingType'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:39:hardcoded string:    tlpOrderData: get(state, 'auth.tlpOrderData')
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:42:hardcoded variable:const mapDispatchToProps = dispatch => ({
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:66:hardcoded object:            productConfig: {},
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:67:hardcoded array:            fields: [],
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:70:hardcoded string:            classType: "neo"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:74:hardcoded object:        let { env, productDetails, studentMarksDetails, byjusClassesFormValue, schoolAndProficiencyDetails } = details
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:76:hardcoded string:        if (env == 'production') {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:78:hardcoded string:            if (!size(get(studentMarksDetails, "formValue", {}))) return productDetails
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:81:hardcoded string:                ...get(studentMarksDetails, "formValue", {}),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:82:hardcoded string:                languageOfInstruction: get(byjusClassesFormValue, "formValue.languageOfInstruction", null),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:83:hardcoded string:                languageOfInstructionId: get(byjusClassesFormValue, "formValue.languageOfInstructionId", null)
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:90:hardcoded string:                electiveDetails: get(byjusClassesFormValue, "formValue.electivesDetails", null),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:91:hardcoded string:                languageOfInstruction: get(byjusClassesFormValue, "formValue.languageOfInstruction", null),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:92:hardcoded string:                languageOfInstructionId: get(byjusClassesFormValue, "formValue.languageOfInstructionId", null)
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:99:hardcoded object:        const { initialClass, classType } = this.state;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:100:hardcoded array:        const { productCombination, identifier, orderPunchingType, tlpOrderData = {}, existingProfiles = [], authDetails } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:101:hardcoded object:        const { env } = authDetails
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:102:hardcoded object:        const { productDetailsForm, byjusClassesDetailsForm, proficiencyForm, schoolForm } = this.refs;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:103:hardcoded array:        let bhlpCourseDetails = [], byjusClassesMentoringDetails = [];
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:105:hardcoded variable:        const details = await productDetailsForm.getProductDetails();
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:106:hardcoded variable:        const byjusClassesFormValue = byjusClassesDetailsForm && await byjusClassesDetailsForm.getMentoringValues();
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:107:hardcoded variable:        const studentMarksDetails = proficiencyForm && await proficiencyForm.getStudentMarks();
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:108:hardcoded variable:        const schoolAndProficiencyDetails = schoolForm && await schoolForm.getSchoolDetails()
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:110:hardcoded string:        let productDetails = get(details, 'productDetails');
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:112:hardcoded string:        if (ELIGIBLE_COMBINATIONS_FOR_BATCH.includes(productCombination) && !["1", "2", "3", "12"].includes(initialClass)) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:115:hardcoded variable:            const response = validateByjusClassesMentoringDetails(byjusClassesFormValue, productDetails);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:116:hardcoded string:            byjusClassesMentoringDetails = get(response, "byjusClassesMentoringDetails", []);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:117:hardcoded string:            bhlpCourseDetails = get(response, "bhlpCourseDetails", []);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:123:hardcoded number:        if (existingProfiles.length > 0 && productDetails) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:124:hardcoded variable:            const isValidate = validateProfileSelection(productDetails);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:128:hardcoded string:        if (classType == "neo" && productCombination == "byjus_classes") {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:129:hardcoded object:            productDetails = this.getUpdatedProductDetails({ env, productDetails, studentMarksDetails, byjusClassesFormValue, schoolAndProficiencyDetails })
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:133:hardcoded variable:            const payload = {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:135:hardcoded string:                productType: 'combo',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:137:hardcoded string:                couponDetails: get(details, 'couponDetails'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:145:hardcoded string:            if (classType == "neo") {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:160:hardcoded object:        const { productCombination } = productDetails
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:161:hardcoded object:        const { identifier, tlpOrderData } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:162:hardcoded object:        const { productLearningType } = this.state;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:163:hardcoded variable:        const payload = {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:171:hardcoded string:                payload["productDetails"] = formatByjusClassesFormValues(productDetails);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:176:hardcoded string:                url: '/api/trialUpgrade/storeProductDetails',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:177:hardcoded string:                method: 'POST',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:180:hardcoded string:                const { productDetails, cashbackDetails } = get(response, 'data', {});
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:184:hardcoded object:                this.setState({ error: null });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:186:hardcoded string:                this.navigateToScreen('address');
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:188:hardcoded object:                this.setState({ error }, () => {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:197:hardcoded object:        const { history } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:198:hardcoded string:        const url = `/${path}${get(history, 'location.search')}`;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:207:hardcoded object:        const { fetchComp } = this.refs;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:210:hardcoded object:            const { status, productDetails } = fetchComp.getProductsAndFinalPrice();
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:212:hardcoded string:                if (status && productDetails && (get(productDetails, 'finalPrice') >= 0)) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:216:hardcoded string:                    this.setState({ error: 'Product Details Missing' });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:219:hardcoded string:                const errMsg = get(error, 'message', 'Error') || error;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:220:hardcoded object:                this.setState({ error: errMsg });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:227:hardcoded array:        let { existingProfiles = [] } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:228:hardcoded string:        existingProfiles = existingProfiles.filter(profile => profile.value != 'newProfile');
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:233:hardcoded object:        const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:234:hardcoded variable:        const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:235:hardcoded variable:        const productLearningType = value;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:236:hardcoded string:        this.handleChanges(getCourseTypeOption("combo", productLearningType), 'courseType');
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:237:hardcoded object:        this.setState({ productLearningType, isByjusClass: false });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:242:hardcoded string:                initialClass: "", finalClass: "", subCourse: "",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:243:hardcoded string:                byjusClassFinalGrade: "", validity: "", tlpFinalGrade: "", courseType: ""
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:252:hardcoded object:        const { showProfileSelectionOption, existingProfiles, tlpOrderData = {}, authDetails = {} } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:254:hardcoded string:        !selectedCourse && this.handleChanges('K10/K12', 'course');
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:256:hardcoded object:        const { productType, user, productCombination } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:257:hardcoded array:        const { Products = [], Courses = [], Boards = [], Tablets = [] } = productConfig || {};
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:259:hardcoded object:        const productConfiguration = find(Products, { formattedName: productType }) || {};
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:260:hardcoded object:        const { validity, tablets } = productConfiguration || {};
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:261:hardcoded object:        const selectedCourseConfig = find(Courses, { formattedName: selectedCourse }) || {};
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:262:hardcoded object:        const selectedBoardConfig = find(Boards, { formattedName: selectedBoard }) || {};
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:264:hardcoded variable:        const byjusClassesMap = getByjusClassesMap(selectedBoardConfig.classes);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:266:hardcoded object:        const subCourses = getSubCourses({ selectedBoardConfig, selectedFinalClass, tlpFinalGrade, byjusClassFinalGrade, productLearningType });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:267:hardcoded variable:        const subCourseOptions = subCourses && fetchSubCourseOptions(productCombination, subCourses)
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:269:hardcoded variable:        const isPrivilegedUser = checkIsPrivilegedUser(user);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:270:hardcoded object:        const { env } = authDetails;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:272:hardcoded variable:        let fields = [{
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:273:hardcoded string:            type: 'hidden',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:274:hardcoded string:            name: 'course',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:275:hardcoded string:            label: 'Select Course',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:276:hardcoded string:            options: get(productConfiguration, 'courses'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:277:hardcoded string:            value: 'K10/K12',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:278:hardcoded string:            message: "Please select Course"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:280:hardcoded string:            type: productCombination === "byjus_classes" ? 'select' : "hidden",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:281:hardcoded string:            name: 'productLearningType',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:282:hardcoded string:            label: 'Choose Product Learning Type',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:283:hardcoded string:            message: "Please Product Learning Type",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:284:hardcoded string:            options: getProductLearningType({ productType: "combo", isPrivilegedUser, authDetails }),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:286:hardcoded string:            required: productCombination === "byjus_classes" ? true : false
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:288:hardcoded string:            type: 'select',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:289:hardcoded string:            name: 'board',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:290:hardcoded string:            label: 'Select Board',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:292:hardcoded string:            options: filterBoards({ boards: get(selectedCourseConfig, 'boards'), tlpOrderData, formNumber: 1 }),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:294:hardcoded string:            message: "Please select Board"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:296:hardcoded string:            type: selectedBoard === "STATE" ? 'select' : 'hidden',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:297:hardcoded string:            name: 'state',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:298:hardcoded string:            label: 'Select State',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:299:hardcoded string:            required: selectedBoard === "STATE",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:300:hardcoded string:            options: filterStateBoards({ state: get(selectedBoardConfig, 'states'), tlpOrderData, formNumber: 1 }),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:302:hardcoded string:            message: "Please select State"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:304:hardcoded object:        ...getComboFormFields({ state: this.state, props: this.props, handleChanges: this.handleChanges, handleClassBlurEvent: this.handleClassBlurEvent }),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:306:hardcoded string:            type: isK12Class(selectedFinalClass, tlpFinalGrade, byjusClassFinalGrade) ? 'select' : 'hidden',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:307:hardcoded string:            name: 'subCourse',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:308:hardcoded string:            label: 'Select Sub Course',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:309:hardcoded number:            required: isK12Class(selectedFinalClass, tlpFinalGrade, byjusClassFinalGrade),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:312:hardcoded string:            onBlur: () => this.handleClassBlurEvent("", "", "", byjusClassesMap),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:313:hardcoded string:            message: "Please select Sub Course"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:315:hardcoded string:            type: 'select',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:316:hardcoded object:            options: selectedInitialClass && getFormattedValidity({ validity, user, initialClass: selectedInitialClass, productCombination: productLearningType, authDetails, finalClass: selectedFinalClass }),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:317:hardcoded string:            name: 'validity',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:318:hardcoded string:            label: 'Select Initial Validity',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:321:hardcoded string:            onBlur: () => this.handleClassBlurEvent("", "", "", byjusClassesMap),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:322:hardcoded string:            message: "Please Select Initial Validity"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:324:hardcoded string:            type: 'select',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:325:hardcoded number:            options: isK3orPreKClass(selectedInitialClass) ? getK3orPreKTablets({ Tablets, user, selectedClass: selectedInitialClass }) : getTablets({ tablets, user, selectedClass: selectedInitialClass, selectedSubCourse }),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:326:hardcoded string:            name: 'tablet',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:327:hardcoded string:            label: 'Select Tablet',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:329:hardcoded string:            message: "Please select Tablet",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:330:hardcoded number:            required: isK3orPreKClass(selectedInitialClass) && !isPrivilegedUser ? true : false
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:332:hardcoded string:            type: (showProfileSelectionOption && existingProfiles.length > 0 ? 'radio' : 'hidden'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:334:hardcoded string:            name: 'userProfile',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:335:hardcoded string:            helpText: "Please make sure the premium account chosen has the classes for which BHLP is required.",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:336:hardcoded string:            label: 'Choose Profile Type',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:338:hardcoded string:            message: "Please Choose Profile Type",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:339:hardcoded number:            required: (showProfileSelectionOption && existingProfiles.length > 0 ? true : false),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:341:hardcoded string:                display: 'block',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:342:hardcoded string:                height: '30px',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:343:hardcoded string:                lineHeight: '30px',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:351:hardcoded object:        const { productDetailsForm, schoolForm } = this.refs;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:352:hardcoded variable:        const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:354:hardcoded string:        if (name == "initialClass") {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:355:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ finalClass: "", subCourse: "", tablet: "", validity: "", tlpFinalGrade: "", byjusClassFinalGrade: "" ,
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:356:hardcoded string:            mathPercent: "", sciencePercent: "", languageOfInstruction: ""});
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:359:hardcoded string:                subCourse: "",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:364:hardcoded string:        if (name == "finalClass") {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:365:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ tlpFinalGrade: "", byjusClassFinalGrade: "", subCourse: "" })
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:367:hardcoded string:                subCourse: "",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:373:hardcoded string:        if (name === "board" || name === "state") {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:374:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ initialClass: "", mathPercent: "", sciencePercent: "", languageOfInstruction: "" });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:378:hardcoded string:        if (name === "courseType") {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:379:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ initialClass: "", subCourse: "", tablet: "", validity: "", board: "" });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:383:hardcoded array:            [name]: value,
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:389:hardcoded object:        const { initialClass: selectedInitialClass, productLearningType, finalClass } = this.state;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:391:hardcoded number:        let initialGrade = isAdvanceAdmission.includes(productLearningType) || ELIGIBLE_COMBINATIONS_FOR_TLP_PLUS_BYJUS_CLASSES_PLUS_TLP.includes(productLearningType) ? (parseInt(selectedInitialClass, 10) + 1).toString() : selectedInitialClass;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:393:hardcoded object:        this.setState({ isOneToManyClass: false, isByjusClass: false })
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:394:hardcoded array:        const isByjusClassesApplicable = byjusClassesMap[initialGrade] || false;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:402:hardcoded string:        this.setState({ classType: value ? "neo" : "oneToMega", isByjusClass: false });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:404:hardcoded object:        const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:405:hardcoded variable:        const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:407:hardcoded string:            productLearningType: "", initialClass: "", finalClass: "",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:408:hardcoded string:            byjusClassFinalGrade: "", validity: "", tlpFinalGrade: "", courseType: "", tablet: "",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:409:hardcoded string:            mathPercent: "", sciencePercent: "", languageOfInstruction: "", flowOfTopic: value ? "default" : ""
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:415:hardcoded object:        this.setState({ error });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:421:hardcoded object:            this.setState({ productConfig: nextProps.productConfig }, async () => {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:429:hardcoded object:        const { productDetails, productConfig, productType } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:431:hardcoded string:        if (productType === get(productDetails, 'productType')) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:432:hardcoded string:            const formValues = get(productDetails, 'students[0].formValues');
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:436:hardcoded string:                course: get(formValues, 'course'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:437:hardcoded string:                board: get(formValues, 'board'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:438:hardcoded string:                initialClass: get(formValues, 'initialClass'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:439:hardcoded string:                finalClass: get(formValues, 'finalClass'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:440:hardcoded string:                subCourse: get(formValues, 'subCourse')
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:446:hardcoded string:        this.setState({ productConfig, course: 'K10/K12' });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:452:hardcoded object:        const { user, authDetails, productCombination } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:453:hardcoded object:        const { env } = authDetails
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:455:hardcoded string:        if (env == 'production' || classType != "neo") {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:456:hardcoded string:            return isByjusClass && courseType && validity && (ELIGIBLE_COMBINATIONS_FOR_BATCH.includes(productCombination) || productLearningType == "BYJUS_AKASH_CLASSES")
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:457:hardcoded string:        } else if (courseType && (ELIGIBLE_COMBINATIONS_FOR_BATCH.includes(productCombination) || productLearningType == "BYJUS_AKASH_CLASSES")) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:458:hardcoded string:            const isEligible = getBatchesEligibility(this.state, "")
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:464:hardcoded object:        const { error, productConfig, productDetails, isByjusClass, initialClass, state, board, validity, subCourse, productLearningType, courseType, classType, proficiency, trackId } = this.state;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:465:hardcoded object:        const { changeNextBtnMode, productType, productCombination, user, identifier, authDetails } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:466:hardcoded array:        const fields = productConfig ? this.getFields() : [];
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:467:hardcoded variable:        const isPrivilegedUser = checkIsPrivilegedUser(user);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:468:hardcoded object:        const isProficiencyAndFot = isProficiencyAndFotAvailable({ state: this.state, props: this.props});
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:469:hardcoded object:        const { env } = authDetails
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:470:hardcoded variable:        const isBatchesEligible = this.checkBatchesEligibility()
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:472:hardcoded string:        let grade = "";
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:474:hardcoded string:            if (get(this.state, "initialClass", "") < 10) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:475:hardcoded string:                grade = (parseInt(get(this.state, "initialClass", ""), 10) + 1).toString()
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:477:hardcoded string:                grade = get(this.state, "byjusClassFinalGrade", "")
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:481:hardcoded string:            grade = (parseInt(get(this.state, "initialClass", ""), 10) + 1).toString();
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:484:hardcoded string:            grade = get(this.state, "initialClass", "")
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:489:hardcoded object:                <ErrorWrapper error={error} />
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:490:hardcoded string:                {isPrivilegedUser && productCombination === "byjus_classes" && <ClassTypeForm
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:491:hardcoded string:                    ref="classTypeForm"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:492:hardcoded object:                    classType={classType}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:493:hardcoded object:                    changeClassType={this.changeClassType}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:496:hardcoded string:                    ref="productDetailsForm"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:497:hardcoded object:                    productType={productType}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:498:hardcoded object:                    productLearningType={productLearningType}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:499:hardcoded object:                    fields={fields}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:500:hardcoded string:                    initialValues={{...getProductFormInitialValue(productDetails),flowOfTopic:"default"}}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:501:hardcoded object:                    isByjusClassesAllowed={ELIGIBLE_COMBINATIONS_FOR_BATCH.includes(productCombination) ? true : false} // Byjus Classes
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:503:hardcoded string:                {isProficiencyAndFot ? env == 'production' ?
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:505:hardcoded string:                        ref="proficiencyForm"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:510:hardcoded string:                        ref="schoolForm"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:511:hardcoded object:                        board={board}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:512:hardcoded object:                        state={state}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:513:hardcoded object:                        props={this.props}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:514:hardcoded object:                        grade={initialClass}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:515:hardcoded object:                        handleParentChanges={this.handleChanges}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:516:hardcoded object:                        handleClassBlurEvent={this.handleClassBlurEvent}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:521:hardcoded number:                {/* Byjus classes For 4 to 12 grades*/}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:524:hardcoded string:                        ref="byjusClassesDetailsForm"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:525:hardcoded object:                        identifier={identifier}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:526:hardcoded object:                        initialClass={grade}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:527:hardcoded object:                        board={board}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:528:hardcoded object:                        state={state}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:529:hardcoded object:                        productType={productType}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:530:hardcoded object:                        validity={validity}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:531:hardcoded object:                        subCourse={subCourse}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:532:hardcoded string:                        productCombination="byjus_classes"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:533:hardcoded object:                        classType={classType}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:534:hardcoded object:                        productLearningType={productLearningType}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:535:hardcoded object:                        courseType={courseType}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:536:hardcoded object:                        proficiency={proficiency}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:537:hardcoded object:                        trackId={trackId} />
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:541:hardcoded string:                    ref='fetchComp'
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:542:hardcoded object:                    onClickFetchPrices={this.onClickFetchPrices}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:543:hardcoded object:                    getProductDetails={this.getProductDetails}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:544:hardcoded object:                    changeNextBtnMode={changeNextBtnMode}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:545:hardcoded object:                    productType={productType}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:546:hardcoded object:                    setError={this.setError}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:547:hardcoded object:                    productCombination={productCombination}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeComboProduct.js:555:hardcoded object:export default connect(mapStateToProps, mapDispatchToProps, null, { forwardRef: true })(UpgradeComboProduct);microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:1:hardcoded object:import React, { Component } from 'react';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:2:hardcoded object:import { connect } from 'react-redux';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:3:hardcoded object:import { get, find, cloneDeep, isEqual, size, isEmpty } from 'lodash';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:4:hardcoded file path:import CallApi from 'api/callApi';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:6:hardcoded file path:import ErrorWrapper from 'components/ErrorWrapper';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:8:hardcoded object:import { saveProductDetails, addLoader, removeLoader, resetPrice, saveCashbackDetails } from 'modules/product/productReducer';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:10:hardcoded number:    getProductFormInitialValue, isK12Class, getClasses, isK3orPreKClass, getK3orPreKTablets, initialGradeOptionForNeo,
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:12:hardcoded string:} from 'modules/product/components/productHelper';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:13:hardcoded object:import { filterInitialClass, filterBoards, filterStateBoards, getFormattedValidity, validateProfileSelection } from '../UpgradeProductHelper';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:14:hardcoded file path:import ClassTypeForm from 'modules/product/components/ClassTypeForm'
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:15:hardcoded file path:import ProductDetailsForm from 'modules/product/components/ProducDetailsForm';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:16:hardcoded file path:import FetchPrices from 'modules/product/components/FetchPrices';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:17:hardcoded file path:import ByjusMentoringClasses from 'modules/product/components/mentoring/ByjusMentoringClasses';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:18:hardcoded object:import { validateByjusClassesMentoringDetails } from 'modules/product/components/mentoring/MentoringHelper';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:19:hardcoded object:import { isProficiencyAndFotAvailable, getBatchesEligibility } from 'modules/product/utils/ByjusClassesHelper';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:20:hardcoded file path:import Proficiency from 'modules/student/Proficiency';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:21:hardcoded file path:import School from 'modules/student/School'
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:23:hardcoded variable:const mapStateToProps = state => ({
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:24:hardcoded string:    authDetails: get(state, 'auth.details'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:25:hardcoded string:    identifier: get(state, 'details.identifier'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:26:hardcoded string:    existingProfiles: get(state, 'product.existingProfiles'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:27:hardcoded string:    showProfileSelectionOption: get(state, 'product.showProfileSelectionOption'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:28:hardcoded string:    productDetails: get(state, 'product.details'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:29:hardcoded string:    productConfig: get(state, 'product.config'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:30:hardcoded string:    loading: get(state, 'product.loading'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:31:hardcoded string:    error: get(state, 'product.error'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:32:hardcoded string:    orderPunchingType: get(state, 'auth.orderPunchingType'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:33:hardcoded string:    tlpOrderData: get(state, 'auth.tlpOrderData')
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:36:hardcoded variable:const mapDispatchToProps = dispatch => ({
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:64:hardcoded object:            productConfig: {},
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:65:hardcoded array:            fields: [],
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:68:hardcoded string:            classType: "neo"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:72:hardcoded object:        let { env, productDetails, studentMarksDetails, byjusClassesFormValue, schoolAndProficiencyDetails } = details
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:74:hardcoded string:        if (env == 'production') {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:76:hardcoded string:            if (!size(get(studentMarksDetails, "formValue", {}))) return productDetails
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:79:hardcoded string:                ...get(studentMarksDetails, "formValue", {}),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:80:hardcoded string:                languageOfInstruction: get(byjusClassesFormValue, "formValue.languageOfInstruction", null),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:81:hardcoded string:                languageOfInstructionId: get(byjusClassesFormValue, "formValue.languageOfInstructionId", null)
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:88:hardcoded string:                electiveDetails: get(byjusClassesFormValue, "formValue.electivesDetails", null),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:89:hardcoded string:                languageOfInstruction: get(byjusClassesFormValue, "formValue.languageOfInstruction", null),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:90:hardcoded string:                languageOfInstructionId: get(byjusClassesFormValue, "formValue.languageOfInstructionId", null)
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:97:hardcoded object:        const { initialClass, course, classType } = this.state;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:98:hardcoded array:        const { productCombination, identifier, orderPunchingType, tlpOrderData = {}, existingProfiles = [], authDetails } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:99:hardcoded object:        const { env } = authDetails || {}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:100:hardcoded object:        const { productDetailsForm, byjusClassesDetailsForm, proficiencyForm, schoolForm } = this.refs;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:101:hardcoded array:        let bhlpCourseDetails = [], byjusClassesMentoringDetails = [];
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:103:hardcoded variable:        const details = await productDetailsForm.getProductDetails();
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:104:hardcoded variable:        const byjusClassesFormValue = byjusClassesDetailsForm && await byjusClassesDetailsForm.getMentoringValues();
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:105:hardcoded variable:        const studentMarksDetails = proficiencyForm && await proficiencyForm.getStudentMarks();
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:106:hardcoded variable:        const schoolAndProficiencyDetails = schoolForm && await schoolForm.getSchoolDetails();
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:108:hardcoded string:        let productDetails = get(details, 'productDetails');
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:109:hardcoded string:        if (productDetails && !productDetails.course) productDetails["course"] = course;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:111:hardcoded string:        if (productCombination === "byjus_classes" && !["1", "2", "11", "12"].includes(initialClass)) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:114:hardcoded variable:            const response = validateByjusClassesMentoringDetails(byjusClassesFormValue, productDetails);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:115:hardcoded string:            byjusClassesMentoringDetails = get(response, "byjusClassesMentoringDetails", []);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:116:hardcoded string:            bhlpCourseDetails = get(response, "bhlpCourseDetails", []);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:122:hardcoded number:        if (existingProfiles.length > 0 && productDetails) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:123:hardcoded variable:            const isValidate = validateProfileSelection(productDetails);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:127:hardcoded string:        if (classType == "neo" && productCombination == "byjus_classes") {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:128:hardcoded object:            productDetails = this.getUpdatedProductDetails({ env, productDetails, studentMarksDetails, byjusClassesFormValue, schoolAndProficiencyDetails })
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:132:hardcoded variable:            const payload = {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:134:hardcoded string:                productType: 'single',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:136:hardcoded string:                mentoringCount: get(details, 'mentoringCount'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:137:hardcoded string:                couponDetails: get(details, 'couponDetails'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:145:hardcoded string:            if ( classType == "neo") {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:160:hardcoded object:        const { identifier, tlpOrderData } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:161:hardcoded variable:        const payload = {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:171:hardcoded string:                url: '/api/trialUpgrade/storeProductDetails',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:172:hardcoded string:                method: 'POST',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:175:hardcoded string:                const { productDetails, cashbackDetails } = get(response, 'data', {});
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:179:hardcoded object:                this.setState({ error: null });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:181:hardcoded string:                this.navigateToScreen('address');
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:183:hardcoded object:                this.setState({ error });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:190:hardcoded object:        const { history } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:191:hardcoded string:        const url = `/${path}${get(history, 'location.search')}`;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:200:hardcoded object:        const { fetchComp } = this.refs;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:202:hardcoded object:            const { status, productDetails } = fetchComp.getProductsAndFinalPrice();
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:204:hardcoded string:                if (status && productDetails && (get(productDetails, 'finalPrice') >= 0)) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:208:hardcoded string:                    this.setState({ error: 'Product Details Missing' });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:211:hardcoded string:                const errMsg = get(error, 'message', 'Error') || error;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:212:hardcoded object:                this.setState({ error: errMsg });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:218:hardcoded array:        let { existingProfiles = [] } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:219:hardcoded string:        existingProfiles = existingProfiles.filter(profile => profile.value != 'newProfile');
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:226:hardcoded string:        const { showProfileSelectionOption, existingProfiles, tlpOrderData = {}, authDetails = {}, orderPunchingType = "" } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:227:hardcoded string:        !selectedCourse && this.handleChanges('K10/K12', 'course');
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:229:hardcoded object:        const { productType, user, productCombination } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:230:hardcoded array:        const { Products = [], Courses = [], Boards = [], Tablets = [] } = productConfig || {};
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:232:hardcoded object:        const productConfiguration = find(Products, { formattedName: productType }) || {};
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:234:hardcoded object:        const { validity, tablets } = productConfiguration || {};
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:235:hardcoded object:        const selectedCourseConfig = find(Courses, { formattedName: selectedCourse }) || {};
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:236:hardcoded object:        const selectedBoardConfig = find(Boards, { formattedName: selectedBoard }) || {};
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:237:hardcoded object:        const selectedClassConfig = find(selectedBoardConfig.classes, { class: selectedClass }) || {};
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:238:hardcoded variable:        const byjusClassesMap = getByjusClassesMap(selectedBoardConfig.classes);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:240:hardcoded variable:        let classOptions = cloneDeep(getClasses(selectedBoardConfig, user, productType, productCombination));
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:241:hardcoded string:        const subCourses = get(selectedClassConfig, 'subCourses');
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:242:hardcoded variable:        const subCourseOptions = subCourses && fetchSubCourseOptions(productCombination, subCourses)
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:243:hardcoded number:        //Remove 11 & 12 for Byjus classes
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:244:hardcoded string:        classOptions = ["byjus_classes"].includes(productCombination) ? classOptions.filter(ele => !['12', '11'].includes(ele.value)) : classOptions;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:246:hardcoded variable:        const isPrivilegedUser = checkIsPrivilegedUser(user);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:247:hardcoded string:        const env = get(authDetails, "env")
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:250:hardcoded variable:        let fields = [{
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:251:hardcoded string:            type: 'hidden',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:252:hardcoded string:            name: 'course',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:253:hardcoded string:            label: 'Select Course',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:254:hardcoded string:            options: get(productConfiguration, 'courses'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:255:hardcoded string:            value: 'K10/K12',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:256:hardcoded string:            message: "Please select Course"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:258:hardcoded string:            type: 'select',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:259:hardcoded string:            name: 'board',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:260:hardcoded string:            label: 'Select Board',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:262:hardcoded string:            options: filterBoards({ boards: get(selectedCourseConfig, 'boards'), tlpOrderData, formNumber: 1 }),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:264:hardcoded string:            message: "Please select Board"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:266:hardcoded string:            type: selectedBoard === "STATE" ? 'select' : 'hidden',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:267:hardcoded string:            name: 'state',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:268:hardcoded string:            label: 'Select State',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:269:hardcoded string:            required: selectedBoard === "STATE",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:270:hardcoded string:            options: filterStateBoards({ state: get(selectedBoardConfig, 'states'), tlpOrderData, formNumber: 1 }),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:272:hardcoded string:            message: "Please select State"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:274:hardcoded string:            type: selectedBoard ? 'select' : 'hidden',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:275:hardcoded string:            name: 'initialClass',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:276:hardcoded string:            label: 'Select Class',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:278:hardcoded number:            options: filterInitialClass({ classes: classOptions, tlpOrderData, formNumber: 1, productType, productCombination, classType, isPrivilegedUser, authDetails }),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:280:hardcoded string:            onBlur: () => this.handleClassBlurEvent("", selectedClass, "", byjusClassesMap),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:281:hardcoded string:            message: "Please select Class"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:283:hardcoded string:            type: isK12Class(selectedClass) ? 'select' : 'hidden',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:284:hardcoded string:            name: 'subCourse',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:285:hardcoded string:            label: 'Select Sub Course',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:286:hardcoded number:            required: isK12Class(selectedClass),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:289:hardcoded string:            onBlur: () => this.handleClassBlurEvent("", selectedClass, "", byjusClassesMap),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:290:hardcoded string:            message: "Please select Sub Course"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:293:hardcoded string:            type: 'select',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:294:hardcoded object:            options: selectedClass && getFormattedValidity({ validity, user, initialClass: selectedClass, productCombination, authDetails, orderPunchingType }),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:295:hardcoded string:            name: 'validity',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:296:hardcoded string:            label: 'Select Initial Validity',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:299:hardcoded string:            onBlur: () => this.handleClassBlurEvent("", selectedClass, "", byjusClassesMap),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:300:hardcoded string:            message: "Please Select Initial Validity"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:302:hardcoded string:            type: selectedValidity != "TRIAL_PACK" ? 'select' : "hidden",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:303:hardcoded number:            options: isK3orPreKClass(selectedClass) ? getK3orPreKTablets({ Tablets, user, selectedClass }) : getTablets({ tablets, user, selectedClass, selectedSubCourse }),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:304:hardcoded string:            name: 'tablet',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:305:hardcoded string:            label: 'Select Tablet',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:307:hardcoded string:            message: "Please select Tablet",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:308:hardcoded string:            required: isK3orPreKClass(selectedClass) && !isPrivilegedUser && selectedValidity != "selectedValidity" ? true : false
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:310:hardcoded string:            type: (showProfileSelectionOption && existingProfiles.length > 0 ? 'radio' : 'hidden'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:312:hardcoded string:            name: 'userProfile',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:313:hardcoded string:            helpText: "Please make sure the premium account chosen has the classes for which BHLP is required.",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:314:hardcoded string:            label: 'Choose Profile Type',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:316:hardcoded string:            message: "Please Choose Profile Type",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:317:hardcoded number:            required: (showProfileSelectionOption && existingProfiles.length > 0 ? true : false),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:319:hardcoded string:                display: 'block',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:320:hardcoded string:                height: '30px',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:321:hardcoded string:                lineHeight: '30px',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:329:hardcoded object:        const { productDetailsForm, schoolForm} = this.refs;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:330:hardcoded variable:        const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:332:hardcoded string:        if (name == "initialClass") {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:333:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ workshops: "", subCourse: "", tablet: "", validity: "", mathPercent: "", sciencePercent: "", languageOfInstruction: "" });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:336:hardcoded string:                subCourse: "",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:341:hardcoded string:        if (name === "board" || name === "state") {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:342:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ initialClass: "", mathPercent: "", sciencePercent: "", languageOfInstruction: "" });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:347:hardcoded array:            [name]: value,
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:353:hardcoded object:        this.setState({ isByjusClass: false })
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:354:hardcoded array:        const isByjusClassesApplicable = byjusClassesMap[selectedClass] || false;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:362:hardcoded string:        this.setState({ classType: value ? "neo" : "oneToMega", isByjusClass: false });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:364:hardcoded object:        const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:365:hardcoded variable:        const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:366:hardcoded string:        detailsForm && detailsForm.setFieldsValue({ initialClass: "", subCourse: "", tablet: "", validity: "", board: "" ,
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:367:hardcoded string:        mathPercent: "", sciencePercent: "", languageOfInstruction: "", flowOfTopic: value ? "default" : ""});
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:371:hardcoded object:        this.setState({ error });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:376:hardcoded object:            const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:377:hardcoded variable:            const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:378:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ initialClass: "" });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:381:hardcoded object:            this.setState({ productConfig: nextProps.productConfig });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:386:hardcoded object:        const { productDetails, productConfig, productType, authDetails } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:387:hardcoded object:        const { env } = authDetails
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:389:hardcoded string:        if (productType === get(productDetails, 'productType')) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:390:hardcoded string:            const formValues = get(productDetails, 'students[0].formValues');
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:394:hardcoded string:                course: get(formValues, 'course'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:395:hardcoded string:                board: get(formValues, 'board'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:396:hardcoded string:                initialClass: get(formValues, 'initialClass'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:397:hardcoded string:                subCourse: get(formValues, 'subCourse')
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:402:hardcoded string:        this.setState({ productConfig, course: 'K10/K12' });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:406:hardcoded object:        const { isByjusClass, validity, initialClass, classType } = this.state;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:407:hardcoded object:        const { user, authDetails, productCombination } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:408:hardcoded object:        const { env } = authDetails
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:410:hardcoded string:        if (env == 'production' || classType != "neo") {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:411:hardcoded string:            return  !["11", "12"].includes(initialClass) && isByjusClass && validity && productCombination === "byjus_classes" 
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:412:hardcoded string:        } else if (!["11", "12"].includes(initialClass) && productCombination === "byjus_classes" ) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:413:hardcoded string:            const isEligible = getBatchesEligibility(this.state, "")
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:419:hardcoded object:        const { error, productConfig, productDetails, isByjusClass, initialClass, board, state, validity, subCourse, classType,  proficiency, trackId } = this.state;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:420:hardcoded object:        const { changeNextBtnMode, productType, productCombination, identifier, user, authDetails } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:421:hardcoded variable:        const isPrivilegedUser = checkIsPrivilegedUser(user)
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:422:hardcoded object:        const isProficiencyAndFot = isProficiencyAndFotAvailable({ state: this.state, props: this.props});
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:423:hardcoded object:        const { env } = authDetails
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:424:hardcoded array:        const fields = productConfig ? this.getFields() : [];
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:425:hardcoded variable:        const isBatchesEligible = this.checkBatchesEligibility();
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:429:hardcoded object:                <ErrorWrapper error={error} />
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:430:hardcoded string:                {isPrivilegedUser && productCombination === "byjus_classes" && <ClassTypeForm
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:431:hardcoded string:                    ref="classTypeForm"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:432:hardcoded object:                    classType={classType}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:433:hardcoded object:                    changeClassType={this.changeClassType}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:436:hardcoded string:                    ref="productDetailsForm"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:437:hardcoded object:                    productType={productType}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:438:hardcoded object:                    fields={fields}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:439:hardcoded string:                    initialValues={{...getProductFormInitialValue(productDetails), flowOfTopic:"default"}}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:440:hardcoded string:                    isByjusClassesAllowed={productCombination === "byjus_classes" ? true : false} // Byjus Classes
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:443:hardcoded number:                {/* Byjus classes For 3 to 10*/}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:444:hardcoded string:                {isProficiencyAndFot ? env == 'production' ?
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:446:hardcoded string:                        ref="proficiencyForm"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:451:hardcoded string:                        ref="schoolForm"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:452:hardcoded object:                        board={board}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:453:hardcoded object:                        state={state}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:454:hardcoded object:                        props={this.props}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:455:hardcoded object:                        grade={initialClass}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:456:hardcoded object:                        handleParentChanges={this.handleChanges}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:457:hardcoded object:                        handleClassBlurEvent={this.handleClassBlurEvent}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:464:hardcoded string:                        ref="byjusClassesDetailsForm"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:465:hardcoded object:                        identifier={identifier}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:466:hardcoded object:                        initialClass={initialClass}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:467:hardcoded object:                        board={board}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:468:hardcoded object:                        state={state}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:469:hardcoded object:                        productType={productType}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:470:hardcoded object:                        validity={validity}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:471:hardcoded object:                        subCourse={subCourse}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:472:hardcoded object:                        classType={classType}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:473:hardcoded object:                        proficiency={proficiency}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:474:hardcoded object:                        trackId={trackId}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:475:hardcoded string:                        productCombination="byjus_classes" />
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:479:hardcoded string:                    ref='fetchComp'
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:480:hardcoded object:                    onClickFetchPrices={this.onClickFetchPrices}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:481:hardcoded object:                    getProductDetails={this.getProductDetails}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:482:hardcoded object:                    changeNextBtnMode={changeNextBtnMode}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:483:hardcoded object:                    productType={productType}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:484:hardcoded object:                    setError={this.setError}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:485:hardcoded object:                    productCombination={productCombination}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:486:hardcoded object:                    validity={validity}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSingleProduct.js:493:hardcoded object:export default connect(mapStateToProps, mapDispatchToProps, null, { forwardRef: true })(UpgradeSingleProduct);microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:1:hardcoded object:import React, { Component, Fragment } from 'react';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:2:hardcoded object:import { connect } from 'react-redux';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:3:hardcoded object:import { get, find, remove, isEmpty, flattenDeep, size } from 'lodash';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:4:hardcoded object:import { Button } from 'reactstrap';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:5:hardcoded file path:import CallApi from 'api/callApi';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:7:hardcoded object:import { productPermissions } from 'utility/screenPermission';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:8:hardcoded object:import { saveProductDetails, addLoader, removeLoader, resetPrice, saveCashbackDetails } from 'modules/product/productReducer';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:11:hardcoded number:    isK12Class, isK3orPreKClass, getK3orPreKTablets, getTablets,
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:13:hardcoded string:} from 'modules/product/components/productHelper';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:14:hardcoded object:import { getSiblingFormFields, getProductLearningType, filterBoards, filterStateBoards, getFormattedValidity, validateProfileSelection } from '../UpgradeProductHelper';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:15:hardcoded file path:import ClassTypeForm from 'modules/product/components/ClassTypeForm'
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:16:hardcoded file path:import ProductDetailsForm from 'modules/product/components/ProducDetailsForm';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:17:hardcoded file path:import FetchPrices from 'modules/product/components/FetchPrices';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:18:hardcoded file path:import ErrorWrapper from 'components/ErrorWrapper';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:19:hardcoded object:import { isEqual } from 'lodash';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:20:hardcoded file path:import InfoWrapper from 'components/InfoWrapper';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:21:hardcoded object:import { validateByjusClassesMentoringDetails } from 'modules/product/components/mentoring/MentoringHelper';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:22:hardcoded file path:import ByjusMentoringClasses from 'modules/product/components/mentoring/ByjusMentoringClasses';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:26:hardcoded string:} from 'modules/product/utils/productConstant';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:27:hardcoded object:import { isProficiencyAndFotAvailable, getBatchesEligibility } from 'modules/product/utils/ByjusClassesHelper';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:28:hardcoded file path:import Proficiency from 'modules/student/Proficiency';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:29:hardcoded file path:import School from 'modules/student/School';
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:31:hardcoded variable:const mapStateToProps = state => ({
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:32:hardcoded string:    authDetails: get(state, 'auth.details'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:33:hardcoded string:    leadDetails: get(state, 'auth.leadDetails'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:34:hardcoded string:    salesDetails: get(state, "details.salesDetails"),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:35:hardcoded string:    user: get(state, "auth.details.user", {}),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:36:hardcoded string:    identifier: get(state, 'details.identifier'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:37:hardcoded string:    existingProfiles: get(state, 'product.existingProfiles'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:38:hardcoded string:    showProfileSelectionOption: get(state, 'product.showProfileSelectionOption'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:39:hardcoded string:    productDetails: get(state, 'product.details'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:40:hardcoded string:    productConfig: get(state, 'product.config'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:41:hardcoded string:    loading: get(state, 'product.loading'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:42:hardcoded string:    error: get(state, 'product.error'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:43:hardcoded string:    orderPunchingType: get(state, 'auth.orderPunchingType'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:44:hardcoded string:    tlpOrderData: get(state, 'auth.tlpOrderData')
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:47:hardcoded variable:const mapDispatchToProps = dispatch => ({
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:69:hardcoded number:            minStudentCount: 2,
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:70:hardcoded number:            formCount: 1,
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:71:hardcoded number:            maxStudentCount: 0,
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:72:hardcoded array:            formCountArray: [],
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:77:hardcoded object:            productConfig: {},
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:78:hardcoded array:            fields: [],
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:81:hardcoded object:            selectedProfile: {},
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:83:hardcoded string:            classType: "neo"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:88:hardcoded object:        let { env, productDetails, studentMarksDetails, byjusClassesFormValue, schoolAndProficiencyDetails } = details
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:90:hardcoded string:        if (env == 'production') {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:92:hardcoded string:            if (!size(get(studentMarksDetails, "formValue", {}))) return productDetails
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:95:hardcoded string:                ...get(studentMarksDetails, "formValue", {}),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:96:hardcoded string:                languageOfInstruction: get(byjusClassesFormValue, "formValue.languageOfInstruction", null),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:97:hardcoded string:                languageOfInstructionId: get(byjusClassesFormValue, "formValue.languageOfInstructionId", null)
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:104:hardcoded string:                electiveDetails: get(byjusClassesFormValue, "formValue.electivesDetails", null),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:105:hardcoded string:                languageOfInstruction: get(byjusClassesFormValue, "formValue.languageOfInstruction", null),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:106:hardcoded string:                languageOfInstructionId: get(byjusClassesFormValue, "formValue.languageOfInstructionId", null)
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:113:hardcoded array:        const { productCombination, identifier, orderPunchingType, tlpOrderData = {}, existingProfiles = [], authDetails } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:114:hardcoded object:        const { env } = authDetails
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:115:hardcoded object:        const { formCountArray, formCount, classType } = this.state;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:116:hardcoded array:        let students = [];
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:117:hardcoded number:        let mentoringCount = 0;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:118:hardcoded object:        let couponDetails = {};
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:119:hardcoded variable:        let siblingCount = formCountArray.length;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:120:hardcoded array:        let bhlpCourseDetails = [], byjusClassesMentoringDetails = [];
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:122:hardcoded number:        for (var i = 0; i < siblingCount; i++) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:123:hardcoded variable:            const lastSibling = formCount == siblingCount;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:124:hardcoded array:            const form = this.refs[`productDetailsForm-${formCountArray[i]}`];
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:125:hardcoded array:            const byjusClassesMentoringForm = this.refs[`byjusClassesDetailsForm-${formCountArray[i]}`]
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:126:hardcoded array:            const schoolForm = this.refs[`schoolForm-${formCountArray[i]}`]
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:127:hardcoded array:            const proficiencyForm = this.refs[`proficiencyForm-${formCountArray[i]}`]
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:129:hardcoded variable:            const byjusClassesFormValue = byjusClassesMentoringForm && await byjusClassesMentoringForm.getMentoringValues();
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:130:hardcoded variable:            const studentMarksDetails = proficiencyForm && await proficiencyForm.getStudentMarks();
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:131:hardcoded variable:            const schoolAndProficiencyDetails = schoolForm && await schoolForm.getSchoolDetails()
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:133:hardcoded object:            const details = await form.getProductDetails() || {};
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:134:hardcoded string:            let productDetails = get(details, 'productDetails') || {};
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:139:hardcoded variable:                const response = validateByjusClassesMentoringDetails(byjusClassesFormValue, productDetails);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:140:hardcoded string:                byjusClassesMentoringDetails = get(response, "byjusClassesMentoringDetails", []);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:141:hardcoded string:                bhlpCourseDetails = get(response, "bhlpCourseDetails", []);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:147:hardcoded array:            const productLearningType = this.getAvailableProductLearningType(formCountArray[i]);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:149:hardcoded string:            if (classType == "neo" && productCombination == "byjus_classes" && ["byjus_classes_plus_byjus_tlp", "byjus_classes"].includes(productLearningType)) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:150:hardcoded object:                productDetails = this.getUpdatedProductDetails({ env, productDetails, studentMarksDetails, byjusClassesFormValue, schoolAndProficiencyDetails })
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:153:hardcoded number:            if (i == 0 && existingProfiles.length > 0 && productDetails) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:154:hardcoded variable:                const isValidate = validateProfileSelection(productDetails);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:158:hardcoded number:            /**If any sibling data is empty , make siblingCount as 0 and student Array empty to collect data first */
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:159:hardcoded number:            !isEmpty(productDetails) ? students.push(productDetails) : (students = [] && (siblingCount = 0));
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:160:hardcoded string:            mentoringCount = lastSibling && get(details, 'mentoringCount');
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:161:hardcoded string:            couponDetails = lastSibling && get(details, 'couponDetails');
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:166:hardcoded variable:            const payload = {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:168:hardcoded string:                productType: 'sibling',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:180:hardcoded string:            if (classType == "neo") {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:195:hardcoded object:        const { productCombination } = productDetails
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:196:hardcoded object:        const { identifier, tlpOrderData } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:197:hardcoded variable:        const payload = {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:204:hardcoded string:            if (["byjus_classes"].includes(productCombination)) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:205:hardcoded string:                payload["productDetails"] = formatByjusClassesFormValues(productDetails);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:210:hardcoded string:                url: '/api/trialUpgrade/storeProductDetails',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:211:hardcoded string:                method: 'POST',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:214:hardcoded string:                const { productDetails, cashbackDetails } = get(response, 'data', {});
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:218:hardcoded object:                this.setState({ error: null });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:220:hardcoded string:                this.navigateToScreen('address');
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:222:hardcoded object:                this.setState({ error }, () => {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:223:hardcoded object:                    this.setState({ error });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:231:hardcoded object:        const { history } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:232:hardcoded string:        const url = `/${path}${get(history, 'location.search')}`;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:241:hardcoded object:        const { fetchComp } = this.refs;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:244:hardcoded object:            const { status, productDetails } = fetchComp.getProductsAndFinalPrice();
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:246:hardcoded string:                if (status && productDetails && (get(productDetails, 'finalPrice') >= 0)) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:250:hardcoded string:                    this.setState({ error: 'Product Details Missing' });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:253:hardcoded string:                const errMsg = get(error, 'message', 'Error') || error;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:254:hardcoded object:                this.setState({ error: errMsg });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:261:hardcoded array:        let rule = []
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:262:hardcoded string:        if (countryCode === '+91') {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:264:hardcoded number:                pattern: new RegExp(/^(\+\d{1,3}[- ]?)?\d{10}$/), message: `Enter 10 digit valid Mobile No`
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:271:hardcoded object:        const { selectedProfile } = this.state;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:272:hardcoded object:        let { existingProfiles } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:273:hardcoded number:        for (var i = 0; i < existingProfiles.length; i++) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:274:hardcoded string:            if (Object.values(selectedProfile).flat().includes(existingProfiles[i].value) && existingProfiles[i].value !== "newProfile") {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:275:hardcoded string:                existingProfiles = existingProfiles.filter(profile => profile.value != 'newProfile');
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:277:hardcoded array:            else { existingProfiles[i].disabled = false; }
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:283:hardcoded string:        let productLearningType = this.state[`productLearningType_${formNumber}`] || "";
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:284:hardcoded string:        if (productLearningType.indexOf("ADVANCE_ADMISSION_PLUS_BYJUS_CLASSES") >= 0) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:285:hardcoded string:            productLearningType = "advance_admission_plus_byjus_classes"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:287:hardcoded string:        else if (productLearningType.indexOf("_BYJUS_CLASSES_PLUS_BYJUS_TLP") >= 0) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:288:hardcoded string:            productLearningType = "byjus_classes_plus_byjus_tlp"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:289:hardcoded string:        } else if (productLearningType.indexOf("JUMPSTART_ADMISSION") >= 0) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:290:hardcoded string:            productLearningType = "jumpstart_admission"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:291:hardcoded string:        } else if (productLearningType.indexOf("_BYJUS_TLP_PLUS_BYJUS_CLASSES") >= 0) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:292:hardcoded string:            productLearningType = "byjus_tlp_plus_byjus_classes"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:293:hardcoded string:        } else if (productLearningType.indexOf("_BYJUS_CLASS") >= 0) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:294:hardcoded string:            productLearningType = "byjus_classes"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:295:hardcoded string:        } else if (productLearningType.indexOf("_HLP") >= 0) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:296:hardcoded string:            productLearningType = "home_learning_program"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:298:hardcoded string:            productLearningType = "byjus_tlp"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:304:hardcoded object:        const { formCountArray, classType } = this.state
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:305:hardcoded object:        const { productCombination } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:306:hardcoded object:        const { showProfileSelectionOption, existingProfiles, tlpOrderData = {}, authDetails = {} } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:307:hardcoded variable:        const productConfig = get(this.state, `productConfig`);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:309:hardcoded string:        const selectedCourse = get(this.state, `course-${formNumber}`, 'K10/K12');
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:310:hardcoded object:        const selectedBoard = get(this.state, `board-${formNumber}`);;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:311:hardcoded object:        const selectedInitialClass = get(this.state, `initialClass-${formNumber}`);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:312:hardcoded object:        const selectedFinalClass = get(this.state, `finalClass-${formNumber}`);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:313:hardcoded object:        const selectedTlpFinalClass = get(this.state, `tlpFinalClass-${formNumber}`);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:314:hardcoded object:        const selectedByjusClassFinalGrade = get(this.state, `byjusClassFinalGrade-${formNumber}`);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:315:hardcoded object:        const selectedTablet = get(this.state, `tablet-${formNumber}`);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:316:hardcoded object:        const selectedSubCourse = get(this.state, `subCourse-${formNumber}`);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:318:hardcoded object:        const { productType, user } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:319:hardcoded array:        const { Products = [], Courses = [], Boards = [], Tablets = [] } = productConfig || {};
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:321:hardcoded object:        const productConfiguration = find(Products, { formattedName: productType }) || {};
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:322:hardcoded object:        const { validity, tablets } = productConfiguration || {};
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:323:hardcoded object:        const selectedCourseConfig = find(Courses, { formattedName: selectedCourse }) || {};
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:324:hardcoded object:        const selectedBoardConfig = find(Boards, { formattedName: selectedBoard }) || {};
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:326:hardcoded variable:        const byjusClassesMap = getByjusClassesMap(selectedBoardConfig.classes);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:327:hardcoded variable:        const isPrivilegedUser = checkIsPrivilegedUser(user);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:329:hardcoded variable:        const productLearningType = this.getAvailableProductLearningType(formNumber);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:331:hardcoded object:        const subCourses = getSubCourses({ productLearningType, selectedBoardConfig, selectedFinalClass, tlpFinalGrade: selectedTlpFinalClass, byjusClassFinalGrade: selectedByjusClassFinalGrade });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:332:hardcoded variable:        const subCourseOptions = subCourses && fetchSubCourseOptions(productLearningType, subCourses)
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:333:hardcoded string:        const env = get(authDetails, "env")
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:335:hardcoded variable:        let fields = [
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:337:hardcoded string:                type: productCombination === "byjus_classes" ? 'select' : "hidden",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:338:hardcoded string:                name: 'productLearningType',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:339:hardcoded string:                label: 'Choose Product Learning Type',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:340:hardcoded string:                message: "Please Select Product Learning Type",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:341:hardcoded string:                options: getProductLearningType({ productType: "sibling", isPrivilegedUser, authDetails }),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:343:hardcoded string:                required: productCombination === "byjus_classes" ? true : false
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:345:hardcoded string:                type: 'text',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:346:hardcoded string:                name: 'siblingName',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:347:hardcoded string:                label: 'Sibling Name',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:350:hardcoded array:                    { pattern: new RegExp(/^[a-zA-Z\s\.]+$/), message: `Enter valid name` },
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:354:hardcoded array:                                if (formCount != formNumber && this.state[`siblingName-${formCount}`] === value) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:355:hardcoded string:                                    return callback('Siblings cannot have same name');
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:361:hardcoded number:                        max: 80,
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:362:hardcoded number:                        message: `Student Name cannot be more than 80 characters long`
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:366:hardcoded string:                message: "Please enter Name"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:368:hardcoded string:                type: 'hidden',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:369:hardcoded string:                name: 'course',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:370:hardcoded string:                label: 'Select Course',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:371:hardcoded string:                options: get(productConfiguration, 'courses'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:372:hardcoded string:                value: 'K10/K12',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:373:hardcoded string:                message: "Please select Course"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:375:hardcoded string:                type: 'select',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:376:hardcoded string:                name: 'board',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:377:hardcoded string:                label: 'Select Board',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:379:hardcoded string:                options: filterBoards({ boards: get(selectedCourseConfig, 'boards'), tlpOrderData, formNumber: serialNumber }),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:381:hardcoded string:                message: "Please select Board"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:383:hardcoded string:                type: selectedBoard === "STATE" ? 'select' : 'hidden',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:384:hardcoded string:                name: 'state',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:385:hardcoded string:                label: 'Select State',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:386:hardcoded string:                required: selectedBoard === "STATE",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:387:hardcoded string:                options: filterStateBoards({ state: get(selectedBoardConfig, 'states'), tlpOrderData, formNumber: serialNumber }),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:389:hardcoded string:                message: "Please select State"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:391:hardcoded string:            ...getSiblingFormFields({ state: this.state, props: this.props, productLearningType: productLearningType || "byjus_tlp", handleChanges: this.handleChanges, handleClassBlurEvent: this.handleClassBlurEvent, formNumber, serialNumber }),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:393:hardcoded string:                type: isK12Class(selectedFinalClass, selectedTlpFinalClass, selectedByjusClassFinalGrade) ? 'select' : 'hidden',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:394:hardcoded string:                name: 'subCourse',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:395:hardcoded string:                label: 'Sub Course',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:396:hardcoded number:                required: isK12Class(selectedFinalClass, selectedTlpFinalClass, selectedByjusClassFinalGrade),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:399:hardcoded string:                onBlur: () => this.handleClassBlurEvent("", "", "", formNumber, byjusClassesMap),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:400:hardcoded string:                message: "Please select Sub Course"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:402:hardcoded string:                type: 'select',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:403:hardcoded object:                options: selectedInitialClass && getFormattedValidity({ validity, user, initialClass: selectedInitialClass, productCombination: productLearningType, authDetails, finalClass: selectedFinalClass }),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:404:hardcoded string:                name: 'validity',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:405:hardcoded string:                label: 'Select Initial Validity',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:408:hardcoded string:                onBlur: () => this.handleClassBlurEvent("", "", "", formNumber, byjusClassesMap),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:409:hardcoded string:                message: "Please Select Initial Validity"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:411:hardcoded string:                type: 'select',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:412:hardcoded number:                options: isK3orPreKClass(selectedInitialClass) ? getK3orPreKTablets({ Tablets, user, selectedClass: selectedInitialClass }) : getTablets({ tablets, user, selectedClass: selectedInitialClass, selectedSubCourse }),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:413:hardcoded number:                required: isK3orPreKClass(selectedInitialClass) && !isPrivilegedUser ? true : false,
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:414:hardcoded string:                name: 'tablet',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:415:hardcoded string:                label: 'Select Tablet',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:417:hardcoded string:                message: "Please select Tablet"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:419:hardcoded string:                type: (showProfileSelectionOption && existingProfiles.length > 0 ? 'radio' : 'hidden'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:421:hardcoded string:                name: 'userProfile',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:422:hardcoded string:                label: 'Choose Profile Type',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:423:hardcoded string:                helpText: "Please make sure the premium account chosen has the classes for which BHLP is required.",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:425:hardcoded string:                message: "Please Choose Profile Type",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:426:hardcoded number:                required: (serialNumber === 1 && showProfileSelectionOption && existingProfiles.length > 0 ? true : false),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:428:hardcoded string:                    display: 'block',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:429:hardcoded string:                    height: '30px',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:430:hardcoded string:                    lineHeight: '30px',
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:438:hardcoded array:        const productDetailsForm = this.refs[`productDetailsForm-${formNumber}`]
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:439:hardcoded variable:        const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:441:hardcoded string:            finalClass: "", workshops: "", subCourse: "", tablet: "",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:442:hardcoded string:            validity: "", initialClass: "", tlpFinalGrade: "", byjusClassFinalGrade: ""
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:444:hardcoded string:        const courseType = getCourseTypeOption("sibling", value);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:446:hardcoded array:            [`productLearningType_${formNumber}`]: `${formNumber}_${value.toUpperCase()}`,
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:447:hardcoded array:            [`courseType-${formNumber}`]: courseType
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:455:hardcoded array:                [`${formNumber}`]: [`${ele.target.value}`]
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:462:hardcoded string:            [`schoolState-${formNumber}`]: "",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:463:hardcoded string:            [`city-${formNumber}`]: "",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:464:hardcoded string:            [`schoolName-${formNumber}`]: "",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:465:hardcoded string:            [`otherSchoolName-${formNumber}`]: "",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:466:hardcoded string:            [`newSchool-${formNumber}`]: "",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:467:hardcoded string:            [`schoolAddress-${formNumber}`]: "",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:468:hardcoded string:            [`mathPercent-${formNumber}`]: "",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:469:hardcoded string:            [`sciencePercent-${formNumber}`]: "",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:470:hardcoded string:            [`proficiency-${formNumber}`]: "",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:471:hardcoded string:            [`formValues-${formNumber}`]: { ...this.state[`formValues-${formNumber}`], schoolState: "", city: "", schoolName: "", otherSchoolName: "", newSchool: "", schoolAddress: "", mathPercent: "", sciencePercent: "", proficiency: "" }
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:476:hardcoded array:        const productDetailsForm = this.refs[`productDetailsForm-${formNumber}`];
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:477:hardcoded variable:        const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:478:hardcoded array:        const schoolForm = this.refs[`schoolForm-${formNumber}`]
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:481:hardcoded string:        if (name == "initialClass") {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:482:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ finalClass: "", subCourse: "", tablet: "", validity: "", tlpFinalGrade: "", byjusClassFinalGrade: "",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:483:hardcoded string:            mathPercent: "", sciencePercent: "", languageOfInstruction: "" });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:486:hardcoded string:                [`subCourse-${formNumber}`]: "",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:492:hardcoded string:        if (name === "finalClass") {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:493:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ tablet: "", subCourse: "", tlpFinalGrade: "", byjusClassFinalGrade: "" });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:495:hardcoded string:                [`subCourse-${formNumber}`]: "",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:501:hardcoded string:        if (name === "board" || name === "state") {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:502:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ initialClass: "",  mathPercent: "", sciencePercent: "", languageOfInstruction: ""  });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:506:hardcoded string:        if (name === "courseType") {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:507:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ initialClass: "", subCourse: "", tablet: "", validity: "", board: "", tlpFinalGrade: "", byjusClassFinalGrade: "" });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:510:hardcoded string:        if (name === "tablet") {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:511:hardcoded string:            const { label = "" } = props || {};
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:513:hardcoded array:                [`${name}-${formNumber}`]: value,
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:514:hardcoded array:                [`tabletId-${formNumber}`]: `T-${value}`,
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:515:hardcoded array:                [`tabletName-${formNumber}`]: `${label}`,
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:521:hardcoded array:            [`${name}-${formNumber}`]: value,
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:527:hardcoded variable:        const productLearningType = this.getAvailableProductLearningType(formNo);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:528:hardcoded string:        const isByjusClassForm = ["jumpstart_admission", "byjus_tlp_plus_byjus_classes", "byjus_classes", "byjus_classes_plus_byjus_tlp", "advance_admission_plus_byjus_classes"].includes(productLearningType);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:530:hardcoded array:        const mentoringApplicableFormTrack = [];
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:531:hardcoded variable:        let isByjusClassesApplicable = false;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:533:hardcoded object:        const { formCountArray } = this.state;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:535:hardcoded variable:        const currentForm = formCountArray.find(formCount => formCount === formNo);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:536:hardcoded array:        this.setState({ [`isByjusClasses-${currentForm}`]: false })
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:538:hardcoded number:        let initialClass = isAdvanceAdmission.includes(productLearningType) || ELIGIBLE_COMBINATIONS_FOR_TLP_PLUS_BYJUS_CLASSES_PLUS_TLP.includes(productLearningType) ? (parseInt(this.state[`initialClass-${currentForm}`], 10) + 1).toString() : this.state[`initialClass-${currentForm}`];
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:539:hardcoded array:        isByjusClassesApplicable = byjusClassesMap[initialClass] || false;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:544:hardcoded array:                [`isByjusClasses-${currentForm}`]: (isByjusClassesApplicable) ? true : false
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:551:hardcoded string:        this.setState({ classType: value ? "neo" : "oneToMega" });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:553:hardcoded object:        const { formCountArray } = this.state
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:555:hardcoded array:            this.setState({ [`isByjusClasses-${formNo}`]: false })
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:556:hardcoded array:            const productDetailsForm = this.refs[`productDetailsForm-${formNo}`];
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:557:hardcoded variable:            const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:560:hardcoded string:                productLearningType: "", initialClass: "", finalClass: "",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:561:hardcoded string:                byjusClassFinalGrade: "", validity: "", tlpFinalGrade: "", courseType: "", tablet: "",
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:562:hardcoded string:                mathPercent: "", sciencePercent: "", languageOfInstruction: "", flowOfTopic: value ? "default" : ""
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:568:hardcoded object:        let { formCount, formCountArray, maxStudentCount } = this.state;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:569:hardcoded object:        const { productCombination } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:573:hardcoded variable:            const currentTime = (new Date()).getTime();
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:577:hardcoded variable:            const newFormCountArray = formCountArray;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:581:hardcoded object:            this.setState({ formCount, formCountArray }, () => {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:582:hardcoded object:                this.setState({ formCountArray: newFormCountArray });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:592:hardcoded object:        let { formCount, formCountArray } = this.state;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:594:hardcoded number:        if (formCount > 0) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:600:hardcoded variable:            const newFormCountArray = formCountArray;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:604:hardcoded object:            this.setState({ formCount, formCountArray }, () => {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:605:hardcoded object:                this.setState({ formCountArray: newFormCountArray });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:612:hardcoded object:        const { env } = this.props.authDetails
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:615:hardcoded variable:            const refs = this.refs;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:616:hardcoded object:            const key = `productDetailsForm-${formCount}`;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:617:hardcoded variable:            const form = get(refs, key);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:618:hardcoded object:            const formValues = form && form.getFormFilledValues() || {};
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:619:hardcoded string:            if (env == 'production') {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:621:hardcoded array:                    [`formValues-${formCount}`]: formValues
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:625:hardcoded array:                    [`formValues-${formCount}`]: { ...this.state[`formValues-${formCount}`], ...formValues }
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:632:hardcoded object:        this.setState({ error });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:638:hardcoded object:            this.setState({ productConfig: nextProps.productConfig }, async () => {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:646:hardcoded array:        const { existingProfiles = [] } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:647:hardcoded object:        const { eligibleCustomers, formCountArray } = this.state;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:649:hardcoded object:        const selectedProfile = {};
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:650:hardcoded number:        for (var i = 0; i < formCountArray.length; i++) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:651:hardcoded array:            const studentName = eligibleCustomers[i].studentName;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:652:hardcoded string:            const currentProfile = get(existingProfiles.find(({ label }) => label.indexOf(studentName) >= 0), 'value');
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:653:hardcoded array:            selectedProfile[formCountArray[i]] = currentProfile;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:654:hardcoded object:            this.setState({ selectedProfile });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:659:hardcoded array:        let { productDetails = {}, productConfig = {}, productType, user, tlpOrderData, existingProfiles = [], authDetails } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:660:hardcoded array:        const { customerDetails = [] } = tlpOrderData;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:661:hardcoded object:        let { formCount } = this.state;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:662:hardcoded array:        let formCountArray = [];
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:663:hardcoded variable:        let currentTime = (new Date()).getTime();
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:665:hardcoded string:        const productConfiguration = find(get(productConfig, 'Products', []), { formattedName: productType }) || {};
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:667:hardcoded string:        const userPermissions = get(user, 'permissions', []);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:669:hardcoded number:        const isPriviledgedUser = userPermissions.indexOf(productPermissions.ignoreSiblingCountCheck) >= 0;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:671:hardcoded number:        /** For non-priviledged users, MaxStudent = maxSiblingCount + 1
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:674:hardcoded string:        const maxStudentCount = isPriviledgedUser ? PRIVILEDGED_USERS_SIBLING_COUNT : parseInt(get(productConfiguration, 'otherConfigs.maxSiblingCount')) + 1;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:676:hardcoded string:        if (productType === get(productDetails, 'productType')) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:678:hardcoded string:            formCount = get(productDetails, 'students', []).length || formCount;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:680:hardcoded number:            for (var i = 1; i <= formCount; i++) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:681:hardcoded number:                const formValues = get(productDetails, `students.${i - 1}.formValues`);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:684:hardcoded string:                    [`course-${i}`]: get(formValues, 'course'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:685:hardcoded string:                    [`board-${i}`]: get(formValues, 'board'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:686:hardcoded string:                    [`initialClass-${i}`]: get(formValues, 'initialClass'),
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:687:hardcoded string:                    [`finalClass-${i}`]: get(formValues, 'finalClass')
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:693:hardcoded object:            this.setState({ productDetails, formCount });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:697:hardcoded number:        for (let i = 1; i <= formCount; i++) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:701:hardcoded object:        const selectedProfile = {};
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:702:hardcoded number:        for (let i = 0; i < customerDetails.length; i++) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:703:hardcoded string:            const currentProfile = get(existingProfiles.find(({ label }) => label.indexOf(customerDetails[i].studentName) >= 0), 'value');
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:707:hardcoded string:        this.setState({ productConfig, course: 'K10/K12', formCountArray, maxStudentCount, selectedProfile });
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:711:hardcoded object:        const { formCountArray } = this.state;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:712:hardcoded variable:        let siblingCount = formCountArray.length;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:714:hardcoded number:        for (var i = 0; i < siblingCount; i++) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:715:hardcoded array:            const byjusClassesMentoringForm = this.refs[`byjusClassesDetailsForm-${formCountArray[i]}`]
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:716:hardcoded variable:            const byjusClassesFormValue = byjusClassesMentoringForm && await byjusClassesMentoringForm.getMentoringValues();
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:718:hardcoded array:                [`${formCountArray[i]}_byjus_class_initialValue`]: byjusClassesFormValue.formValue
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:724:hardcoded object:        const { productConfig } = this.state;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:725:hardcoded object:        const { productType, productCombination } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:726:hardcoded array:        const fields = productConfig ? this.getFields(formNumber, formSerialNum) : [];
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:727:hardcoded number:        const initialValues = getProductFormInitialValue(productDetails)[formSerialNum - 1] || get(this.state, `formValues-${formNumber}`) || {};
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:732:hardcoded object:                    heading={`Student #${formSerialNum}`}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:733:hardcoded object:                    key={formNumber}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:734:hardcoded object:                    ref={`productDetailsForm-${formNumber}`}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:735:hardcoded array:                    productLearningType={this.state[`productLearningType_${formNumber}`]}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:736:hardcoded object:                    productType={productType}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:737:hardcoded object:                    fields={fields}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:738:hardcoded string:                    initialValues={{...initialValues, flowOfTopic:"default"}}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:739:hardcoded object:                    displayMiscellaneousComponents={isLastSibling ? true : false} /**To display mentoring and coupon count at the end of last sibling */
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:740:hardcoded object:                    isByjusClassesAllowed={ELIGIBLE_COMBINATIONS_FOR_BATCH.includes(productCombination) ? true : false} // Byjus Classes
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:748:hardcoded object:        const { classType } = this.state
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:749:hardcoded string:        if (env == 'production' || classType != "neo") {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:750:hardcoded array:            return this.state[`isByjusClasses-${formNo}`] && this.state[`finalClass-${formNo}`] && this.state[`validity-${formNo}`] && this.state[`isByjusClasses-${formNo}`]
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:752:hardcoded variable:            const isEligible = getBatchesEligibility(this.state, formNo)
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:758:hardcoded object:        const { error, productDetails, formCount, formCountArray, maxStudentCount, classType,  proficiency, trackId } = this.state;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:759:hardcoded object:        const { changeNextBtnMode, productType, productCombination, identifier, user, authDetails } = this.props;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:760:hardcoded variable:        const isPrivilegedUser = checkIsPrivilegedUser(user)
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:761:hardcoded object:        const { env } = authDetails
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:765:hardcoded object:                <ErrorWrapper error={error} />
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:766:hardcoded number:                <InfoWrapper descriptionBody={<div>Sibling with more number of classes will be considered as 1st Sibling, irrespective of the order in which the selection is made.
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:767:hardcoded number:                <p><strong>Ex:</strong> Sibling_1 : 10 to 12, Sibling_2 : 6 to 12</p>
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:768:hardcoded number:                    Sibling_2 will be taken as first sibling.
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:769:hardcoded string:                </div>} type="info" />
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:770:hardcoded string:                {isPrivilegedUser && productCombination === "byjus_classes" && <ClassTypeForm
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:771:hardcoded string:                    ref="classTypeForm"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:772:hardcoded object:                    classType={classType}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:773:hardcoded object:                    changeClassType={this.changeClassType}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:776:hardcoded number:                    const formSerialNum = index + 1;
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:777:hardcoded variable:                    const isLastSibling = (formSerialNum === formCount);
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:778:hardcoded array:                    let grade = this.state[`initialClass-${formNo}`]
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:780:hardcoded string:                        if (get(this.state, [`initialClass-${formNo}`], "") < 10) {
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:781:hardcoded string:                            grade = (parseInt(get(this.state, [`initialClass-${formNo}`], ""), 10) + 1).toString()
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:784:hardcoded string:                            grade = get(this.state, [`byjusClassFinalGrade-${formNo}`], "")
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:787:hardcoded object:                    const isProficiencyAndFot = isProficiencyAndFotAvailable({ state: this.state, props: this.props, formNumber:formNo, productLearningType: this.getAvailableProductLearningType(formNo)})
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:788:hardcoded variable:                    const isBatchesEligible = this.checkBatchesEligibility(formNo, env)
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:791:hardcoded object:                        <Fragment key={index}>
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:792:hardcoded object:                            {this.buildSiblingProductForm(formSerialNum, formNo, productDetails, isLastSibling)}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:793:hardcoded number:                            {/* Byjus classes For 4 to 12 grades*/}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:794:hardcoded string:                            {isProficiencyAndFot ? env == 'production' ?
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:796:hardcoded object:                                    ref={`proficiencyForm-${formNo}`}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:801:hardcoded object:                                    ref={`schoolForm-${formNo}`}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:802:hardcoded array:                                    board={this.state[`board-${formNo}`]}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:803:hardcoded array:                                    grade={this.state[`initialClass-${formNo}`]}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:804:hardcoded array:                                    premiumId={this.state[`premiumId-${formNo}`]}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:805:hardcoded object:                                    formNumber={formNo}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:806:hardcoded object:                                    handleSiblingChanges={this.handleChanges}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:807:hardcoded object:                                    handleClassBlurEvent={this.handleClassBlurEvent}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:808:hardcoded object:                                    props={this.props}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:809:hardcoded array:                                    state={this.state[`state-${formNo}`]}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:816:hardcoded object:                                    ref={`byjusClassesDetailsForm-${formNo}`}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:817:hardcoded object:                                    identifier={identifier}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:818:hardcoded object:                                    initialClass={grade}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:819:hardcoded object:                                    classType={classType}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:820:hardcoded array:                                    board={this.state[`board-${formNo}`]}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:821:hardcoded array:                                    state={this.state[`state-${formNo}`]}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:822:hardcoded object:                                    productType={productType}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:823:hardcoded array:                                    validity={this.state[`validity-${formNo}`]}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:824:hardcoded array:                                    subCourse={this.state[`subCourse-${formNo}`]}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:825:hardcoded string:                                    productCombination="byjus_classes"
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:826:hardcoded array:                                    initialValues={this.state[`${formNo}_byjus_class_initialValue`]}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:827:hardcoded array:                                    courseType={this.state[`courseType-${formNo}`]}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:828:hardcoded array:                                    proficiency={this.state[`proficiency-${formNo}`]}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:829:hardcoded array:                                    trackId={this.state[`trackId-${formNo}`]}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:832:hardcoded string:                            <div className="sibling-product-btn-holder">
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:834:hardcoded string:                                    <Button color="success" onClick={this.addSibling}>+</Button>}{" "}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:835:hardcoded string:                                {formSerialNum > 1 && <Button color="danger" onClick={() => this.removeSibling(formNo)}>-</Button>}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:842:hardcoded string:                    ref='fetchComp'
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:843:hardcoded object:                    onClickFetchPrices={this.onClickFetchPrices}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:844:hardcoded object:                    getProductDetails={this.getProductDetails}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:845:hardcoded object:                    changeNextBtnMode={changeNextBtnMode}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:846:hardcoded object:                    productType={productType}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:847:hardcoded object:                    setError={this.setError}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:848:hardcoded object:                    productCombination={productCombination}
microservices-middleware/client/src/modules/ordertype/upgrade/trialpack/components/products/types/UpgradeSiblingProduct.js:856:hardcoded object:export default connect(mapStateToProps, mapDispatchToProps, null, { forwardRef: true })(UpgradeSiblingProduct);