microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:12:hardcoded variable:	const mapStateToProps = state => ({
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:13:hardcoded string:	    authDetails: get(state, 'auth.details'),
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:14:hardcoded string:	    leadDetails: get(state, 'auth.leadDetails'),
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:15:hardcoded string:	    salesDetails: get(state, "details.salesDetails"),
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:16:hardcoded string:	    identifier: get(state, 'details.identifier'),
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:17:hardcoded string:	    existingProfiles: get(state, 'product.existingProfiles'),
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:18:hardcoded string:	    showProfileSelectionOption: get(state, 'product.showProfileSelectionOption'),
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:19:hardcoded string:	    productDetails: get(state, 'product.details'),
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:20:hardcoded string:	    reviewProductDetails: get(state, 'product.reviewDetails'),
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:21:hardcoded string:	    productConfig: get(state, 'product.config'),
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:22:hardcoded string:	    loading: get(state, 'product.loading'),
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:23:hardcoded string:	    error: get(state, 'product.error'),
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:26:hardcoded variable:	const mapDispatchToProps = dispatch => ({
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:50:hardcoded array:	            fields: [],
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:55:hardcoded array:	        const { identifier, productType, productCombination, stateValues, existingProfiles=[] } = this.props;
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:56:hardcoded string:	        const btlpTodProfiles = existingProfiles.filter(ele => ele.value !== "newProfile");
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:57:hardcoded object:	        const { todExistingProfiles } = stateValues
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:58:hardcoded object:	        const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:59:hardcoded variable:	        const details = await productDetailsForm.getProductDetails();
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:60:hardcoded string:	        let productDetails = get(details, 'productDetails');
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:61:hardcoded string:	        const btlpTodDetails = productCombination === "btlp_tod" && btlpTodProfiles.length
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:63:hardcoded number:	        if ((todExistingProfiles?.length > 0 || btlpTodDetails) && productDetails) {
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:64:hardcoded variable:	            const isValidate = validateProfileSelection(productDetails);
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:69:hardcoded variable:	            const payload = {
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:77:hardcoded string:	                url: '/api/byjusclass/tutor'
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:83:hardcoded object:	        const { identifier, addOnProduct } = this.props;
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:84:hardcoded variable:	        const payload = {
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:93:hardcoded string:	                url: '/api/product/storeProductDetails',
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:94:hardcoded string:	                method: 'POST',
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:97:hardcoded string:	                const { productDetails, cashbackDetails } = get(response, 'data', {});
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:101:hardcoded object:	                this.setState({ error: null });
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:103:hardcoded string:	                this.navigateToScreen('address');
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:105:hardcoded object:	                this.setState({ error });
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:112:hardcoded object:	        const { history } = this.props;
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:113:hardcoded string:	        const url = `/${path}${get(history, 'location.search')}`;
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:122:hardcoded object:	        const { fetchComp } = this.refs;
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:124:hardcoded object:	            const { status, productDetails } = fetchComp.getProductsAndFinalPrice();
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:126:hardcoded string:	                if (status && productDetails && (get(productDetails, 'finalPrice') >= 0)) {
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:130:hardcoded string:	                    this.setState({ error: 'Product Details Missing' });
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:133:hardcoded string:	                const errMsg = get(error, 'message', 'Error') || error;
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:134:hardcoded object:	                this.setState({ error: errMsg });
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:140:hardcoded array:	        let profiles = []
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:142:hardcoded object:	            const { neoGrade, neoStudent } = profile
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:143:hardcoded number:	            if (neoGrade && parseInt(neoGrade) >= 4 && parseInt(neoGrade) <= 10 && neoStudent) {
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:151:hardcoded string:	        const { stateValues, productCombination='', todPaidProfiles=[] } = this.props;
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:152:hardcoded object:	        let { todExistingProfiles } = stateValues
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:153:hardcoded string:	        todExistingProfiles = productCombination === "btlp_tod" ? 
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:155:hardcoded variable:	        let fields = [{
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:156:hardcoded string:	            type: 'select',
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:157:hardcoded string:	            name: 'validity',
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:158:hardcoded string:	            label: 'Select Validity',
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:161:hardcoded string:	                {label: '3 Months (2 Sessions)', value: '3'},
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:162:hardcoded string:	                {label: '6 Months (25 Sessions)', value: '6'},
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:163:hardcoded string:	                {label: '12 Months (50 Sessions)', value: '12'}
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:166:hardcoded string:	            message: "Please Select Validity"
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:168:hardcoded string:	            type: 'radio',
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:170:hardcoded string:	            name: 'userProfile',
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:171:hardcoded string:	            label: 'Choose Profile Type',
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:173:hardcoded string:	            message: "Please Choose Profile Type",
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:174:hardcoded string:	            style: { display: 'block', height: '30px', lineHeight: '30px'},
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:181:hardcoded object:	        const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:182:hardcoded variable:	        const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:183:hardcoded string:	        if(name === 'validity') {
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:184:hardcoded string:	            detailsForm && detailsForm.setFieldsValue({ userProfile: ""});
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:187:hardcoded array:	            [name]: value,
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:193:hardcoded object:	        this.setState({ error });
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:199:hardcoded object:	            const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:200:hardcoded variable:	            const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:201:hardcoded string:	            detailsForm && detailsForm.setFieldsValue({ validity: "" });
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:204:hardcoded object:	            this.setState({ productConfig: nextProps.productConfig });
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:209:hardcoded object:	        const { productDetails, productConfig } = this.props;
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:215:hardcoded object:	        this.setState({ productConfig });
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:219:hardcoded object:	        const { error, productConfig, validity } = this.state;
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:220:hardcoded object:	        const { changeNextBtnMode, productCombination, addOnProduct } = this.props;
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:221:hardcoded array:	        const fields = productConfig ? this.getFields() : [];
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:225:hardcoded object:	                <ErrorWrapper error={error} />
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:227:hardcoded string:	                    ref="productDetailsForm"
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:228:hardcoded object:	                    fields={fields}
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:231:hardcoded string:	                    ref='fetchComp'
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:232:hardcoded object:	                    onClickFetchPrices={this.onClickFetchPrices}
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:233:hardcoded object:	                    getProductDetails={this.getProductDetails}
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:234:hardcoded object:	                    changeNextBtnMode={changeNextBtnMode}
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:235:hardcoded object:	                    setError={this.setError}
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:236:hardcoded object:	                    productCombination={productCombination}
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:237:hardcoded object:	                    addOnProduct={addOnProduct}
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:238:hardcoded object:	                    validity={validity}
microservices-middleware/client/src/modules/ordertype/tutor/TutorProductPage.js:244:hardcoded object:	export default connect(mapStateToProps, mapDispatchToProps, null, { forwardRef: true })(TutorOnDemandProduct);