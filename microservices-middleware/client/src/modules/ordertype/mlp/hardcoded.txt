microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:14:hardcoded variable:	const mapStateToProps = state => ({
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:15:hardcoded string:	    authDetails: get(state, 'auth.details'),
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:16:hardcoded string:	    leadDetails: get(state, 'auth.leadDetails'),
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:17:hardcoded string:	    salesDetails: get(state, "details.salesDetails"),
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:18:hardcoded string:	    identifier: get(state, 'details.identifier'),
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:19:hardcoded string:	    existingProfiles: get(state, 'product.existingProfiles'),
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:20:hardcoded string:	    showProfileSelectionOption: get(state, 'product.showProfileSelectionOption'),
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:21:hardcoded string:	    productDetails: get(state, 'product.details'),
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:22:hardcoded string:	    reviewProductDetails: get(state, 'product.reviewDetails'),
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:23:hardcoded string:	    productConfig: get(state, 'product.config'),
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:24:hardcoded string:	    loading: get(state, 'product.loading'),
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:25:hardcoded string:	    error: get(state, 'product.error'),
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:28:hardcoded variable:	const mapDispatchToProps = dispatch => ({
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:52:hardcoded object:	            productConfig: {},
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:53:hardcoded array:	            fields: [],
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:54:hardcoded string:	            classType: "neo",
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:60:hardcoded object:	        const { identifier, existingProfiles } = this.props;
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:61:hardcoded object:	        const { productDetailsForm, byjusClassesDetailsForm } = this.refs;
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:62:hardcoded array:	        let bhlpCourseDetails = [], mentoringDetails = [];
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:64:hardcoded variable:	        const details = await productDetailsForm.getProductDetails();
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:65:hardcoded variable:	        const byjusClassesFormValue = byjusClassesDetailsForm && await byjusClassesDetailsForm.getMentoringValues();
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:67:hardcoded string:	        let productDetails = get(details, 'productDetails');
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:69:hardcoded variable:	        const response = validateByjusClassesMentoringDetails(byjusClassesFormValue, productDetails);
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:70:hardcoded string:	        mentoringDetails = get(response, "byjusClassesMentoringDetails", []);
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:71:hardcoded string:	        bhlpCourseDetails = get(response, "bhlpCourseDetails", []);
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:76:hardcoded number:	        if (existingProfiles.length > 0 && productDetails) {
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:77:hardcoded variable:	            const isValidate = validateProfileSelection(productDetails);
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:82:hardcoded variable:	            const payload = {
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:84:hardcoded string:	                productType: 'single',
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:91:hardcoded string:	                url: '/api/mlp/single'
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:97:hardcoded object:	        const { identifier } = this.props;
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:98:hardcoded variable:	        const payload = {
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:106:hardcoded string:	                url: '/api/mlp/storeProductDetails',
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:107:hardcoded string:	                method: 'POST',
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:110:hardcoded string:	                const { productDetails, cashbackDetails } = get(response, 'data', {});
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:114:hardcoded object:	                this.setState({ error: null });
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:116:hardcoded string:	                this.navigateToScreen('address');
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:118:hardcoded object:	                this.setState({ error });
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:125:hardcoded object:	        const { history } = this.props;
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:126:hardcoded string:	        const url = `/${path}${get(history, 'location.search')}`;
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:135:hardcoded object:	        const { fetchComp } = this.refs;
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:137:hardcoded object:	            const { status, productDetails } = fetchComp.getProductsAndFinalPrice();
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:139:hardcoded string:	                if (status && productDetails && (get(productDetails, 'finalPrice') >= 0)) {
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:143:hardcoded string:	                    this.setState({ error: 'Product Details Missing' });
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:146:hardcoded string:	                const errMsg = get(error, 'message', 'Error') || error;
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:147:hardcoded object:	                this.setState({ error: errMsg });
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:153:hardcoded array:	        const { classes = [] } = selectedBoardConfig;
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:155:hardcoded string:	        let classOptions = cloneDeep(classes.map((opt) => get(opt, 'value')));
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:156:hardcoded string:	        classOptions = classOptions.filter(ele => ['4','5','6','7','8','9','10'].includes(ele.value))
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:162:hardcoded string:	        let boards = get(selectedCourseConfig, 'boards')
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:163:hardcoded string:	        boards = boards.filter(board => board.value == "CBSE")
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:172:hardcoded object:	        const { showProfileSelectionOption, existingProfiles } = this.props;
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:173:hardcoded string:	        !selectedCourse && this.handleChanges('K10/K12', 'course');
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:174:hardcoded string:	        !selectedCourseType && this.handleChanges('regular', 'courseType');
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:175:hardcoded object:	        const { productType, user, productCombination } = this.props;
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:176:hardcoded array:	        const {Courses = [], Boards = [] } = productConfig || {};
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:177:hardcoded object:	        const selectedCourseConfig = find(Courses, { formattedName: selectedCourse }) || {};
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:178:hardcoded object:	        const selectedBoardConfig = find(Boards, { formattedName: selectedBoard }) || {};
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:180:hardcoded variable:	        let fields = [{
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:181:hardcoded string:	            type: 'select',
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:182:hardcoded string:	            name: 'board',
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:183:hardcoded string:	            label: 'Select Board',
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:187:hardcoded string:	            message: "Please Select Board"
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:189:hardcoded string:	            type: 'select',
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:190:hardcoded string:	            name: 'initialClass',
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:191:hardcoded string:	            label: 'Select Grade',
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:195:hardcoded string:	            message: "Please Select Class"
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:197:hardcoded string:	            type: 'select',
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:198:hardcoded string:	            options: [{ label: "1", value: "1" }, { label: "2", value: "2" }, { label: "3", value: "3" }],
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:199:hardcoded string:	            name: 'session',
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:200:hardcoded string:	            label: 'Select Number Of Session',
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:203:hardcoded string:	            message: "Please Select Number of Session",
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:206:hardcoded string:	            type: (showProfileSelectionOption && existingProfiles.length > 0 ? 'radio' : 'hidden'),
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:208:hardcoded string:	            name: 'userProfile',
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:209:hardcoded string:	            label: 'Choose Profile Type',
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:211:hardcoded string:	            message: "Please Choose Profile Type",
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:213:hardcoded string:	                display: 'block',
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:214:hardcoded string:	                height: '30px',
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:215:hardcoded string:	                lineHeight: '30px',
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:217:hardcoded number:	            required: (showProfileSelectionOption && existingProfiles.length > 0 ? true : false)
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:223:hardcoded object:	        const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:224:hardcoded variable:	        const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:227:hardcoded string:	        if (name == "board") {
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:228:hardcoded string:	            detailsForm && detailsForm.setFieldsValue({ initialClass: "", session: "" });
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:231:hardcoded string:	        if (name == "initialClass") {
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:232:hardcoded string:	            detailsForm && detailsForm.setFieldsValue({ session: "" });
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:236:hardcoded array:	            [name]: value,
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:242:hardcoded object:	        this.setState({ isByjusClass: false })
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:243:hardcoded object:	        this.setState({ isByjusClass: true })
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:247:hardcoded object:	        this.setState({ error });
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:253:hardcoded object:	            const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:254:hardcoded variable:	            const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:255:hardcoded string:	            detailsForm && detailsForm.setFieldsValue({ initialClass: "" });
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:258:hardcoded object:	            this.setState({ productConfig: nextProps.productConfig });
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:263:hardcoded object:	        const { productDetails, productConfig, productType, authDetails } = this.props;
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:265:hardcoded string:	        if (productType === get(productDetails, 'productType')) {
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:266:hardcoded string:	            const formValues = get(productDetails, 'students[0].formValues');
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:270:hardcoded string:	                course: get(formValues, 'course'),
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:271:hardcoded string:	                board: get(formValues, 'board'),
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:272:hardcoded string:	                initialClass: get(formValues, 'initialClass'),
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:273:hardcoded string:	                subCourse: get(formValues, 'subCourse'),
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:279:hardcoded string:	        this.setState({ productConfig, course: 'K10/K12' });
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:284:hardcoded object:	        const { error, productConfig, initialClass, board, validity, session, isByjusClass, classType } = this.state;
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:285:hardcoded object:	        const { changeNextBtnMode, productType, productCombination, identifier } = this.props;
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:286:hardcoded array:	        const fields = productConfig ? this.getFields() : [];
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:290:hardcoded object:	                <ErrorWrapper error={error} />
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:292:hardcoded string:	                    ref="productDetailsForm"
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:293:hardcoded object:	                    productType={productType}
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:294:hardcoded object:	                    fields={fields}
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:295:hardcoded object:	                    initialValues={{}}
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:300:hardcoded string:	                        ref="byjusClassesDetailsForm"
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:301:hardcoded object:	                        identifier={identifier}
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:302:hardcoded object:	                        initialClass={initialClass}
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:303:hardcoded object:	                        board={board}
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:304:hardcoded object:	                        classType={classType}
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:305:hardcoded object:	                        productType={productType}
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:306:hardcoded object:	                        validity={validity}
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:307:hardcoded object:	                        session={session}
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:308:hardcoded string:	                        productCombination="mini_learning_program" />
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:312:hardcoded string:	                    ref='fetchComp'
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:313:hardcoded object:	                    onClickFetchPrices={this.onClickFetchPrices}
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:314:hardcoded object:	                    getProductDetails={this.getProductDetails}
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:315:hardcoded object:	                    changeNextBtnMode={changeNextBtnMode}
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:316:hardcoded object:	                    setError={this.setError}
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:317:hardcoded object:	                    productCombination={productCombination}
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:318:hardcoded object:	                    validity={validity}
microservices-middleware/client/src/modules/ordertype/mlp/MlpProductPage.js:324:hardcoded object:	export default connect(mapStateToProps, mapDispatchToProps, null, { forwardRef: true })(MlpSingleProduct);