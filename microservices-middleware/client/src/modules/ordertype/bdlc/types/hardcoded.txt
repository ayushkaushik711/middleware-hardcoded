microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:18:hardcoded variable:	const mapStateToProps = state => ({
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:19:hardcoded string:	    authDetails: get(state, 'auth.details'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:20:hardcoded string:	    leadDetails: get(state, 'auth.leadDetails'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:21:hardcoded string:	    salesDetails: get(state, "details.salesDetails"),
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:22:hardcoded string:	    identifier: get(state, 'details.identifier'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:23:hardcoded string:	    existingProfiles: get(state, 'product.existingProfiles'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:24:hardcoded string:	    showProfileSelectionOption: get(state, 'product.showProfileSelectionOption'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:25:hardcoded string:	    productDetails: get(state, 'product.details'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:26:hardcoded string:	    reviewProductDetails: get(state, 'product.reviewDetails'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:27:hardcoded string:	    productConfig: get(state, 'product.config'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:28:hardcoded string:	    loading: get(state, 'product.loading'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:29:hardcoded string:	    error: get(state, 'product.error'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:32:hardcoded variable:	const mapDispatchToProps = dispatch => ({
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:56:hardcoded object:	            productConfig: {},
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:57:hardcoded array:	            fields: [],
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:58:hardcoded string:	            classType: "neo",
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:64:hardcoded object:	        const { course } = this.state;
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:65:hardcoded object:	        const { identifier, existingProfiles, productCombination, leadDetails } = this.props;
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:66:hardcoded object:	        const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:68:hardcoded variable:	        const details = await productDetailsForm.getProductDetails();
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:69:hardcoded string:	        let productDetails = get(details, 'productDetails');
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:71:hardcoded string:	        if (productDetails && !productDetails.course) productDetails["course"] = course;
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:73:hardcoded number:	        if (existingProfiles.length > 0 && productDetails) {
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:74:hardcoded variable:	            const isValidate = validateProfileSelection(productDetails);
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:77:hardcoded string:	        let workshopChannel = get(leadDetails, 'Workshop_channel', '')
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:79:hardcoded variable:	            const payload = {
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:81:hardcoded string:	                productType: 'combo',
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:84:hardcoded string:	                couponDetails: get(details, 'couponDetails'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:86:hardcoded string:	                loggedInMobile: get(leadDetails, 'studentMobile', '')
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:90:hardcoded string:	                url: '/api/byjusdlc/combo'
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:96:hardcoded object:	        const { identifier } = this.props;
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:97:hardcoded variable:	        const payload = {
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:105:hardcoded string:	                url: '/api/byjusdlc/storeProductDetails',
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:106:hardcoded string:	                method: 'POST',
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:109:hardcoded string:	                const { productDetails, cashbackDetails } = get(response, 'data', {});
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:113:hardcoded object:	                this.setState({ error: null });
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:115:hardcoded string:	                this.navigateToScreen('address');
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:117:hardcoded object:	                this.setState({ error });
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:124:hardcoded object:	        const { history } = this.props;
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:125:hardcoded string:	        const url = `/${path}${get(history, 'location.search')}`;
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:134:hardcoded object:	        const { fetchComp } = this.refs;
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:136:hardcoded object:	            const { status, productDetails } = fetchComp.getProductsAndFinalPrice();
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:138:hardcoded string:	                if (status && productDetails && (get(productDetails, 'finalPrice') >= 0)) {
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:142:hardcoded string:	                    this.setState({ error: 'Product Details Missing' });
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:145:hardcoded string:	                const errMsg = get(error, 'message', 'Error') || error;
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:146:hardcoded object:	                this.setState({ error: errMsg });
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:154:hardcoded object:	        const { showProfileSelectionOption, existingProfiles, authDetails, leadDetails, salesDetails } = this.props;    
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:155:hardcoded string:	        !selectedCourse && this.handleChanges('K10/K12', 'course');
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:156:hardcoded string:	        !selectedCourseType && this.handleChanges('regular', 'courseType');
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:157:hardcoded object:	        const { productType, user, productCombination } = this.props;
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:158:hardcoded array:	        const { Courses = [], Boards = [], Products = [] } = productConfig || {};
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:159:hardcoded object:	        const selectedCourseConfig = find(Courses, { formattedName: selectedCourse }) || {};
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:160:hardcoded object:	        const selectedBoardConfig = find(Boards, { formattedName: selectedBoard }) || {};
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:161:hardcoded string:	        const classes = getClasses(selectedBoardConfig, user, '', productLearningType, leadDetails, salesDetails );
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:163:hardcoded string:	        const { env } = get(this.props, "authDetails", {});
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:164:hardcoded string:	        const userPermissions = get(user, 'permissions', []);
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:165:hardcoded number:	        const  isPriviledgedUser  = userPermissions.indexOf(productPermissions.ignoreValidityCheck) >= 0;
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:166:hardcoded object:	        const { featureEnableList } = authDetails;
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:167:hardcoded string:	        const isDevEnv = env != "production" ? true : false;
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:168:hardcoded object:	        const productConfiguration = find(Products, { formattedName: productType }) || {};
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:169:hardcoded object:	        const { validity } = productConfiguration || {};
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:171:hardcoded variable:	        let fields = [{
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:172:hardcoded string:	            type: 'select',
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:173:hardcoded string:	            name: 'board',
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:174:hardcoded string:	            label: 'Select Board',
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:176:hardcoded string:	            options: get(selectedCourseConfig, 'boards'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:178:hardcoded string:	            message: "Please select Board",
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:180:hardcoded string:	            type: selectedBoard === "STATE" ? 'select' : 'hidden',
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:181:hardcoded string:	            name: 'state',
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:182:hardcoded string:	            label: 'Select State',
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:183:hardcoded string:	            required: selectedBoard === "STATE",
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:184:hardcoded string:	            options: get(selectedBoardConfig, 'states'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:186:hardcoded string:	            message: "Please select State"
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:188:hardcoded string:	            type: 'select',
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:189:hardcoded string:	            name: 'initialClass',
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:190:hardcoded string:	            label: 'Select Grade',
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:194:hardcoded string:	            message: "Please Select Class"
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:196:hardcoded string:	            type: (productType === 'combo') ? 'select' : "hidden",
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:197:hardcoded string:	            name: 'finalClass',
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:198:hardcoded string:	            label: "Select Final Grade",
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:199:hardcoded string:	            required: (productType === 'combo') ? true : false,
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:200:hardcoded object:	            options: filterFinalClass({ classes, selectedInitialClass, featureEnableList, env, productType, productCombination }),
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:202:hardcoded string:	            message: "Please Select Final Grade"
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:204:hardcoded string:	            type: 'select',
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:205:hardcoded string:	            options: getValidityOptions({ selectedInitialClass, productType: "single", isDevEnv, validity, state, selectedBoard, isPriviledgedUser }),
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:206:hardcoded string:	            name: 'validity',
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:207:hardcoded string:	            label: 'Select Initial Validity',
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:209:hardcoded string:	            message: "Please Select Initial Validity"
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:211:hardcoded string:	            type: "select",
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:213:hardcoded string:	            name: "tablet",
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:214:hardcoded string:	            label: "Select Tablet",
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:216:hardcoded string:	            message: "Please select Tablet",
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:219:hardcoded string:	            type: (showProfileSelectionOption && existingProfiles.length > 0 ? 'radio' : 'hidden'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:221:hardcoded string:	            name: 'userProfile',
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:222:hardcoded string:	            label: 'Choose Profile Type',
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:224:hardcoded string:	            message: "Please Choose Profile Type",
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:226:hardcoded string:	                display: 'block',
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:227:hardcoded string:	                height: '30px',
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:228:hardcoded string:	                lineHeight: '30px',
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:230:hardcoded number:	            required: (showProfileSelectionOption && existingProfiles.length > 0 ? true : false)
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:236:hardcoded object:	        const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:237:hardcoded variable:	        const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:240:hardcoded string:	        if (name == "board") {
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:241:hardcoded string:	            detailsForm && detailsForm.setFieldsValue({ initialClass: "" });
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:244:hardcoded string:	        if (name == "initialClass") {
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:245:hardcoded string:	            detailsForm && detailsForm.setFieldsValue({ finalClass: "" });
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:248:hardcoded string:	        if (name == "finalClass") {
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:249:hardcoded string:	            detailsForm && detailsForm.setFieldsValue({ validity: "" });
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:253:hardcoded array:	            [name]: value,
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:259:hardcoded object:	        this.setState({ error });
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:265:hardcoded object:	            const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:266:hardcoded variable:	            const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:267:hardcoded string:	            detailsForm && detailsForm.setFieldsValue({ initialClass: "" });
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:270:hardcoded object:	            this.setState({ productConfig: nextProps.productConfig });
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:275:hardcoded object:	        const { productDetails, productConfig, productType, authDetails } = this.props;
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:277:hardcoded string:	        if (productType === get(productDetails, 'productType')) {
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:278:hardcoded string:	            const formValues = get(productDetails, 'students[0].formValues');
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:282:hardcoded string:	                course: get(formValues, 'course'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:283:hardcoded string:	                board: get(formValues, 'board'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:284:hardcoded string:	                initialClass: get(formValues, 'initialClass'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:285:hardcoded string:	                subCourse: get(formValues, 'subCourse'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:291:hardcoded string:	        this.setState({ productConfig, course: 'K10/K12' });
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:296:hardcoded object:	        const { error, productConfig, initialClass, board, validity } = this.state;
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:297:hardcoded object:	        const { changeNextBtnMode, productType, productCombination, identifier } = this.props;
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:298:hardcoded array:	        const fields = productConfig ? this.getFields() : [];
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:302:hardcoded object:	                <ErrorWrapper error={error} />
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:304:hardcoded string:	                    ref="productDetailsForm"
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:305:hardcoded object:	                    productType={productType}
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:306:hardcoded object:	                    fields={fields}
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:307:hardcoded object:	                    initialValues={{}}
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:310:hardcoded string:	                    ref='fetchComp'
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:311:hardcoded object:	                    onClickFetchPrices={this.onClickFetchPrices}
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:312:hardcoded object:	                    getProductDetails={this.getProductDetails}
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:313:hardcoded object:	                    changeNextBtnMode={changeNextBtnMode}
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:314:hardcoded object:	                    setError={this.setError}
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:315:hardcoded object:	                    productCombination={productCombination}
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:316:hardcoded object:	                    validity={validity}
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:317:hardcoded object:	                    productType={productType}
microservices-middleware/client/src/modules/ordertype/bdlc/types/ComboProduct.js:323:hardcoded object:	export default connect(mapStateToProps, mapDispatchToProps, null, { forwardRef: true })(BDLPComboProduct);microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:18:hardcoded variable:	const mapStateToProps = state => ({
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:19:hardcoded string:	    authDetails: get(state, 'auth.details'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:20:hardcoded string:	    leadDetails: get(state, 'auth.leadDetails'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:21:hardcoded string:	    salesDetails: get(state, "details.salesDetails"),
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:22:hardcoded string:	    identifier: get(state, 'details.identifier'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:23:hardcoded string:	    existingProfiles: get(state, 'product.existingProfiles'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:24:hardcoded string:	    showProfileSelectionOption: get(state, 'product.showProfileSelectionOption'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:25:hardcoded string:	    productDetails: get(state, 'product.details'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:26:hardcoded string:	    reviewProductDetails: get(state, 'product.reviewDetails'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:27:hardcoded string:	    productConfig: get(state, 'product.config'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:28:hardcoded string:	    loading: get(state, 'product.loading'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:29:hardcoded string:	    error: get(state, 'product.error'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:32:hardcoded variable:	const mapDispatchToProps = dispatch => ({
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:56:hardcoded object:	            productConfig: {},
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:57:hardcoded array:	            fields: [],
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:58:hardcoded string:	            classType: "neo",
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:64:hardcoded string:	        const { course, tabletId = "", tablet } = this.state;
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:65:hardcoded object:	        const { identifier, existingProfiles, productCombination, authDetails, leadDetails } = this.props;
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:66:hardcoded object:	        const { productDetailsForm, byjusClassesDetailsForm } = this.refs;
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:68:hardcoded variable:	        const details = await productDetailsForm.getProductDetails();
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:69:hardcoded string:	        let productDetails = get(details, 'productDetails');
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:71:hardcoded string:	        if (productDetails && !productDetails.course) productDetails["course"] = course;
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:73:hardcoded number:	        if (existingProfiles.length > 0 && productDetails) {
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:74:hardcoded variable:	            const isValidate = validateProfileSelection(productDetails);
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:77:hardcoded string:	        let workshopChannel = get(leadDetails, 'Workshop_channel', '') || get(leadDetails, 'workshopChannel', '');
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:79:hardcoded variable:	            const payload = {
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:81:hardcoded string:	                productType: 'single',
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:84:hardcoded string:	                couponDetails: get(details, 'couponDetails'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:86:hardcoded string:	                loggedInMobile: get(leadDetails, 'studentMobile', '')
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:90:hardcoded string:	                url: '/api/byjusdlc/single'
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:96:hardcoded object:	        const { identifier } = this.props;
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:97:hardcoded variable:	        const payload = {
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:105:hardcoded string:	                url: '/api/byjusdlc/storeProductDetails',
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:106:hardcoded string:	                method: 'POST',
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:109:hardcoded string:	                const { productDetails, cashbackDetails } = get(response, 'data', {});
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:113:hardcoded object:	                this.setState({ error: null });
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:115:hardcoded string:	                this.navigateToScreen('address');
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:117:hardcoded object:	                this.setState({ error });
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:124:hardcoded object:	        const { history } = this.props;
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:125:hardcoded string:	        const url = `/${path}${get(history, 'location.search')}`;
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:134:hardcoded object:	        const { fetchComp } = this.refs;
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:136:hardcoded object:	            const { status, productDetails } = fetchComp.getProductsAndFinalPrice();
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:138:hardcoded string:	                if (status && productDetails && (get(productDetails, 'finalPrice') >= 0)) {
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:142:hardcoded string:	                    this.setState({ error: 'Product Details Missing' });
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:145:hardcoded string:	                const errMsg = get(error, 'message', 'Error') || error;
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:146:hardcoded object:	                this.setState({ error: errMsg });
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:155:hardcoded object:	        const { showProfileSelectionOption, existingProfiles, leadDetails = {} } = this.props;
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:156:hardcoded string:	        !selectedCourse && this.handleChanges('K10/K12', 'course');
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:157:hardcoded string:	        !selectedCourseType && this.handleChanges('regular', 'courseType');
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:158:hardcoded object:	        const { productType, user, productCombination } = this.props;
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:159:hardcoded number:	        const { Courses = [], Boards = [], Products = [], D4EligibleManagers = [], Tablets = [], } = productConfig || {};
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:160:hardcoded object:	        const selectedCourseConfig = find(Courses, { formattedName: selectedCourse }) || {};
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:161:hardcoded object:	        const selectedBoardConfig = find(Boards, { formattedName: selectedBoard }) || {};
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:162:hardcoded string:	        const { env } = get(this.props, "authDetails", {});
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:163:hardcoded string:	        const userPermissions = get(user, 'permissions', []);
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:164:hardcoded number:	        const isPriviledgedUser = userPermissions.indexOf(productPermissions.ignoreValidityCheck) >= 0;
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:165:hardcoded string:	        const isDevEnv = env != "production" ? true : false;
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:166:hardcoded object:	        const productConfiguration = find(Products, { formattedName: productType }) || {};
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:167:hardcoded object:	        const { validity, tablets } = productConfiguration || {};
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:169:hardcoded variable:	        let fields = [{
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:170:hardcoded string:	            type: 'select',
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:171:hardcoded string:	            name: 'board',
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:172:hardcoded string:	            label: 'Select Board',
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:174:hardcoded string:	            options: get(selectedCourseConfig, 'boards'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:176:hardcoded string:	            message: "Please select Board",
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:178:hardcoded string:	            type: selectedBoard === "STATE" ? 'select' : 'hidden',
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:179:hardcoded string:	            name: 'state',
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:180:hardcoded string:	            label: 'Select State',
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:181:hardcoded string:	            required: selectedBoard === "STATE",
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:182:hardcoded string:	            options: get(selectedBoardConfig, 'states'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:184:hardcoded string:	            message: "Please select State"
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:186:hardcoded string:	            type: 'select',
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:187:hardcoded string:	            name: 'initialClass',
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:188:hardcoded string:	            label: 'Select Grade',
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:192:hardcoded string:	            message: "Please Select Class"
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:194:hardcoded string:	            type: 'select',
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:195:hardcoded string:	            options: getValidityOptions({ selectedInitialClass, productType: "single", isDevEnv, validity, state, selectedBoard, isPriviledgedUser }),
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:196:hardcoded string:	            name: 'validity',
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:197:hardcoded string:	            label: 'Select Initial Validity',
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:199:hardcoded string:	            message: "Please Select Initial Validity"
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:201:hardcoded string:	            type: "select",
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:203:hardcoded string:	            name: "tablet",
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:204:hardcoded string:	            label: "Select Tablet",
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:206:hardcoded string:	            message: "Please select Tablet",
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:209:hardcoded string:	            type: (showProfileSelectionOption && existingProfiles.length > 0 ? 'radio' : 'hidden'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:211:hardcoded string:	            name: 'userProfile',
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:212:hardcoded string:	            label: 'Choose Profile Type',
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:214:hardcoded string:	            message: "Please Choose Profile Type",
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:216:hardcoded string:	                display: 'block',
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:217:hardcoded string:	                height: '30px',
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:218:hardcoded string:	                lineHeight: '30px',
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:220:hardcoded number:	            required: (showProfileSelectionOption && existingProfiles.length > 0 ? true : false)
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:226:hardcoded object:	        const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:227:hardcoded variable:	        const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:230:hardcoded string:	        if (name == "board") {
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:231:hardcoded string:	            detailsForm && detailsForm.setFieldsValue({ initialClass: "" });
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:234:hardcoded string:	        if (name == "initialClass") {
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:235:hardcoded string:	            detailsForm && detailsForm.setFieldsValue({ validity: "" });
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:239:hardcoded array:	            [name]: value,
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:245:hardcoded object:	        this.setState({ error });
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:251:hardcoded object:	            const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:252:hardcoded variable:	            const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:253:hardcoded string:	            detailsForm && detailsForm.setFieldsValue({ initialClass: "" });
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:256:hardcoded object:	            this.setState({ productConfig: nextProps.productConfig });
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:261:hardcoded object:	        const { productDetails, productConfig, productType, authDetails } = this.props;
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:263:hardcoded string:	        if (productType === get(productDetails, 'productType')) {
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:264:hardcoded string:	            const formValues = get(productDetails, 'students[0].formValues');
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:268:hardcoded string:	                course: get(formValues, 'course'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:269:hardcoded string:	                board: get(formValues, 'board'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:270:hardcoded string:	                initialClass: get(formValues, 'initialClass'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:271:hardcoded string:	                subCourse: get(formValues, 'subCourse'),
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:277:hardcoded string:	        this.setState({ productConfig, course: 'K10/K12' });
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:282:hardcoded object:	        const { error, productConfig, initialClass, board, validity } = this.state;
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:283:hardcoded object:	        const { changeNextBtnMode, productType, productCombination, identifier } = this.props;
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:284:hardcoded array:	        const fields = productConfig ? this.getFields() : [];
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:288:hardcoded object:	                <ErrorWrapper error={error} />
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:290:hardcoded string:	                    ref="productDetailsForm"
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:291:hardcoded object:	                    productType={productType}
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:292:hardcoded object:	                    fields={fields}
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:293:hardcoded object:	                    initialValues={{}}
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:296:hardcoded string:	                    ref='fetchComp'
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:297:hardcoded object:	                    onClickFetchPrices={this.onClickFetchPrices}
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:298:hardcoded object:	                    getProductDetails={this.getProductDetails}
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:299:hardcoded object:	                    changeNextBtnMode={changeNextBtnMode}
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:300:hardcoded object:	                    setError={this.setError}
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:301:hardcoded object:	                    productCombination={productCombination}
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:302:hardcoded object:	                    validity={validity}
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:303:hardcoded object:	                    productType={productType}
microservices-middleware/client/src/modules/ordertype/bdlc/types/SingleProduct.js:309:hardcoded object:	export default connect(mapStateToProps, mapDispatchToProps, null, { forwardRef: true })(BDLPSingleProduct);