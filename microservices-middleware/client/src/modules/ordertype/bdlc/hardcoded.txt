microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:14:hardcoded variable:	const mapStateToProps = state => ({
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:15:hardcoded string:	    authDetails: get(state, 'auth.details'),
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:16:hardcoded string:	    leadDetails: get(state, 'auth.leadDetails'),
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:17:hardcoded string:	    salesDetails: get(state, "details.salesDetails"),
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:18:hardcoded string:	    identifier: get(state, 'details.identifier'),
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:19:hardcoded string:	    existingProfiles: get(state, 'product.existingProfiles'),
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:20:hardcoded string:	    showProfileSelectionOption: get(state, 'product.showProfileSelectionOption'),
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:21:hardcoded string:	    productDetails: get(state, 'product.details'),
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:22:hardcoded string:	    reviewProductDetails: get(state, 'product.reviewDetails'),
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:23:hardcoded string:	    productConfig: get(state, 'product.config'),
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:24:hardcoded string:	    loading: get(state, 'product.loading'),
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:25:hardcoded string:	    error: get(state, 'product.error'),
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:28:hardcoded variable:	const mapDispatchToProps = dispatch => ({
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:51:hardcoded string:	            selectedProduct: 'single',
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:52:hardcoded string:	            productCombination: 'byjus_digital_learning',
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:54:hardcoded object:	            productConfig: {},
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:55:hardcoded array:	            fields: [],
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:60:hardcoded object:	        const { selectedProduct } = this.state;
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:61:hardcoded array:	        let productOptions = this.getProductOptions() || [];
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:64:hardcoded variable:	        const radioBtnStyle = {
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:65:hardcoded string:	            fontWeight: '500',
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:66:hardcoded string:	            fontSize: 'medium',
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:67:hardcoded string:	            background: '#fcf5ff'
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:70:hardcoded string:	            <RadioGroup onChange={this.onChangeProduct} value={selectedProduct} buttonStyle="solid">
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:71:hardcoded object:	                {productOptions.map(({ label, value }, idx) => (
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:72:hardcoded object:	                    <RadioButton style={radioBtnStyle} value={value} key={idx}>{label}</RadioButton>
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:79:hardcoded string:	        const { value } = get(e, 'target');
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:80:hardcoded object:	        this.setState({ selectedProduct: null }, () => {
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:81:hardcoded object:	            this.setState({ selectedProduct: value, });
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:87:hardcoded array:	        const { Products = [] } = this.props.productConfig || {};
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:88:hardcoded variable:	        const products = Products.map((product) => {
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:89:hardcoded object:	            const { name, formattedName } = product;
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:91:hardcoded object:	                label: `${name}`,
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:99:hardcoded object:	        const { selectedProduct, productCombination, productConfig } = props
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:100:hardcoded variable:	        const compProps = {
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:101:hardcoded string:	            ref: "bdlcProductComponent",
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:107:hardcoded string:	            case 'single': return <SingleProduct productType={selectedProduct} {...compProps} productCombination={productCombination} productConfig={productConfig} />
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:108:hardcoded string:	            case 'combo': return <ComboProduct productType={selectedProduct} {...compProps} productCombination={productCombination} productConfig={productConfig} />
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:114:hardcoded object:	        let { identifier, user } = this.props;
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:115:hardcoded object:	        this.setState({ loading: true });
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:120:hardcoded string:	        this.setState({ selectedProduct: 'single' })
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:129:hardcoded object:	        const { selectedProduct, productCombination, error } = this.state;
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:130:hardcoded object:	        const { productConfig } = this.props; //To render some specific component after the main product details form
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:134:hardcoded object:	                <ErrorWrapper error={error} />
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:135:hardcoded object:	                {this.buildProductOptions()}
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:136:hardcoded object:	                {this.buildProductComponent({ selectedProduct, productCombination, productConfig })}
microservices-middleware/client/src/modules/ordertype/bdlc/ProductPage.js:142:hardcoded object:	export default connect(mapStateToProps, mapDispatchToProps, null, { forwardRef: true })(BDLCProductPage)