microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:1:hardcoded file path:import ErrorWrapper from 'components/ErrorWrapper'
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:2:hardcoded object:import React, { Component } from 'react'
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:3:hardcoded object:import { cloneDeep, find, get, isEmpty } from 'lodash';
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:4:hardcoded object:import { connect } from 'react-redux';
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:6:hardcoded file path:import FetchPrices from '../../../product/components/FetchPrices';
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:7:hardcoded object:import { saveProductDetails, addLoader, removeLoader, resetPrice, saveCashbackDetails } from 'modules/product/productReducer';
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:8:hardcoded object:import { checkIsPrivilegedUser, checkPrivTabletAccess, getAllAvailableTablets, getClasses, getFormattedValidity } from 'modules/product/components/productHelper';
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:9:hardcoded object:import { getCentres, getCities, getStates, getTabletOptions, getPincode } from '../../blc/helper/productHelper'
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:10:hardcoded file path:import ProductDetailsForm from '../../../product/components/ProducDetailsForm';
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:11:hardcoded file path:import CallApi from 'api/callApi';
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:12:hardcoded file path:import BatchDetails from '../BatchDetails';
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:14:hardcoded string:    homeTutionValidity, getSessionOption, getProfileOptions, isUpgradedOrder } from '../helper/productHelper'
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:16:hardcoded variable:const mapStateToProps = state => ({
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:17:hardcoded string:    authDetails: get(state, 'auth.details'),
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:18:hardcoded string:    leadDetails: get(state, 'auth.leadDetails'),
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:19:hardcoded string:    salesDetails: get(state, "details.salesDetails"),
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:20:hardcoded string:    identifier: get(state, 'details.identifier'),
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:21:hardcoded string:    existingProfiles: get(state, 'product.existingProfiles'),
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:22:hardcoded string:    showProfileSelectionOption: get(state, 'product.showProfileSelectionOption'),
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:23:hardcoded string:    productDetails: get(state, 'product.details'),
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:24:hardcoded string:    productConfig: get(state, 'product.config'),
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:25:hardcoded string:    loading: get(state, 'product.loading'),
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:26:hardcoded string:    error: get(state, 'product.error'),
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:29:hardcoded variable:const mapDispatchToProps = dispatch => ({
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:54:hardcoded string:            course: 'K10/K12',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:55:hardcoded object:            productConfig: {},
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:56:hardcoded array:            fields: [],
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:57:hardcoded array:            statesList: [],
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:58:hardcoded array:            cityList: [],
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:59:hardcoded array:            centreList: [],
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:60:hardcoded array:            batchList: [],
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:63:hardcoded string:            batchType: 'weekday'
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:70:hardcoded object:        let { productCombination, identifier, existingProfiles } = this.props;
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:72:hardcoded object:        const { productDetailsForm, homeTutionBatchCard } = this.refs;
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:73:hardcoded variable:        const details = await productDetailsForm.getProductDetails();
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:75:hardcoded string:        let productDetails = get(details, 'productDetails');
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:76:hardcoded string:        if (productDetails && !productDetails.course) productDetails["course"] = course;
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:78:hardcoded object:        const { batch, cohortId, courseAliasId } = homeTutionBatchCard.getRequestedBatchDetails();
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:89:hardcoded variable:        const isBatchSelected = await homeTutionBatchCard.checkBatchSelected();
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:92:hardcoded variable:        const homeTuitionBatchCardDetails = homeTutionBatchCard && await homeTutionBatchCard.getSessionValues();
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:93:hardcoded variable:        const response = validateHomeTuitionBatchAndSessionDetails(homeTuitionBatchCardDetails, productDetails);
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:94:hardcoded string:        const homeTuitionSessionDetails = get(response, "homeTuitionSessionDetails", []);
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:95:hardcoded string:        const homeTuitionBatchDetails = get(response, "homeTuitionBatchDetails", []);
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:98:hardcoded variable:        let isUpgradeOrder = isUpgradedOrder({ selectedUserProfile: userProfile, existingProfiles, selectedBoard,
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:102:hardcoded variable:            const payload = {
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:104:hardcoded string:                productType: 'single',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:105:hardcoded string:                productCombination: 'home_tuition',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:110:hardcoded string:                isUpgradeOrder: get(isUpgradeOrder, "isUpgradeOrder"),
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:111:hardcoded string:                upgradeOrderId: get(isUpgradeOrder, "upgradeOrderId")
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:115:hardcoded string:                url: '/api/hometuition/product/single'
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:121:hardcoded object:        const { identifier } = this.props;
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:122:hardcoded variable:        const payload = {
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:131:hardcoded string:                url: '/api/hometuition/product/storeProductDetails',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:132:hardcoded string:                method: 'POST',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:135:hardcoded string:                const { productDetails, cashbackDetails } = get(response, 'data', {});
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:139:hardcoded object:                this.setState({ error: null });
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:141:hardcoded string:                this.navigateToScreen('address');
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:143:hardcoded object:                this.setState({ error });
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:150:hardcoded object:        const { history } = this.props;
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:151:hardcoded string:        const url = `/${path}${get(history, 'location.search')}`;
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:160:hardcoded object:        const { fetchComp } = this.refs;
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:163:hardcoded object:            const { status, productDetails } = fetchComp.getProductsAndFinalPrice();
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:165:hardcoded string:                if (status && productDetails && (get(productDetails, 'finalPrice') >= 0)) {
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:169:hardcoded string:                    this.setState({ error: 'Product Details Missing' });
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:172:hardcoded string:                const errMsg = get(error, 'message', 'Error') || error;
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:173:hardcoded object:                this.setState({ error: errMsg });
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:179:hardcoded object:        const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:180:hardcoded variable:        const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:182:hardcoded string:            state: '', city: '', centre: '', board: "", stateBoard: "", initialClass: "", validity: "" 
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:184:hardcoded string:        this.setState({ userProfile : ele.target.value, initialClass: "", validity: "" })
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:191:hardcoded string:        let { productConfig, productType, user, authDetails, existingProfiles, productCombination = '', leadDetails = {} } = this.props;
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:192:hardcoded array:        const { Products = [], Courses = [], Boards = [] } = productConfig || {};
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:193:hardcoded string:        !selectedCourse && this.handleChanges('K10/K12', 'course');
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:194:hardcoded object:        const productConfiguration = find(Products, { formattedName: productType }) || {};
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:195:hardcoded object:        const {tablets } = productConfiguration || {};
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:196:hardcoded object:        const selectedCourseConfig = find(Courses, { formattedName: selectedCourse }) || {};
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:197:hardcoded object:        const selectedBoardConfig = find(Boards, { formattedName: selectedBoard }) || {};
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:199:hardcoded variable:        const isPrivilegedUser = checkIsPrivilegedUser(user);
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:200:hardcoded string:        !selectedCourseType && this.handleChanges("regular", "courseType");
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:203:hardcoded variable:        let feilds = [{
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:204:hardcoded string:            type: existingProfiles.length > 0 ? 'radio' : 'hidden',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:206:hardcoded string:            name: 'userProfile',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:207:hardcoded string:            label: 'Choose Profile Type',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:209:hardcoded string:            message: "Please Choose Profile Type",
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:211:hardcoded string:                display: 'block',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:212:hardcoded string:                height: '30px',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:213:hardcoded string:                lineHeight: '30px',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:215:hardcoded number:            required: existingProfiles.length > 0 ? true : false,
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:218:hardcoded string:            type: "select",
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:219:hardcoded string:            name: 'state',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:220:hardcoded string:            label: 'Select State',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:222:hardcoded string:            message: 'Please Select State',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:223:hardcoded array:            options: statesList || [],
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:226:hardcoded string:            type: 'select',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:227:hardcoded string:            name: 'city',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:228:hardcoded string:            label: 'Select City',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:230:hardcoded string:            message: 'Please Select City',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:231:hardcoded array:            options: cityList || [],
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:234:hardcoded string:            type: 'select',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:235:hardcoded string:            name: 'centre',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:236:hardcoded string:            label: 'Select Centre',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:238:hardcoded string:            message: 'Please Select Centre',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:243:hardcoded string:            type: selectedUserProfile ? 'select' : 'hidden',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:244:hardcoded string:            name: 'board',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:245:hardcoded string:            label: 'Select Board',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:247:hardcoded object:            options: getBoards({isDevEnv:window.isDevEnv, selectedCourseConfig, existingProfiles, selectedUserProfile}),
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:249:hardcoded string:            message: "Please Select Board",
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:252:hardcoded string:            type: selectedBoard === "STATE" ? 'select' : 'hidden',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:253:hardcoded string:            name: 'stateBoard',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:254:hardcoded string:            label: 'Select State Board',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:255:hardcoded string:            required: selectedBoard === "STATE",
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:256:hardcoded object:            options: filterStateBoards({isDevEnv:window.isDevEnv, selectedBoardConfig, existingProfiles, selectedUserProfile }),
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:259:hardcoded string:            message: "Please select State"
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:261:hardcoded string:            type: window.isDevEnv ? (selectedUserProfile ? 'select' : 'hidden') : 'select',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:262:hardcoded string:            name: 'initialClass',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:263:hardcoded string:            label: 'Select Class',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:269:hardcoded string:            message: "Please select Class"
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:271:hardcoded string:            type: 'select',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:273:hardcoded string:            name: 'validity',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:274:hardcoded string:            label: 'Select Validity',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:278:hardcoded string:            message: 'Please Select Validity'
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:280:hardcoded string:            type: 'hidden',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:281:hardcoded string:            name: 'batchType',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:282:hardcoded string:            label: 'Batch Type',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:286:hardcoded string:            options: [{ label: 'Week Day', value: 'weekday' }, { label: 'Week End', value: 'weekend' }],
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:287:hardcoded string:            message: 'Please select batch type'
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:289:hardcoded string:            type: ["quarterly_pack", "1_month_pack"].includes(selectedValidity) ? 'select' : 'hidden',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:290:hardcoded object:            options: checkPrivTabletAccess(leadDetails, user) ? getAllAvailableTablets() : getTabletOptions({ tablets, isPrivilegedUser, authDetails, selectedClass, productCombination }),
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:291:hardcoded string:            name: 'tablet',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:292:hardcoded string:            label: 'Select Tablet',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:294:hardcoded string:            message: "Please select Tablet",
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:297:hardcoded string:            type: ["quarterly_pack", "1_month_pack"].includes(selectedValidity) ? 'select' : 'hidden',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:298:hardcoded object:            options: getSessionOption({ selectedClass, selectedBoardConfig, selectedValidity }),
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:299:hardcoded string:            name: 'session',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:300:hardcoded string:            label: 'Number of Sessions Per week',
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:301:hardcoded string:            required: ["quarterly_pack", "1_month_pack"].includes(selectedValidity) ? true : false,
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:303:hardcoded string:            message: "Please Select Number of Session",
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:311:hardcoded object:        const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:312:hardcoded variable:        const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:315:hardcoded object:        this.setState({ loading: true });
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:317:hardcoded string:        if (name === 'state') {
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:318:hardcoded object:            const { statesList } = this.state;
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:319:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ city: '', centre: '', board: "", stateBoard: "" });
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:320:hardcoded string:            this.setState({ cityList: [], centreList: [], city: '', centre: '' })
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:321:hardcoded object:            const { label } = statesList.find(obj => obj.value === value)
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:322:hardcoded object:            const { cityList, error } = await getCities(value, label);
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:323:hardcoded object:            this.setState({ cityList: cityList, stateName: label, error })
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:325:hardcoded string:        else if (name === 'city') {
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:326:hardcoded object:            const { cityList } = this.state;
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:327:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ centre: '' });
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:328:hardcoded string:            this.setState({ centre: '' });
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:329:hardcoded object:            const { label } = cityList.find(obj => obj.value === value)
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:330:hardcoded object:            const { centreList, error } = await getCentres(value, label);
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:332:hardcoded object:            this.setState({ centreList: centreList, cityName: label, error });
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:334:hardcoded string:        else if (name === 'centre') {
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:335:hardcoded object:            const { centreList } = this.state;
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:336:hardcoded object:            const { label } = centreList.find(obj => obj.value === value)
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:337:hardcoded object:            this.setState({ centreName: label })
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:340:hardcoded string:        if(name === "initialClass") {
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:341:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ session: "", tablet: "" });
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:342:hardcoded string:            this.setState({ session: '' })
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:345:hardcoded string:        if (name === "board" || name === "stateBoard") {
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:346:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ initialClass: "", validity: "" });
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:347:hardcoded string:            this.setState({ initialClass: "", validity: ""});
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:351:hardcoded array:            [name]: value,
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:354:hardcoded string:            isBatchAvailable: ['batchType', 'tablet', undefined].includes(name) ? true : false
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:360:hardcoded object:        this.setState({ batchType: false })
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:363:hardcoded string:            batchType: "weekday"
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:369:hardcoded object:        this.setState({ loading: true });
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:370:hardcoded object:        const { productDetails, productConfig, productType } = this.props;
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:371:hardcoded variable:        const stateList = await getStates();
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:372:hardcoded object:        this.setState({ statesList: stateList })
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:373:hardcoded string:        if (productType === get(productDetails, 'productType')) {
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:374:hardcoded string:            const formValues = get(productDetails, 'students[0].formValues');
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:378:hardcoded string:                course: get(formValues, 'course'),
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:379:hardcoded string:                board: get(formValues, 'board'),
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:380:hardcoded string:                initialClass: get(formValues, 'initialClass'),
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:381:hardcoded string:                subCourse: get(formValues, 'subCourse'),
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:387:hardcoded string:        this.setState({ productConfig, course: 'K10/K12' });
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:388:hardcoded object:        this.setState({ loading: false });
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:393:hardcoded object:        this.setState({ error });
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:397:hardcoded object:        const { error, validity, batchType, board, initialClass, stateBoard, centre, session } = this.state;
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:398:hardcoded object:        const { productType, productConfig, productCombination, changeNextBtnMode, authDetails } = this.props;
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:399:hardcoded array:        const fields = productConfig ? this.getFields() : [];
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:400:hardcoded string:        const isSessionRequired = ['quarterly_pack', '1_month_pack'].includes(validity) ? session : true
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:401:hardcoded variable:        const isBatchAvailable = initialClass && board && batchType && validity && isSessionRequired
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:404:hardcoded object:                <ErrorWrapper error={error} />
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:406:hardcoded string:                    ref="productDetailsForm"
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:407:hardcoded object:                    productType={productType}
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:408:hardcoded object:                    fields={fields}
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:410:hardcoded string:                        batchType: 'weekday'
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:414:hardcoded string:                    ref="homeTutionBatchCard"
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:415:hardcoded object:                    initialClass={initialClass}
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:416:hardcoded object:                    board={board}
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:417:hardcoded object:                    stateBoard={stateBoard}
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:418:hardcoded object:                    batchType={batchType}
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:419:hardcoded object:                    centreId={centre}
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:420:hardcoded object:                    validity={validity}
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:421:hardcoded object:                    authDetails={authDetails}
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:422:hardcoded object:                    productCombination={productCombination}
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:425:hardcoded string:                    ref='fetchComp'
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:426:hardcoded object:                    onClickFetchPrices={this.onClickFetchPrices}
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:427:hardcoded object:                    getProductDetails={this.getProductDetails}
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:428:hardcoded object:                    changeNextBtnMode={changeNextBtnMode}
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:429:hardcoded object:                    productType={productType}
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:430:hardcoded object:                    setError={this.setError}
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:431:hardcoded object:                    productCombination={productCombination}
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:432:hardcoded object:                    validity={validity}
microservices-middleware/client/src/modules/ordertype/hometuition/types/SingleProduct.js:439:hardcoded object:export default connect(mapStateToProps, mapDispatchToProps, null, { forwardRef: true })(SingleProduct)