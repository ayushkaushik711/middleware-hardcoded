microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:6:hardcoded string:	} from 'modules/product/utils/productConstant';
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:11:hardcoded string:	} from 'modules/product/components/productHelper';
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:17:hardcoded variable:	export const getMiddleEastCountries = async () => {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:18:hardcoded array:	    let countries = [];
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:19:hardcoded array:	    let countriesList = [];
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:21:hardcoded string:	        url: '/api/middleeast/getMiddleEastCountries',
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:22:hardcoded string:	        method: 'GET',
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:24:hardcoded object:	        const { data } = response
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:28:hardcoded variable:	        let options = {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:38:hardcoded variable:	export const getComboFormFields = (details) => {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:39:hardcoded object:	    const { state, props, handleChanges, handleClassBlurEvent, addTLPCourses } = details;
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:42:hardcoded object:	    const { productType, user, productCombination, authDetails, salesDetails, leadDetails } = props;
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:43:hardcoded object:	    const { env } = authDetails;
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:44:hardcoded string:	    const isDevEnv = ['development', "local"].includes(env)
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:46:hardcoded string:	    let productLearningType = get(state, "productLearningType", "");
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:47:hardcoded variable:	    const isPrivilegedUser = checkIsPrivilegedUser(user)
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:49:hardcoded array:	    const { Boards = [] } = productConfig || {};
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:50:hardcoded string:	    const selectedBoardConfig = find(Boards, { formattedName: selectedBoard === "IGCSE" ? "CBSE" : selectedBoard }) || {};
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:52:hardcoded string:	    const classes = getClasses(selectedBoardConfig, user, '', productLearningType, leadDetails, salesDetails);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:53:hardcoded variable:	    const classesConfig = selectedBoardConfig.classes;
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:55:hardcoded variable:	    const mentoringClassMap = getMentoringClassMap(selectedBoardConfig.classes);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:56:hardcoded variable:	    const oneToManyMentoringClassMap = getOneToManyMentoringClassMap(selectedBoardConfig.classes);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:57:hardcoded variable:	    const byjusClassesMap = getByjusClassesMap(selectedBoardConfig.classes);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:59:hardcoded variable:	    const isTlpBocp = ELIGIBLE_COMBINATIONS_FOR_TLP_PLUS_BYJUS_CLASSES.includes(productLearningType)
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:60:hardcoded variable:	    const isAdvancePlusTlp = ELIGIBLE_COMBINATIONS_FOR_TLP_PLUS_BYJUS_CLASSES_PLUS_TLP.includes(productLearningType)
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:62:hardcoded string:	    if (["byjus_tlp"].includes(productCombination)) {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:68:hardcoded string:	            type: productLearningType && selectedBoard ? 'select' : 'hidden',
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:69:hardcoded string:	            name: 'initialClass',
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:70:hardcoded string:	            label: getInitialFinalGradeLabel(productLearningType, "Initial"),
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:72:hardcoded string:	            options: productLearningType && selectedBoard ? filterMeInitialClass({ classes, productType: "combo", productCombination: productLearningType, isPrivilegedUser, classType, authDetails, board: selectedBoard, isDevEnv }) : [],
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:74:hardcoded string:	            message: (isTlpBocp) ? 'Please Select Byjus Classes - Initial Grade' : "Please Select Initial Grade"
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:76:hardcoded string:	            type: productLearningType && selectedBoard ? 'select' : 'hidden',
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:77:hardcoded string:	            name: 'finalClass',
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:78:hardcoded string:	            label: getInitialFinalGradeLabel(productLearningType, "Final"),
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:80:hardcoded string:	            options: productLearningType && selectedBoard ? filterMeFinalClass({ classes, selectedInitialClass, productType: "combo", classesConfig, productCombination: productLearningType, classType, authDetails, board: selectedBoard, isDevEnv }) : [],
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:83:hardcoded string:	            message: (isTlpBocp) ? 'Please Select Byjus Classes - Final Grade' : "Please Select Final Grade"
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:85:hardcoded string:	            type: productCombination == "byjus_classes" && selectedBoard ? 'checkbox' : 'hidden',
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:86:hardcoded string:	            name: 'addTlpCourse',
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:87:hardcoded string:	            checkBoxLabel: "Extend the course by adding BYJU'S Tablet Learning Program",
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:90:hardcoded string:	            type: (isTlpBocp || isAdvancePlusTlp) ? 'select' : 'hidden',
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:91:hardcoded string:	            name: getLabelAndValueField(productLearningType)["value"],
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:92:hardcoded string:	            label: getLabelAndValueField(productLearningType)["label"],
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:94:hardcoded array:	            options: (isTlpBocp || isAdvancePlusTlp) ? filterMeExtendedTLPFinalClass({ classes, selectedInitialClass, selectedFinalClass, productLearningType, classesConfig }) : [{}],
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:96:hardcoded string:	            message: "Please Select TLP Final Grade"
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:100:hardcoded variable:	export const getSiblingFormFields = (details) => {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:101:hardcoded object:	    const { state, props, handleChanges, handleClassBlurEvent, productLearningType, formNumber, addTLPCourses } = details;
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:102:hardcoded object:	    const { productConfig, byjusClassFinalGrade, classType } = state;
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:104:hardcoded object:	    const selectedBoard = get(state, `board-${formNumber}`);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:105:hardcoded object:	    const selectedInitialClass = get(state, `initialClass-${formNumber}`);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:106:hardcoded object:	    const selectedFinalClass = get(state, `finalClass-${formNumber}`);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:107:hardcoded object:	    const selectedTlpFinalGrade = get(state, `tlpFinalGrade-${formNumber}`);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:108:hardcoded object:	    const selectedByjusClassFinalGrade = get(state, `byjusClassFinalGrade-${formNumber}`);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:109:hardcoded object:	    const selectedStreamingCheck = get(state, `isStreaming-${formNumber}`);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:110:hardcoded object:	    const selectedByjusStreamingCheck = get(state, `isByjusStreaming-${formNumber}`);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:111:hardcoded object:	    const selectedTlpCourse = get(state, `addTlpCourse-${formNumber}`);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:113:hardcoded object:	    const { productType, user, productCombination, authDetails, salesDetails, leadDetails } = props;
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:114:hardcoded variable:	    const isPrivilegedUser = checkIsPrivilegedUser(user)
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:115:hardcoded object:	    const { env } = authDetails
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:116:hardcoded string:	    const isDevEnv = ["development", "local"].includes(env);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:118:hardcoded array:	    const { Boards = [], } = productConfig || {};
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:119:hardcoded string:	    const selectedBoardConfig = find(Boards, { formattedName: selectedBoard === "IGCSE" ? "CBSE" : selectedBoard }) || {};
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:121:hardcoded string:	    const classes = getClasses(selectedBoardConfig, user, '', productLearningType, leadDetails, salesDetails);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:122:hardcoded variable:	    const classesConfig = selectedBoardConfig.classes;
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:124:hardcoded variable:	    const mentoringClassMap = getMentoringClassMap(selectedBoardConfig.classes);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:125:hardcoded variable:	    const oneToManyMentoringClassMap = getOneToManyMentoringClassMap(selectedBoardConfig.classes);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:126:hardcoded variable:	    const byjusClassesMap = getByjusClassesMap(selectedBoardConfig.classes);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:128:hardcoded variable:	    const isTlpBocp = ELIGIBLE_COMBINATIONS_FOR_TLP_PLUS_BYJUS_CLASSES.includes(productLearningType);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:129:hardcoded variable:	    const isAdvancePlusTlp = ELIGIBLE_COMBINATIONS_FOR_TLP_PLUS_BYJUS_CLASSES_PLUS_TLP.includes(productLearningType)
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:131:hardcoded variable:	    let grade = selectedTlpFinalGrade || selectedByjusClassFinalGrade;
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:135:hardcoded string:	            type: productLearningType && selectedBoard ? 'select' : 'hidden',
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:136:hardcoded string:	            name: 'initialClass',
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:137:hardcoded string:	            label: getInitialFinalGradeLabel(productLearningType, "Initial"),
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:139:hardcoded string:	            options: productLearningType && selectedBoard ? filterMeInitialClass({ classes, productType: "sibling", productCombination: productLearningType, isPrivilegedUser, classType, authDetails, board: selectedBoard, isDevEnv }) : [],
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:141:hardcoded string:	            message: isTlpBocp ? "Please Select BYJU's CLASSES - Initial Grade" : "Please Select Initial Grade"
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:143:hardcoded string:	            type: productLearningType && selectedBoard ? 'select' : 'hidden',
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:144:hardcoded string:	            name: 'finalClass',
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:145:hardcoded string:	            label: getInitialFinalGradeLabel(productLearningType, "Final"),
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:147:hardcoded string:	            options: productLearningType && selectedBoard ? filterMeFinalClass({ classes, selectedInitialClass, productType: "sibling", classesConfig, productCombination: productLearningType, classType, authDetails, board: selectedBoard, isDevEnv }) : [],
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:150:hardcoded string:	            message: isTlpBocp ? "Please Select BYJU's CLASSES - Final Grade" : "Please Select Final Grade"
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:152:hardcoded string:	            type: (selectedBoard === "CBSE" && ((productCombination === "byjus_tlp") || (productCombination === "byjus_classes" && productLearningType === "byjus_tlp")) && (SIBLING_STREAMING_GRADES.includes(selectedInitialClass) || SIBLING_STREAMING_GRADES.includes(selectedFinalClass))) ? 'checkbox' : 'hidden',
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:153:hardcoded string:	            name: 'isStreaming',
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:154:hardcoded string:	            checkBoxLabel: "Streaming",
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:156:hardcoded object:	            onChange: (...params) => handleChanges(...params, {}, formNumber),
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:158:hardcoded string:	            type: productCombination === "byjus_classes" && productLearningType != "byjus_tlp" && selectedBoard ? 'checkbox' : 'hidden',
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:159:hardcoded string:	            name: 'addTlpCourse',
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:160:hardcoded string:	            checkBoxLabel: "Extend the course by adding BYJU'S Tablet Learning Program",
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:161:hardcoded object:	            onChange: (...params) => addTLPCourses(...params, {}, formNumber),
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:163:hardcoded string:	            type: (isTlpBocp || isAdvancePlusTlp) ? 'select' : 'hidden',
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:164:hardcoded string:	            name: getLabelAndValueField(productLearningType)["value"],
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:165:hardcoded string:	            label: getLabelAndValueField(productLearningType)["label"],
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:167:hardcoded array:	            options: (isTlpBocp || isAdvancePlusTlp) ? filterMeExtendedTLPFinalClass({ classes, selectedInitialClass, selectedFinalClass, productLearningType, classesConfig }) : [{}],
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:170:hardcoded string:	            message: "Please Select TLP Final Grade"
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:172:hardcoded string:	            type: selectedBoard === "CBSE" && productCombination === "byjus_classes" && productLearningType != "byjus_tlp" && (SIBLING_STREAMING_GRADES.includes(selectedInitialClass) || SIBLING_STREAMING_GRADES.includes(selectedFinalClass)) && filterMeExtendedTLPFinalClass ? 'checkbox' : 'hidden',
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:173:hardcoded string:	            name: 'isByjusStreaming',
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:174:hardcoded string:	            checkBoxLabel: "Streaming",
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:176:hardcoded object:	            onChange: (...params) => handleChanges(...params, {}, formNumber),
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:181:hardcoded variable:	export const getStreamingFormFields = (details) => {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:182:hardcoded object:	    const { state, props, handleChanges, handleClassBlurEvent, getStreamingClassConfig, addTLPCourses } = details;
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:183:hardcoded object:	    const { productConfig, initialClass: selectedInitialClass, finalClass: selectedFinalClass, byjusClassFinalGrade, classType, igcse } = state;
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:185:hardcoded string:	    let productLearningType = get(state, "productLearningType", "");
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:187:hardcoded object:	    const { productType, user, productCombination, authDetails } = props;
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:189:hardcoded variable:	    const isPrivilegedUser = checkIsPrivilegedUser(user)
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:191:hardcoded object:	    const { env } = authDetails
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:192:hardcoded string:	    const isDevEnv = ['development', 'local'].includes(env)
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:193:hardcoded variable:	    const classConfig = getStreamingClassConfig();
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:194:hardcoded string:	    const classes = getClasses(classConfig, user, '', productLearningType);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:195:hardcoded variable:	    const classesConfig = classConfig.classes;
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:197:hardcoded variable:	    const mentoringClassMap = getMentoringClassMap(classesConfig);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:198:hardcoded variable:	    const oneToManyMentoringClassMap = getOneToManyMentoringClassMap(classesConfig);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:199:hardcoded variable:	    const byjusClassesMap = getByjusClassesMap(classesConfig);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:201:hardcoded variable:	    const isTlpBocp = ELIGIBLE_COMBINATIONS_FOR_TLP_PLUS_BYJUS_CLASSES.includes(productLearningType);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:202:hardcoded variable:	    const isAdvancePlusTlp = ELIGIBLE_COMBINATIONS_FOR_TLP_PLUS_BYJUS_CLASSES_PLUS_TLP.includes(productLearningType)
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:204:hardcoded string:	    if (productCombination === "byjus_tlp") {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:210:hardcoded string:	            type: productLearningType ? 'select' : 'hidden',
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:211:hardcoded string:	            name: 'initialClass',
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:212:hardcoded string:	            label: getInitialFinalGradeLabel(productLearningType, "Initial"),
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:214:hardcoded string:	            options: productLearningType ? filterMeInitialClass({ classes, productType: "streaming", productCombination: productLearningType, isPrivilegedUser, classType, authDetails, board: (igcse ? "IGCSE" : "CBSE"), isDevEnv }) : [],
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:216:hardcoded string:	            message: isTlpBocp ? 'Please Select Byjus Classes - Initial Grade' : "Please Select Initial Grade"
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:218:hardcoded string:	            type: productLearningType ? 'select' : 'hidden',
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:219:hardcoded string:	            name: 'finalClass',
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:220:hardcoded string:	            label: getInitialFinalGradeLabel(productLearningType, "Final"),
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:222:hardcoded string:	            options: productLearningType ? filterMeFinalClass({ classes, selectedInitialClass, productType: "streaming", classesConfig, productCombination: productLearningType, classType, authDetails, board: (igcse ? "IGCSE" : "CBSE"), isDevEnv }) : [],
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:225:hardcoded string:	            message: isTlpBocp ? 'Please Select Byjus Classes - Final Grade' : "Please Select Final Grade"
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:227:hardcoded string:	            type: productCombination == "byjus_classes" && productLearningType && productLearningType != "byjus_tlp" ? 'checkbox' : 'hidden',
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:228:hardcoded string:	            name: 'addTlpCourse',
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:229:hardcoded string:	            checkBoxLabel: "Extend the course by adding BYJU'S Tablet Learning Program",
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:232:hardcoded string:	            type: (isTlpBocp || isAdvancePlusTlp) ? 'select' : 'hidden',
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:233:hardcoded string:	            name: getLabelAndValueField(productLearningType)["value"],
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:234:hardcoded string:	            label: getLabelAndValueField(productLearningType)["label"],
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:236:hardcoded array:	            options: (isTlpBocp || isAdvancePlusTlp) ? filterMeExtendedTLPFinalClass({ classes, selectedInitialClass, selectedFinalClass, productLearningType, classesConfig }) : [],
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:238:hardcoded string:	            message: "Please Select TLP Final Grade"
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:242:hardcoded array:	export const getBoards = (boards = [], productCombination, isDevEnv) => {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:243:hardcoded variable:	    let boardList = boards
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:244:hardcoded string:	    if (["byjus_tlp"].includes(productCombination)) {               //IGCSE board available only for tlp
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:245:hardcoded string:	        const isIgcseAdded = boardList.find(board => board.value == "IGCSE")
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:246:hardcoded string:	        if (!isIgcseAdded) boardList.push({ label: "IGCSE", value: "IGCSE" })
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:248:hardcoded string:	    if (['byjus_classes'].includes(productCombination)) {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:249:hardcoded string:	        boardList = boardList.filter(name => !["IGCSE"].includes(name.value))
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:254:hardcoded number:	export const getIgcseClassDetails = (details) => {              //for IGCSE board sending initialClass as initialClass - 1 and finalClass as finalClass + 1
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:255:hardcoded object:	    const { board, initialClass, finalClass } = details
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:257:hardcoded string:	    if (['IGCSE'].includes(board)) {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:259:hardcoded number:	            firstClass = parseInt(initialClass) - 1;
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:262:hardcoded number:	            lastClass = parseInt(finalClass) + 1
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:271:hardcoded array:	export const getState = (state = []) => {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:272:hardcoded variable:	    let stateList = state
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:273:hardcoded string:	    stateList = stateList.filter(option => option.value == "Kerala")
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:277:hardcoded variable:	export const getMeProductlearningType = (detail) => {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:278:hardcoded object:	    const { productType } = detail
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:279:hardcoded string:	    let productLearningType = [{ label: "BYJU's CLASSES", value: "byjus_classes" }]
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:280:hardcoded string:	    if (productType === "sibling") {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:281:hardcoded string:	        productLearningType.push({ label: "BYJU's-TLP", value: "byjus_tlp" })
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:283:hardcoded array:	    return [...productLearningType]
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:287:hardcoded variable:	export const filterMeInitialClass = (productDetails) => {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:288:hardcoded object:	    const { classes, productType, productCombination, isPrivilegedUser, classType, authDetails, board, isDevEnv } = productDetails
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:289:hardcoded variable:	    let filteredClass = classes;
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:291:hardcoded object:	    const { env } = authDetails;
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:293:hardcoded number:	    // enable single 12 for Tlp single 
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:294:hardcoded string:	    let nonEligibleGrade = (productType != 'single' && productCombination != 'byjus_tlp') ? ["11+12", "14", "13", "12+", "13+", "12"] : ["11+12", "14", "13", "12+"]
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:296:hardcoded string:	        return (nonEligibleGrade.indexOf(get(classObj, 'value', '')) < 0);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:298:hardcoded string:	    const indexOf11 = filteredClass.findIndex(name => (name.value === "11"))
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:299:hardcoded string:	    const indexOf12 = filteredClass.findIndex(name => (name.value === "12"))
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:300:hardcoded string:	    const indexOf13 = filteredClass.findIndex(name => (name.value === "13+"))
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:302:hardcoded number:	    if (indexOf11 > -1) {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:303:hardcoded string:	        filteredClass[indexOf11].label = "11 (Aakash Byju’s TLP)"
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:305:hardcoded number:	    if (indexOf12 > -1) {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:306:hardcoded string:	        filteredClass[indexOf12].label = "12 (Aakash Byju’s TLP)"
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:308:hardcoded number:	    if (indexOf13 > -1) {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:309:hardcoded string:	        filteredClass[indexOf13].label = "12th Pass (Aakash Byju’s TLP)"
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:311:hardcoded string:	    if (((productCombination === "byjus_classes") && (productType === "combo"))) {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:312:hardcoded number:	        if (indexOf11 > -1)
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:313:hardcoded number:	            filteredClass.splice(indexOf11, 1);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:317:hardcoded string:	    if (productType === "streaming" || ELIGIBLE_COMBINATIONS_FOR_BATCH.includes(productCombination)) {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:318:hardcoded string:	        let nonEligibleClass = ["-1", "0", "1", "2", "3"]
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:320:hardcoded string:	            return (nonEligibleClass.indexOf(get(classObj, 'value', '')) < 0);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:324:hardcoded number:	    // removed 12th for the cases, where single 12th is not allowed
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:325:hardcoded string:	    // if (productType == "combo" || (["sibling", "streaming"].includes(productType) && ELIGIBLE_COMBINATIONS_FOR_BATCH.includes(productCombination))) {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:327:hardcoded string:	    //         return (["12"].indexOf(get(classObj, 'value', '')) < 0);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:331:hardcoded string:	    if (productType == "combo" && ELIGIBLE_COMBINATIONS_FOR_BATCH.includes(productCombination)) {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:332:hardcoded string:	        filteredClass = filteredClass.filter(classObj => get(classObj, 'value', '') != "11");
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:335:hardcoded number:	    // remove after single 11th anf 12th price will shared
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:336:hardcoded string:	    if (productType == "single") {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:337:hardcoded string:	        filteredClass = filteredClass.filter(classObj => get(classObj, 'value', '') != "11");
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:340:hardcoded string:	    if (isPrivilegedUser && classType == "neo" && ["byjus_classes"].includes(productCombination)) {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:341:hardcoded string:	        filteredClass = filteredClass.filter(initialClass => !["11", 11, "11+12", "12", 12, "12+", "13", "13+", "14"].includes(initialClass.value))
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:343:hardcoded number:	    //removing initial class 12 from Combo tlp since single 12 is not applicable
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:344:hardcoded string:	    if (['single', 'combo'].includes(productType) && productCombination == 'byjus_tlp') {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:345:hardcoded string:	        filteredClass = filteredClass.filter(initialClass => !["13+", "12", 12, "11"].includes(initialClass.value))
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:347:hardcoded string:	    if (productType == 'sibling' && productCombination == 'byjus_tlp') {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:348:hardcoded string:	        filteredClass = filteredClass.filter(initialClass => !["13+"].includes(initialClass.value))
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:350:hardcoded string:	    if (['IGCSE'].includes(board)) {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:351:hardcoded number:	        let minClass = 5;
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:352:hardcoded number:	        let maxClass = 9;
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:359:hardcoded variable:	export const filterMeFinalClass = (details) => {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:360:hardcoded object:	    let { classes, selectedInitialClass, productType, classesConfig, productCombination, classType, authDetails, board, isDevEnv } = details
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:361:hardcoded variable:	    let filteredClass = classes;
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:363:hardcoded object:	    const classObjConfig = find(classesConfig, { class: selectedInitialClass }) || {};
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:364:hardcoded string:	    let maxClass = get(classObjConfig, 'maxClass', '');
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:365:hardcoded string:	    maxClass = (parseInt(selectedInitialClass, 10) + 6) <= 12 ? (parseInt(selectedInitialClass, 10) + 6).toString() : "12"
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:367:hardcoded string:	    if (ELIGIBLE_COMBINATIONS_FOR_BATCH.includes(productCombination) && classType === "neo") {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:368:hardcoded string:	        if (["9", "10"].includes(selectedInitialClass)) {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:369:hardcoded string:	            maxClass = selectedInitialClass === "9" ? (parseInt(selectedInitialClass, 10) + 1).toString() : (parseInt(selectedInitialClass, 10) + 0).toString()
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:371:hardcoded string:	            maxClass = selectedInitialClass === "11" ? "12" : (parseInt(selectedInitialClass, 10) + 3).toString();
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:374:hardcoded string:	    if (ELIGIBLE_COMBINATIONS_FOR_BATCH.includes(productCombination) && classType != "neo") {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:375:hardcoded string:	        maxClass = selectedInitialClass === "11" ? "11" : (parseInt(selectedInitialClass, 10) + 0).toString();
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:379:hardcoded string:	        const classValue = get(classObj, 'value', '');
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:380:hardcoded number:	        /**For combo product and advance admission+tlp initial and final class should have minimum difference of 1 */
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:381:hardcoded string:	        const isClassAllowed = (((productType === "combo" && !ELIGIBLE_COMBINATIONS_FOR_TLP_PLUS_BYJUS_CLASSES.includes(productCombination)) || (ELIGIBLE_COMBINATIONS_FOR_TLP_PLUS_BYJUS_CLASSES_PLUS_TLP.includes(productCombination))) ?
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:385:hardcoded string:	        return (["11+12"].indexOf(classValue) < 0 && isClassAllowed);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:387:hardcoded string:	    // const indexOf12 = filteredClass.findIndex(name=>_.isEqual(name.value,"12"))
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:388:hardcoded number:	    // if(indexOf12>-1){
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:389:hardcoded string:	    //     filteredClass[indexOf12].label = "12 (Aakash Byju’s TLP)"
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:391:hardcoded string:	    // if( (_.isEqual(productType, "sibling") || _.isEqual(productType, "streaming")) || (_.isEqual(productCombination,"byjus_classes") && _.isEqual(productType, "combo"))){
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:392:hardcoded number:	    //     if(indexOf12 > -1)
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:393:hardcoded number:	    //         filteredClass.splice(indexOf12,1);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:397:hardcoded string:	        return (["11"].indexOf(get(classObj, 'value', '')) < 0);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:400:hardcoded string:	    if (productCombination === "byjus_tlp") {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:401:hardcoded string:	        if ((["combo"].includes(productType) && Number(selectedInitialClass) <= 6))
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:403:hardcoded string:	                return classObj.value !== '12'
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:407:hardcoded string:	    if (['IGCSE'].includes(board)) {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:408:hardcoded number:	        let maxClass = 9;
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:410:hardcoded string:	            const classValue = get(classObj, 'value', '');
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:411:hardcoded number:	            /**For combo product and advance admission+tlp initial and final class should have minimum difference of 1 */
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:412:hardcoded string:	            const isClassAllowed = ((productType === "combo") ?
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:416:hardcoded string:	            return (["11+12"].indexOf(classValue) < 0 && isClassAllowed);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:423:hardcoded variable:	export const filterMeExtendedTLPFinalClass = (details) => {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:424:hardcoded object:	    const { classes, selectedInitialClass, selectedFinalClass, productLearningType, classesConfig } = details
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:425:hardcoded object:	    const classObjConfig = find(classesConfig, { class: selectedInitialClass }) || {};
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:427:hardcoded string:	    let maxClass = get(classObjConfig, 'maxClass', '');
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:429:hardcoded number:	    if (selectedInitialClass == 4) {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:430:hardcoded string:	        maxClass = "10"
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:431:hardcoded number:	    } else if (selectedInitialClass == 6) {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:432:hardcoded string:	        maxClass = "10";
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:434:hardcoded variable:	    let filteredClasses = classes.filter((classObj) => {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:435:hardcoded string:	        const classValue = get(classObj, 'value', '');
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:437:hardcoded variable:	        const isClassAllowed = (
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:441:hardcoded string:	        return (["11+12", "11"].indexOf(classValue) < 0 && isClassAllowed);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:444:hardcoded number:	    filteredClasses = filteredClasses.filter(dt => parseInt(dt.value, 10) > parseInt(selectedFinalClass, 10));
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:447:hardcoded string:	    if (productLearningType === "byjus_tlp_plus_byjus_classes") {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:448:hardcoded string:	        if (selectedInitialClass === "12") {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:449:hardcoded string:	            filteredClasses = [{ label: "12+", value: "12+" }]
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:450:hardcoded string:	        } else if (!["12", "+12"].includes(selectedFinalClass) && selectedFinalClass) {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:451:hardcoded array:	            filteredClasses = [{ label: selectedFinalClass.toString(), value: selectedFinalClass.toString() }]
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:453:hardcoded string:	            filteredClasses = [{ label: "12", value: "12" }]
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:457:hardcoded string:	    if (productLearningType === "jumpstart_admission") {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:458:hardcoded string:	        filteredClasses = [{ label: "12", value: "12" }]
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:464:hardcoded variable:	export const getMeFormattedValidity = (productDetails) => {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:465:hardcoded string:	    const { initialClass, productCombination = "", user, isDevEnv } = productDetails || {};
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:466:hardcoded string:	    const permissions = get(user, "permissions", []);
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:467:hardcoded number:	    const isPriviledgedUser = permissions.indexOf(productPermissions.ignoreValidityCheck) >= 0;
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:468:hardcoded array:	    let formattedValidity = [];
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:469:hardcoded variable:	    let currentAcademicYear = getCurrentAcademicYear();
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:473:hardcoded number:	        let currentYear = currentAcademicYear + 1;
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:474:hardcoded number:	        const validityUpto = currentYear + 9;
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:486:hardcoded number:	                label: 2024,
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:487:hardcoded number:	                value: 2024
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:491:hardcoded number:	        let currentYear = 2024;
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:493:hardcoded object:	            { label: currentYear, value: currentYear },
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:505:hardcoded variable:	export const getMeTablets = (productDetails) => {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:506:hardcoded object:	    const { tablets, initialClass, productType, isPrivilegedUser, isOnlyTablet = false, isDevEnv } = productDetails
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:507:hardcoded array:	    let tabletName = [];
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:508:hardcoded variable:	    let tabletList = tablets;
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:513:hardcoded string:	        if (["-1", "0", "1", "2", "3"].includes(initialClass)) {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:514:hardcoded string:	            tabletName.push("Lenovo 10.1 inch Tablet Data - ME")
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:516:hardcoded string:	            tabletName.push("Lenovo 8 inch Tablet (Mobile Data)", "Ackees 10 inch Mobile Tablet",
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:517:hardcoded string:	                "Lenovo 10.1 inch Tablet Data - ME", "Samsung 10 inch Tablet (Mobile Data)")
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:519:hardcoded string:	        if (productType == "streaming") {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:520:hardcoded string:	            tabletName.push("Lenovo 8 inch Tablet (Mobile Data)", "Lenovo 10.1 inch Tablet Data - ME")
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:525:hardcoded string:	        if (ele.label == "Ackees 10 inch Mobile Tablet") {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:526:hardcoded string:	            return { ...ele, label: "Ackees 10 inch Mobile Tablet - ME" }
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:535:hardcoded variable:	export const getProfileOptions = (existingProfiles, isPrivilegedUser) => {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:536:hardcoded number:	    if (existingProfiles && existingProfiles.length > 0) {
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:537:hardcoded variable:	        let newExistingProfile = existingProfiles;
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:538:hardcoded string:	        newExistingProfile = newExistingProfile.find(profile => profile.value === "newProfile");
microservices-middleware/client/src/modules/ordertype/middleeast/product/components/products/ProductHelper.js:540:hardcoded string:	            existingProfiles.push({ "label": "New Profile", value: "newProfile" })
