microservices-middleware/client/src/modules/otp/otpReducer.js:2:hardcoded string:export const SAVE_OTP_DETAILS = '/otp/SAVE_OTP_DETAILS';
microservices-middleware/client/src/modules/otp/otpReducer.js:5:hardcoded object:const saveOtpDetailsSuccess = (response) => ({ type: SAVE_OTP_DETAILS, response });
microservices-middleware/client/src/modules/otp/otpReducer.js:8:hardcoded variable:export const saveOtpDetails = (otpDetails) => dispatch => {
microservices-middleware/client/src/modules/otp/otpReducer.js:13:hardcoded object:export default (state = {}, action) => {
microservices-middleware/client/src/modules/otp/OtpPage.js:1:hardcoded object:import React, { Component } from 'react';
microservices-middleware/client/src/modules/otp/OtpPage.js:2:hardcoded object:import { connect } from 'react-redux';
microservices-middleware/client/src/modules/otp/OtpPage.js:4:hardcoded object:import { Button, Row, Col, message } from 'antd';
microservices-middleware/client/src/modules/otp/OtpPage.js:5:hardcoded object:import { get, isEmpty, isEqual } from 'lodash';
microservices-middleware/client/src/modules/otp/OtpPage.js:7:hardcoded file path:import AntDformBuilder from '../../components/form/AntDFormBuilder';
microservices-middleware/client/src/modules/otp/OtpPage.js:8:hardcoded file path:import makeApiCall from '../../api/callApi';
microservices-middleware/client/src/modules/otp/OtpPage.js:9:hardcoded file path:import AppLayout from '../../modules/applayout/AppLayout';
microservices-middleware/client/src/modules/otp/OtpPage.js:10:hardcoded file path:import InfoWrapper from '../../components/InfoWrapper';
microservices-middleware/client/src/modules/otp/OtpPage.js:11:hardcoded object:import { saveOrderReferenceId } from '../order/orderReducer';
microservices-middleware/client/src/modules/otp/OtpPage.js:13:hardcoded variable:const mapStateToProps = state => ({
microservices-middleware/client/src/modules/otp/OtpPage.js:14:hardcoded string:    customerDetails: get(state, "details.customerDetails", {}),
microservices-middleware/client/src/modules/otp/OtpPage.js:15:hardcoded string:    leadDetails: get(state, "auth.leadDetails", {}),
microservices-middleware/client/src/modules/otp/OtpPage.js:16:hardcoded string:    identifier: get(state, "details.identifier"),
microservices-middleware/client/src/modules/otp/OtpPage.js:17:hardcoded string:    otpDetails: get(state, "otp.details"),
microservices-middleware/client/src/modules/otp/OtpPage.js:18:hardcoded string:    authDetails: get(state, 'auth.details', {}),
microservices-middleware/client/src/modules/otp/OtpPage.js:21:hardcoded variable:const mapDispatchToProps = dispatch => ({
microservices-middleware/client/src/modules/otp/OtpPage.js:31:hardcoded string:            selectedProduct: 'Single',
microservices-middleware/client/src/modules/otp/OtpPage.js:38:hardcoded string:                text: "Resend"
microservices-middleware/client/src/modules/otp/OtpPage.js:40:hardcoded string:            status: "Otp Saved"
microservices-middleware/client/src/modules/otp/OtpPage.js:46:hardcoded object:        const { customerDetails, leadDetails } = this.props;
microservices-middleware/client/src/modules/otp/OtpPage.js:47:hardcoded object:        const { resendOtpButtonDetails } = this.state;
microservices-middleware/client/src/modules/otp/OtpPage.js:49:hardcoded variable:        const fields = [{
microservices-middleware/client/src/modules/otp/OtpPage.js:50:hardcoded string:            type: 'maskedMobile',
microservices-middleware/client/src/modules/otp/OtpPage.js:51:hardcoded string:            name: 'studentMobileNo',
microservices-middleware/client/src/modules/otp/OtpPage.js:52:hardcoded string:            label: 'Contact Number',
microservices-middleware/client/src/modules/otp/OtpPage.js:54:hardcoded string:            value: get(customerDetails, "studentMobileNo"),
microservices-middleware/client/src/modules/otp/OtpPage.js:57:hardcoded string:            type: 'maskedMobile',
microservices-middleware/client/src/modules/otp/OtpPage.js:58:hardcoded string:            name: 'parentMobileNo',
microservices-middleware/client/src/modules/otp/OtpPage.js:59:hardcoded string:            label: 'Alternate Contact Number',
microservices-middleware/client/src/modules/otp/OtpPage.js:61:hardcoded string:            value: get(customerDetails, "parentMobileNo"),
microservices-middleware/client/src/modules/otp/OtpPage.js:64:hardcoded string:            type: 'maskedMail',
microservices-middleware/client/src/modules/otp/OtpPage.js:65:hardcoded string:            name: 'Email',
microservices-middleware/client/src/modules/otp/OtpPage.js:66:hardcoded string:            label: 'Email ID',
microservices-middleware/client/src/modules/otp/OtpPage.js:68:hardcoded string:            value: get(customerDetails, "email"),
microservices-middleware/client/src/modules/otp/OtpPage.js:71:hardcoded string:            type: 'textarea',
microservices-middleware/client/src/modules/otp/OtpPage.js:72:hardcoded string:            name: 'prospectId',
microservices-middleware/client/src/modules/otp/OtpPage.js:73:hardcoded string:            label: 'Lead ID',
microservices-middleware/client/src/modules/otp/OtpPage.js:75:hardcoded string:            value: get(leadDetails, "prospectId"),
microservices-middleware/client/src/modules/otp/OtpPage.js:78:hardcoded string:            type: 'password',
microservices-middleware/client/src/modules/otp/OtpPage.js:79:hardcoded string:            name: 'otp',
microservices-middleware/client/src/modules/otp/OtpPage.js:80:hardcoded string:            label: 'OTP',
microservices-middleware/client/src/modules/otp/OtpPage.js:83:hardcoded string:            type: 'inputgroup',
microservices-middleware/client/src/modules/otp/OtpPage.js:84:hardcoded string:            name: 'otpButtons',
microservices-middleware/client/src/modules/otp/OtpPage.js:85:hardcoded string:            label: ' ',
microservices-middleware/client/src/modules/otp/OtpPage.js:88:hardcoded string:                type: 'button',
microservices-middleware/client/src/modules/otp/OtpPage.js:89:hardcoded string:                name: 'resendBtn',
microservices-middleware/client/src/modules/otp/OtpPage.js:90:hardcoded string:                tooltip: get(resendOtpButtonDetails, "text", "Resend"),
microservices-middleware/client/src/modules/otp/OtpPage.js:91:hardcoded string:                text: "Resend",
microservices-middleware/client/src/modules/otp/OtpPage.js:92:hardcoded string:                icon: "sync",
microservices-middleware/client/src/modules/otp/OtpPage.js:93:hardcoded string:                disabled: get(resendOtpButtonDetails, "disabled", false),
microservices-middleware/client/src/modules/otp/OtpPage.js:94:hardcoded string:                loading: get(resendOtpButtonDetails, "loading", false),
microservices-middleware/client/src/modules/otp/OtpPage.js:95:hardcoded string:                onClick: () => this.sendOtp("sms")
microservices-middleware/client/src/modules/otp/OtpPage.js:98:hardcoded string:                type: 'button',
microservices-middleware/client/src/modules/otp/OtpPage.js:99:hardcoded string:                name: 'otpOnCallBtn',
microservices-middleware/client/src/modules/otp/OtpPage.js:100:hardcoded string:                tooltip: "OTP on Call",
microservices-middleware/client/src/modules/otp/OtpPage.js:101:hardcoded string:                text: "OTP on Call",
microservices-middleware/client/src/modules/otp/OtpPage.js:102:hardcoded string:                icon: "phone",
microservices-middleware/client/src/modules/otp/OtpPage.js:103:hardcoded string:                onClick: () => this.sendOtp("voice")
microservices-middleware/client/src/modules/otp/OtpPage.js:111:hardcoded object:        const { customerDetails, leadDetails, authDetails = {} } = this.props;
microservices-middleware/client/src/modules/otp/OtpPage.js:112:hardcoded object:        const { resendOtpButtonDetails, status } = this.state;
microservices-middleware/client/src/modules/otp/OtpPage.js:113:hardcoded object:        const { draftOrder = {} } = authDetails;
microservices-middleware/client/src/modules/otp/OtpPage.js:115:hardcoded variable:        const fields = [{
microservices-middleware/client/src/modules/otp/OtpPage.js:116:hardcoded string:            type: 'maskedMobile',
microservices-middleware/client/src/modules/otp/OtpPage.js:117:hardcoded string:            name: 'parentMobileNo',
microservices-middleware/client/src/modules/otp/OtpPage.js:118:hardcoded string:            label: 'Contact Number',
microservices-middleware/client/src/modules/otp/OtpPage.js:120:hardcoded string:            value: get(customerDetails, "parentMobileNo"),
microservices-middleware/client/src/modules/otp/OtpPage.js:123:hardcoded string:            type: 'maskedMail',
microservices-middleware/client/src/modules/otp/OtpPage.js:124:hardcoded string:            name: 'Email',
microservices-middleware/client/src/modules/otp/OtpPage.js:125:hardcoded string:            label: 'Email ID',
microservices-middleware/client/src/modules/otp/OtpPage.js:127:hardcoded string:            value: get(customerDetails, "email"),
microservices-middleware/client/src/modules/otp/OtpPage.js:130:hardcoded string:            type: 'textarea',
microservices-middleware/client/src/modules/otp/OtpPage.js:131:hardcoded string:            name: 'prospectId',
microservices-middleware/client/src/modules/otp/OtpPage.js:132:hardcoded string:            label: 'Lead ID',
microservices-middleware/client/src/modules/otp/OtpPage.js:134:hardcoded string:            value: get(leadDetails, "prospectId"),
microservices-middleware/client/src/modules/otp/OtpPage.js:137:hardcoded string:            type: 'text',
microservices-middleware/client/src/modules/otp/OtpPage.js:138:hardcoded string:            name: 'status',
microservices-middleware/client/src/modules/otp/OtpPage.js:139:hardcoded string:            label: 'Status',
microservices-middleware/client/src/modules/otp/OtpPage.js:144:hardcoded string:            type: 'inputgroup',
microservices-middleware/client/src/modules/otp/OtpPage.js:145:hardcoded string:            name: 'otpButtons',
microservices-middleware/client/src/modules/otp/OtpPage.js:146:hardcoded string:            label: ' ',
microservices-middleware/client/src/modules/otp/OtpPage.js:149:hardcoded string:                type: 'button',
microservices-middleware/client/src/modules/otp/OtpPage.js:150:hardcoded string:                name: 'resendBtn',
microservices-middleware/client/src/modules/otp/OtpPage.js:151:hardcoded string:                tooltip: get(resendOtpButtonDetails, "text", "Resend"),
microservices-middleware/client/src/modules/otp/OtpPage.js:152:hardcoded string:                text: "Resend",
microservices-middleware/client/src/modules/otp/OtpPage.js:153:hardcoded string:                icon: "sync",
microservices-middleware/client/src/modules/otp/OtpPage.js:154:hardcoded string:                disabled: get(resendOtpButtonDetails, "disabled", false),
microservices-middleware/client/src/modules/otp/OtpPage.js:155:hardcoded string:                loading: get(resendOtpButtonDetails, "loading", false),
microservices-middleware/client/src/modules/otp/OtpPage.js:156:hardcoded string:                onClick: () => this.sendOtp("sms")
microservices-middleware/client/src/modules/otp/OtpPage.js:159:hardcoded string:                name: 'resendBtn',
microservices-middleware/client/src/modules/otp/OtpPage.js:160:hardcoded string:                type: 'button',
microservices-middleware/client/src/modules/otp/OtpPage.js:161:hardcoded string:                icon: "info-circle",
microservices-middleware/client/src/modules/otp/OtpPage.js:162:hardcoded string:                className: "border-0 ml-4",
microservices-middleware/client/src/modules/otp/OtpPage.js:163:hardcoded string:                tooltip: "Please click on the resend button to send SMS to the customer"
microservices-middleware/client/src/modules/otp/OtpPage.js:165:hardcoded string:                name: 'emptySpace1'
microservices-middleware/client/src/modules/otp/OtpPage.js:167:hardcoded string:                name: 'emptySpace2'
microservices-middleware/client/src/modules/otp/OtpPage.js:169:hardcoded string:                type: 'button',
microservices-middleware/client/src/modules/otp/OtpPage.js:170:hardcoded string:                name: 'refresh',
microservices-middleware/client/src/modules/otp/OtpPage.js:171:hardcoded string:                tooltip: "Refresh",
microservices-middleware/client/src/modules/otp/OtpPage.js:172:hardcoded string:                text: "Refresh",
microservices-middleware/client/src/modules/otp/OtpPage.js:173:hardcoded string:                icon: "sync",
microservices-middleware/client/src/modules/otp/OtpPage.js:181:hardcoded object:        this.setState({ resendOtpButtonDetails: { loading: false, disabled: true } });
microservices-middleware/client/src/modules/otp/OtpPage.js:182:hardcoded number:        let countDownTime = 60000; // 60s
microservices-middleware/client/src/modules/otp/OtpPage.js:183:hardcoded variable:        const interval = setInterval(() => {
microservices-middleware/client/src/modules/otp/OtpPage.js:184:hardcoded number:            countDownTime = countDownTime - 1000;
microservices-middleware/client/src/modules/otp/OtpPage.js:186:hardcoded number:                resendOtpButtonDetails: { ...prevState.resendOtpButtonDetails, text: `Resend in ${Math.floor(countDownTime / 1000)}s` }
microservices-middleware/client/src/modules/otp/OtpPage.js:188:hardcoded number:            if (countDownTime <= 0) {
microservices-middleware/client/src/modules/otp/OtpPage.js:190:hardcoded string:                this.setState((prevState) => ({ resendOtpButtonDetails: { ...prevState.resendOtpButtonDetails, text: "Resend", disabled: false } }));
microservices-middleware/client/src/modules/otp/OtpPage.js:192:hardcoded number:        }, 1000);
microservices-middleware/client/src/modules/otp/OtpPage.js:196:hardcoded object:        const { history } = this.props;
microservices-middleware/client/src/modules/otp/OtpPage.js:197:hardcoded string:        const url = `${path}${get(history, 'location.search')}`;
microservices-middleware/client/src/modules/otp/OtpPage.js:202:hardcoded variable:        const formValues = await this.otpForm.getFormValues();
microservices-middleware/client/src/modules/otp/OtpPage.js:204:hardcoded object:            this.setState({ loading: true, error: null });
microservices-middleware/client/src/modules/otp/OtpPage.js:205:hardcoded object:            const { otp } = formValues;
microservices-middleware/client/src/modules/otp/OtpPage.js:206:hardcoded object:            const { identifier } = this.props;
microservices-middleware/client/src/modules/otp/OtpPage.js:208:hardcoded variable:                const options = {
microservices-middleware/client/src/modules/otp/OtpPage.js:209:hardcoded string:                    url: '/api/otp/validateOtp',
microservices-middleware/client/src/modules/otp/OtpPage.js:210:hardcoded string:                    method: 'POST',
microservices-middleware/client/src/modules/otp/OtpPage.js:211:hardcoded object:                    body: { otp, identifier }
microservices-middleware/client/src/modules/otp/OtpPage.js:213:hardcoded object:                const { data } = await makeApiCall(options);
microservices-middleware/client/src/modules/otp/OtpPage.js:216:hardcoded object:                    this.setState({ loading: false });
microservices-middleware/client/src/modules/otp/OtpPage.js:217:hardcoded string:                    this.navigateToScreen('/orderStatus');
microservices-middleware/client/src/modules/otp/OtpPage.js:219:hardcoded object:                    this.setState({ error: data.errorMessage, loading: false });
microservices-middleware/client/src/modules/otp/OtpPage.js:222:hardcoded object:                this.setState({ error: JSON.stringify(error), loading: false });
microservices-middleware/client/src/modules/otp/OtpPage.js:228:hardcoded string:        message.success('Order is saved successfully. You can continue later.', 10);
microservices-middleware/client/src/modules/otp/OtpPage.js:229:hardcoded object:        const { history } = this.props;
microservices-middleware/client/src/modules/otp/OtpPage.js:233:hardcoded string:                const url = `/${get(history, 'location.search')}`;
microservices-middleware/client/src/modules/otp/OtpPage.js:244:hardcoded object:        this.setState({ loading: true, error: null });
microservices-middleware/client/src/modules/otp/OtpPage.js:245:hardcoded object:        const { identifier } = this.props;
microservices-middleware/client/src/modules/otp/OtpPage.js:247:hardcoded string:            message.success('Fetching Order status');
microservices-middleware/client/src/modules/otp/OtpPage.js:248:hardcoded variable:            const options = {
microservices-middleware/client/src/modules/otp/OtpPage.js:249:hardcoded object:                url: `/api/order/getDraftOrderDetails/?id=${identifier}`,
microservices-middleware/client/src/modules/otp/OtpPage.js:250:hardcoded string:                method: 'GET'
microservices-middleware/client/src/modules/otp/OtpPage.js:252:hardcoded object:            const { data } = await makeApiCall(options);
microservices-middleware/client/src/modules/otp/OtpPage.js:253:hardcoded string:            if (data.status === "otp_saved") {
microservices-middleware/client/src/modules/otp/OtpPage.js:254:hardcoded object:                this.setState({ status: data.status, loading: false });
microservices-middleware/client/src/modules/otp/OtpPage.js:255:hardcoded string:                message.success('Order status fetched successfully');
microservices-middleware/client/src/modules/otp/OtpPage.js:258:hardcoded object:                this.setState({ loading: false });
microservices-middleware/client/src/modules/otp/OtpPage.js:259:hardcoded string:                this.navigateToScreen('/orderStatus');
microservices-middleware/client/src/modules/otp/OtpPage.js:262:hardcoded object:            this.setState({ loading: false, error: JSON.stringify(error) });
microservices-middleware/client/src/modules/otp/OtpPage.js:267:hardcoded object:        this.setState({ loading: true, error: null });
microservices-middleware/client/src/modules/otp/OtpPage.js:268:hardcoded string:        if (channelType && channelType.toLowerCase() === "sms") {
microservices-middleware/client/src/modules/otp/OtpPage.js:269:hardcoded object:            this.setState({ resendOtpButtonDetails: { loading: true, disabled: true } });
microservices-middleware/client/src/modules/otp/OtpPage.js:271:hardcoded object:        const { identifier } = this.props;
microservices-middleware/client/src/modules/otp/OtpPage.js:273:hardcoded variable:            const options = {
microservices-middleware/client/src/modules/otp/OtpPage.js:274:hardcoded string:                url: '/api/otp/sendOtp',
microservices-middleware/client/src/modules/otp/OtpPage.js:275:hardcoded string:                method: 'POST',
microservices-middleware/client/src/modules/otp/OtpPage.js:276:hardcoded object:                body: { identifier, channelType }
microservices-middleware/client/src/modules/otp/OtpPage.js:279:hardcoded object:            this.setState({ loading: false });
microservices-middleware/client/src/modules/otp/OtpPage.js:280:hardcoded string:            message.success('OTP Sent Successfully');
microservices-middleware/client/src/modules/otp/OtpPage.js:282:hardcoded string:            if (channelType && channelType.toLowerCase() === "sms") {
microservices-middleware/client/src/modules/otp/OtpPage.js:286:hardcoded object:            this.setState({ loading: false, error: JSON.stringify(error) });
microservices-middleware/client/src/modules/otp/OtpPage.js:287:hardcoded string:            if (channelType && channelType.toLowerCase() === "sms") {
microservices-middleware/client/src/modules/otp/OtpPage.js:288:hardcoded object:                this.setState({ resendOtpButtonDetails: { loading: false, disabled: false } });
microservices-middleware/client/src/modules/otp/OtpPage.js:294:hardcoded object:        if (!isEqual(nextProps.loading, this.props.loading)) this.setState({ loading: nextProps.loading });
microservices-middleware/client/src/modules/otp/OtpPage.js:295:hardcoded object:        if (!isEqual(nextProps.error, this.props.error)) this.setState({ error: nextProps.error });
microservices-middleware/client/src/modules/otp/OtpPage.js:300:hardcoded string:        const previousOtp = get(this.props.otpDetails, "otp");
microservices-middleware/client/src/modules/otp/OtpPage.js:302:hardcoded string:            await this.sendOtp("sms");
microservices-middleware/client/src/modules/otp/OtpPage.js:307:hardcoded array:        let fields = [];
microservices-middleware/client/src/modules/otp/OtpPage.js:308:hardcoded object:        const { error, loading } = this.state;
microservices-middleware/client/src/modules/otp/OtpPage.js:309:hardcoded object:        const { customerDetails } = this.props;
microservices-middleware/client/src/modules/otp/OtpPage.js:310:hardcoded string:        const featureConfig = get(this.props, 'authDetails.config.featureCheck', {});
microservices-middleware/client/src/modules/otp/OtpPage.js:311:hardcoded object:        const { isSSREnabled } = featureConfig;
microservices-middleware/client/src/modules/otp/OtpPage.js:312:hardcoded string:        let initialValues = { Email: get(customerDetails, "email") };
microservices-middleware/client/src/modules/otp/OtpPage.js:313:hardcoded string:        if (isSSREnabled === "true") {
microservices-middleware/client/src/modules/otp/OtpPage.js:315:hardcoded string:            initialValues = { ...initialValues, parentMobileNo: get(customerDetails, "parentMobileNo") }
microservices-middleware/client/src/modules/otp/OtpPage.js:318:hardcoded string:            initialValues = { ...initialValues, studentMobileNo: get(customerDetails, "studentMobileNo"), parentMobileNo: get(customerDetails, "parentMobileNo") }
microservices-middleware/client/src/modules/otp/OtpPage.js:324:hardcoded string:                <AppLayout step="otp"
microservices-middleware/client/src/modules/otp/OtpPage.js:325:hardcoded object:                    onClickNextBtn={this.verifyOtp}
microservices-middleware/client/src/modules/otp/OtpPage.js:326:hardcoded string:                    nextBtnText={"Create Order"}
microservices-middleware/client/src/modules/otp/OtpPage.js:327:hardcoded object:                    loading={loading}
microservices-middleware/client/src/modules/otp/OtpPage.js:328:hardcoded object:                    error={error}
microservices-middleware/client/src/modules/otp/OtpPage.js:329:hardcoded object:                    otpPageNeeded={true}
microservices-middleware/client/src/modules/otp/OtpPage.js:331:hardcoded string:                    {isSSREnabled == "true" && <InfoWrapper
microservices-middleware/client/src/modules/otp/OtpPage.js:332:hardcoded string:                        type="info"
microservices-middleware/client/src/modules/otp/OtpPage.js:333:hardcoded string:                        message="Note:"
microservices-middleware/client/src/modules/otp/OtpPage.js:336:hardcoded number:                                Effective 25th June 2020, Order confirmation process has changed. The revised process flow is:<br />
microservices-middleware/client/src/modules/otp/OtpPage.js:337:hardcoded number:                                <strong>Step 1:</strong> Customers will receive an SMS with order confirmation webpage link and order verification OTP.<br />
microservices-middleware/client/src/modules/otp/OtpPage.js:338:hardcoded number:                                <strong>Step 2:</strong> Customers will click on the link and they will be redirected to the order confirmation page to verify the order details..<br />
microservices-middleware/client/src/modules/otp/OtpPage.js:339:hardcoded number:                                <strong>Step 3:</strong> Customers has to verify the order details and can provide additional contact details for student-mentor support..<br />
microservices-middleware/client/src/modules/otp/OtpPage.js:340:hardcoded number:                                <strong>Step 4:</strong> Customers will enter the OTP received in the SMS to confirm the order details.<br />
microservices-middleware/client/src/modules/otp/OtpPage.js:341:hardcoded number:                                <strong>Step 5:</strong> Customers will then confirm Terms and Conditions (T&C) on the same webpage.<br />
microservices-middleware/client/src/modules/otp/OtpPage.js:342:hardcoded number:                                <strong>Step 6:</strong> Once the customer completes Step 5, this page will refresh automatically and you will be provided with the punched order details.<br /><br />
microservices-middleware/client/src/modules/otp/OtpPage.js:343:hardcoded string:                                In case, customer has not completed the process, the order details will not be displayed. You can also press "Refresh" button on this page to get an updated status of order confirmation
microservices-middleware/client/src/modules/otp/OtpPage.js:348:hardcoded object:                        fields={fields}
microservices-middleware/client/src/modules/otp/OtpPage.js:349:hardcoded object:                        isBordered={true}
microservices-middleware/client/src/modules/otp/OtpPage.js:350:hardcoded string:                        heading={"OTP"}
microservices-middleware/client/src/modules/otp/OtpPage.js:351:hardcoded object:                        initialValues={initialValues}
microservices-middleware/client/src/modules/otp/OtpPage.js:352:hardcoded object:                        wrappedComponentRef={(inst) => this.otpForm = inst}
microservices-middleware/client/src/modules/otp/OtpPage.js:355:hardcoded string:                        type="info"
microservices-middleware/client/src/modules/otp/OtpPage.js:357:hardcoded number:                            <p> If the order was initiated on or before 3rd July, please click on the resend button to send link to the customer
microservices-middleware/client/src/modules/otp/OtpPage.js:361:hardcoded string:                    {isSSREnabled == "false" && <Row type="flex" justify="center">
microservices-middleware/client/src/modules/otp/OtpPage.js:363:hardcoded string:                            <Button type="danger" style={{ margin: '10px' }} onClick={this.onClickEnterOtpLater}>Continue & Enter Otp Later</Button>
microservices-middleware/client/src/modules/otp/OtpPage.js:366:hardcoded string:                            <Button type="primary" style={{ margin: '10px' }} onClick={this.verifyOtp}>Enter Otp & Proceed</Button>{" "}
