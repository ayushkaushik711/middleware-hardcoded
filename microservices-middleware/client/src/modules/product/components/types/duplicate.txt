microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:1:hardcoded object:import React, { Component } from 'react';
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:2:hardcoded object:import { connect } from 'react-redux';
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:3:hardcoded object:import { get, find, map, isEmpty } from 'lodash';
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:4:hardcoded object:import { Divider } from 'antd';
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:6:hardcoded file path:import AntDFormBuilder from '../../../../components/form/AntDFormBuilder';
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:7:hardcoded object:import { saveProductDetails, addLoader, removeLoader, resetPrice, saveCashbackDetails } from '../../productReducer';
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:10:hardcoded number:    getFormattedValidity, isK12Class, getTablets, checkPrivTabletAccess, getAllAvailableTablets
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:11:hardcoded string:} from '../productHelper';
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:12:hardcoded file path:import CallApi from '../../../../api/callApi';
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:13:hardcoded file path:import ProductDetailsForm from '../ProducDetailsForm';
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:14:hardcoded file path:import FetchPrices from '../FetchPrices';
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:15:hardcoded file path:import ErrorWrapper from '../../../../components/ErrorWrapper';
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:16:hardcoded object:import { isEqual } from 'date-fns';
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:17:hardcoded object:import { productPermissions } from 'utility/screenPermission';
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:18:hardcoded object:import { getCurrentAcademicYear } from 'lib/validityHelper';
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:20:hardcoded variable:const mapStateToProps = state => ({
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:21:hardcoded string:    identifier: get(state, 'details.identifier'),
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:22:hardcoded string:    productDetails: get(state, 'product.details'),
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:23:hardcoded string:    productConfig: get(state, 'product.config'),
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:24:hardcoded string:    loading: get(state, 'product.loading'),
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:25:hardcoded string:    error: get(state, 'product.error'),
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:26:hardcoded string:    authDetails: get(state, 'auth.details'),
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:27:hardcoded string:    leadDetails: get(state, 'auth.leadDetails'),
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:30:hardcoded variable:const mapDispatchToProps = dispatch => ({
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:55:hardcoded object:            productConfig: {},
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:56:hardcoded array:            fields: []
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:61:hardcoded object:        const { includeCurrentYearTablet } = this.state;
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:62:hardcoded object:        const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:63:hardcoded variable:        const details = await productDetailsForm.getProductDetails();
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:64:hardcoded variable:        const currentYearTabletForm = this.currentYearTabletForm;
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:65:hardcoded variable:        const currentYearFormValues = includeCurrentYearTablet ?
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:67:hardcoded object:            {};
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:69:hardcoded string:        if (currentYearFormValues && details && get(details, 'productDetails')) {
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:70:hardcoded variable:            const payload = {
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:71:hardcoded string:                productType: 'crp',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:73:hardcoded string:                    ...get(details, 'productDetails'),
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:76:hardcoded string:                mentoringCount: get(details, 'mentoringCount'),
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:77:hardcoded string:                couponDetails: get(details, 'couponDetails')
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:82:hardcoded string:                url: '/api/product/crp'
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:88:hardcoded object:        const { identifier, user } = this.props;
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:89:hardcoded variable:        const payload = {
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:98:hardcoded string:                url: '/api/product/storeProductDetails',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:99:hardcoded string:                method: 'POST',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:102:hardcoded string:                const { productDetails, cashbackDetails } = get(response, 'data', {});
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:106:hardcoded object:                this.setState({ error: null });
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:108:hardcoded string:                this.navigateToScreen('address');
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:111:hardcoded object:                this.setState({ error });
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:117:hardcoded object:        const { history } = this.props;
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:118:hardcoded string:        const url = `/${path}${get(history, 'location.search')}`;
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:127:hardcoded object:        const { fetchComp } = this.refs;
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:130:hardcoded object:            const { status, productDetails } = fetchComp.getProductsAndFinalPrice();
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:132:hardcoded string:                if (status && productDetails && (get(productDetails, 'finalPrice') >= 0)) {
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:136:hardcoded string:                    this.setState({ error: 'Product Details Missing' });
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:139:hardcoded string:                const errMsg = get(error, 'message', 'Error') || error;
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:140:hardcoded object:                this.setState({ error: errMsg });
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:151:hardcoded string:        !selectedCourse && this.handleChanges('K10/K12', 'course');
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:153:hardcoded object:        const { productType, user } = this.props;
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:154:hardcoded array:        const { Products = [], Boards = [], CrpCities = [] } = productConfig || {};
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:156:hardcoded object:        const productConfiguration = find(Products, { formattedName: productType }) || {};
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:157:hardcoded object:        const { validity } = productConfiguration || {};
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:158:hardcoded variable:        const boardOptions = this.getCRPBoards(crpCity, Boards);
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:159:hardcoded object:        const selectedBoardConfig = find(Boards, { formattedName: crpBoard }) || {};
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:160:hardcoded variable:        const crpClasses = this.getCRPClasses(selectedBoardConfig);
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:161:hardcoded object:        const selectedClassConfig = find(selectedBoardConfig.classes, { class: crpClass }) || {};
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:163:hardcoded variable:        let fields = [
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:165:hardcoded string:                type: 'select',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:166:hardcoded string:                name: 'crpCity',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:167:hardcoded string:                label: 'Select City',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:168:hardcoded array:                options: CrpCities || [],
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:171:hardcoded string:                message: "Please select City"
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:173:hardcoded string:                type: 'hidden',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:174:hardcoded string:                name: 'crpCourse',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:175:hardcoded string:                label: 'Select Course',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:177:hardcoded string:                    label: 'K10/K12',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:178:hardcoded string:                    value: 'K10/K12'
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:180:hardcoded string:                value: 'K10/K12',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:181:hardcoded string:                message: "Please select Course"
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:183:hardcoded string:                type: 'select',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:184:hardcoded string:                name: 'crpBoard',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:185:hardcoded string:                label: 'Select Board',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:186:hardcoded string:                required: ["9", "10"].indexOf(crpClass) >= 0 ? true : false,
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:189:hardcoded string:                message: "Please select Board"
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:191:hardcoded string:                type: 'select',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:192:hardcoded string:                name: 'crpClass',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:193:hardcoded string:                label: 'Select CRP Class',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:197:hardcoded string:                message: "Please select Class"
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:199:hardcoded string:                type: isK12Class(crpClass) ? 'select' : 'hidden',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:200:hardcoded string:                name: 'crpSubCourse',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:201:hardcoded string:                label: 'Select Sub Course',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:202:hardcoded number:                required: isK12Class(crpClass),
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:203:hardcoded string:                options: get(selectedClassConfig, 'subCourses'),
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:205:hardcoded string:                message: "Please select Sub Course"
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:207:hardcoded string:                type: 'select',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:208:hardcoded object:                options: getFormattedValidity({ validity, user }),
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:209:hardcoded string:                name: 'crpValidity',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:210:hardcoded string:                label: 'Select Initial Validity',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:213:hardcoded string:                message: "Please Select Initial Validity"
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:215:hardcoded string:                type: (crpClass == "11+12") ? "hidden" : 'checkbox',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:216:hardcoded string:                name: 'includeCurrentYearTablet',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:218:hardcoded string:                checkBoxLabel: 'Include Tablet for Current Year',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:227:hardcoded variable:        const crpBoards = Boards.filter(board => {
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:228:hardcoded array:            const { crp, crpCities = [] } = board;
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:229:hardcoded string:            const boardCities = map(crpCities, 'value');
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:231:hardcoded number:            return (crp && boardCities.indexOf(city) >= 0);
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:234:hardcoded variable:        const filteredBoardOptions = crpBoards.map((board) => {
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:236:hardcoded string:                label: get(board, 'name'),
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:237:hardcoded string:                value: get(board, 'formattedName')
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:244:hardcoded array:        let crpClasses = [];
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:246:hardcoded string:            const classes = get(boardConfig, 'classes', []);
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:248:hardcoded variable:            const filterredClasses = classes.filter(grade => grade.crpAllowed);
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:250:hardcoded string:            crpClasses = filterredClasses.map(crpClass => get(crpClass, 'value'));
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:254:hardcoded string:                { label: "7", value: "7" },
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:255:hardcoded string:                { label: "8", value: "8" },
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:256:hardcoded string:                { label: "9", value: "9" },
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:257:hardcoded string:                { label: "10", value: "10" },
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:258:hardcoded string:                { label: "11", value: "11" },
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:259:hardcoded string:                { label: "12", value: "12" },
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:260:hardcoded string:                { label: "11+12", value: "11+12" }
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:268:hardcoded object:        const { includeCurrentYearTablet } = this.state;
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:269:hardcoded object:        const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:270:hardcoded variable:        const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:273:hardcoded string:        if (name === "crpCity") {
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:275:hardcoded string:                crpBoard: "",
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:276:hardcoded string:                crpClass: "",
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:277:hardcoded string:                crpSubCourse: ""
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:282:hardcoded string:        if (name === "crpBoard") {
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:284:hardcoded string:                crpClass: "",
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:285:hardcoded string:                crpSubCourse: ""
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:290:hardcoded string:        if (name === "crpClass" && includeCurrentYearTablet) {
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:291:hardcoded number:            this.setState({ currentYearClass: value - 1 });
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:292:hardcoded string:            if (value === "11+12") {
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:293:hardcoded object:                this.setState({ includeCurrentYearTablet: false });
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:298:hardcoded array:            [name]: value,
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:301:hardcoded string:            includeCurrentYearTablet: ["crpCity", "crpBoard"].indexOf(name) >= 0 ? false : includeCurrentYearTablet
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:306:hardcoded object:        const { crpClass } = this.state;
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:307:hardcoded number:        this.setState({ [name]: checked, currentYearClass: crpClass - 1 });
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:312:hardcoded array:            [name]: value,
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:318:hardcoded object:        const { crpClass, currentYearClass } = this.state;
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:319:hardcoded variable:        const currentYearTabletFields = this.getCurrentYearTabletFields();
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:320:hardcoded number:        const isCurrentClassIsK12Class = isK12Class(currentYearClass);
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:321:hardcoded object:        const { user, leadDetails } = this.props;
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:323:hardcoded variable:        const fields = [
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:325:hardcoded string:                type: 'hidden',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:326:hardcoded string:                name: 'currentYearCourse',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:327:hardcoded string:                label: 'Select Course',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:328:hardcoded string:                options: [{ label: 'K10/K12', value: 'K10/K12' }],
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:329:hardcoded string:                value: 'K10/K12',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:330:hardcoded string:                message: "Please select Course"
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:332:hardcoded string:                type: 'select',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:333:hardcoded string:                name: 'currentYearBoard',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:334:hardcoded string:                label: 'Select Board',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:336:hardcoded string:                options: get(currentYearTabletFields, 'boards'),
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:338:hardcoded string:                message: "Please select Board"
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:340:hardcoded string:                type: 'text',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:341:hardcoded string:                name: 'currentYearClass',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:342:hardcoded string:                label: 'Current Year Class',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:347:hardcoded number:                value: crpClass && (crpClass - 1),
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:348:hardcoded string:                message: "Please select Class"
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:350:hardcoded string:                type: isCurrentClassIsK12Class ? 'select' : 'hidden',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:351:hardcoded string:                name: 'currentYearSubCourse',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:352:hardcoded string:                label: 'Select Sub Course',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:353:hardcoded number:                required: isCurrentClassIsK12Class ? true : false,
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:354:hardcoded string:                options: get(currentYearTabletFields, 'subCourses'),
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:356:hardcoded string:                message: "Please select Sub Course"
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:358:hardcoded string:                type: 'tag',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:359:hardcoded string:                name: 'validity',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:360:hardcoded string:                label: 'Validity',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:361:hardcoded object:                text: `MAY ${getCurrentAcademicYear()}`
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:363:hardcoded string:                type: 'select',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:364:hardcoded string:                name: 'currentYearTablet',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:365:hardcoded string:                label: 'Select Tablet',
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:366:hardcoded string:                options: checkPrivTabletAccess(leadDetails, user) ? getAllAvailableTablets() : getTablets({ tablets: get(currentYearTabletFields, 'tablets'), user }),
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:368:hardcoded string:                message: "Please select Tablet"
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:371:hardcoded variable:        const initialValues = {
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:372:hardcoded number:            currentYearClass: crpClass && (crpClass - 1)
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:377:hardcoded string:                heading="Current Year Tablet"
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:378:hardcoded object:                wrappedComponentRef={(inst) => this.currentYearTabletForm = inst}
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:379:hardcoded object:                fields={fields}
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:380:hardcoded object:                initialValues={initialValues}
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:386:hardcoded variable:        const fields = {
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:387:hardcoded string:            "boards": [
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:388:hardcoded string:                { label: 'CBSE', value: 'CBSE' },
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:389:hardcoded string:                { label: 'ICSE', value: 'ICSE' }
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:391:hardcoded string:            "classes": [
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:392:hardcoded string:                { label: '6', value: '6' },
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:393:hardcoded string:                { label: '7', value: '7' },
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:394:hardcoded string:                { label: '8', value: '8' },
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:395:hardcoded string:                { label: '9', value: '9' },
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:396:hardcoded string:                { label: '10', value: '10' },
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:397:hardcoded string:                { label: '11', value: '11' }
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:399:hardcoded string:            "tablets": [
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:401:hardcoded string:                { label: "K-12 Lenovo Tablet (Add-on - BYJUS) (7 inch)(Rs. 5000)", value: "934599" },
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:402:hardcoded string:                { label: "LENOVO CALLING ADD-ON (BYJU'S)(Rs. 7000)", value: "866186" },
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:403:hardcoded string:                { label: "K-12 Lenovo Tablet (Add-on - BYJUS) (10 inch)(Rs. 12500)", value: "940166" },
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:404:hardcoded string:                { label: "K-12 Lenovo Tablet (Add-on-BYJUS) (8 inch)", value: "1735413" },
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:405:hardcoded string:                { label: "BYJU'S Learn Pad 10inch Wifi Tablet", value: "TBXWZZ"}
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:407:hardcoded string:            "subCourses": [
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:408:hardcoded string:                { label: "JEE", value: "JEE" },
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:409:hardcoded string:                { label: "NEET", value: "NEET" },
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:410:hardcoded string:                { label: "JEE+NEET", value: "JEE/NEET" },
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:411:hardcoded string:                { label: "Commerce", value: "Commerce" }
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:419:hardcoded object:        this.setState({ error });
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:425:hardcoded object:            this.setState({ productConfig: nextProps.productConfig }, async () => {
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:433:hardcoded object:        const { productDetails, productConfig, productType } = this.props;
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:435:hardcoded string:        if (productType === get(productDetails, 'productType')) {
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:436:hardcoded string:            const formValues = get(productDetails, 'students[0].formValues');
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:440:hardcoded string:                course: get(formValues, 'course'),
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:441:hardcoded string:                crpBoard: get(formValues, 'crpBoard'),
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:442:hardcoded string:                crpClass: get(formValues, 'crpClass'),
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:443:hardcoded string:                crpCity: get(formValues, 'crpCity'),
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:444:hardcoded string:                currentYearClass: get(formValues, 'currentYearClass'),
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:445:hardcoded string:                isMiscellaneousReq: get(formValues, 'isMiscellaneousReq')
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:450:hardcoded string:        this.setState({ productConfig, course: 'K10/K12' });
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:454:hardcoded object:        const { error, productConfig, productDetails, includeCurrentYearTablet } = this.state;
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:455:hardcoded object:        const { changeNextBtnMode, productType } = this.props;
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:457:hardcoded array:        const fields = productConfig ? this.getFields() : [];
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:460:hardcoded object:                <ErrorWrapper error={error} />
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:462:hardcoded string:                    ref="productDetailsForm"
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:463:hardcoded object:                    productType={productType}
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:464:hardcoded object:                    fields={fields}
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:465:hardcoded object:                    initialValues={getProductFormInitialValue(productDetails)}
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:470:hardcoded object:                            {this.buildCurrenYearTabletForm()}
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:475:hardcoded string:                    ref='fetchComp'
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:476:hardcoded object:                    onClickFetchPrices={this.onClickFetchPrices}
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:477:hardcoded object:                    getProductDetails={this.getProductDetails}
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:478:hardcoded object:                    changeNextBtnMode={changeNextBtnMode}
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:479:hardcoded object:                    productType={productType}
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:480:hardcoded object:                    setError={this.setError}
microservices-middleware/client/src/modules/product/components/types/CRPProduct.js:488:hardcoded object:export default connect(mapStateToProps, mapDispatchToProps, null, { forwardRef: true })(CRPProduct);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1:hardcoded object:import React, { Component, Fragment } from 'react';
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:2:hardcoded object:import { connect } from 'react-redux';
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:3:hardcoded object:import { get, find, remove, isEmpty, flattenDeep, size } from 'lodash';
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:4:hardcoded object:import { Button } from 'reactstrap';
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:5:hardcoded object:import { Alert } from 'antd';
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:6:hardcoded file path:import CallApi from 'api/callApi';
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:8:hardcoded object:import { productPermissions } from 'utility/screenPermission';
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:9:hardcoded object:import { saveProductDetails, addLoader, removeLoader, resetPrice, saveCashbackDetails } from '../../productReducer';
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:12:hardcoded number:    getFormattedValidity, isK12Class, getCourseTypeOption, isPreK3Class, initialGradeOptionForNeo,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:13:hardcoded number:    getMentoringClassMap, isK3orPreKClass, getK3orPreKTablets, getTablets, getOneToManyMentoringClassMap,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:18:hardcoded string:} from '../productHelper';
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:19:hardcoded file path:import ClassTypeForm from '../ClassTypeForm'
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:20:hardcoded file path:import ProductDetailsForm from '../ProducDetailsForm';
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:21:hardcoded file path:import FetchPrices from '../FetchPrices';
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:22:hardcoded file path:import ErrorWrapper from 'components/ErrorWrapper';
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:23:hardcoded object:import { isEqual } from 'lodash';
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:24:hardcoded file path:import InfoWrapper from 'components/InfoWrapper';
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:25:hardcoded file path:import OneToMany from '../mentoring/OneToManyMentoring';
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:26:hardcoded object:import { validateBhlpMentoringDetails, validateByjusClassesMentoringDetails } from '../mentoring/MentoringHelper';
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:27:hardcoded file path:import ByjusMentoringClasses from '../mentoring/ByjusMentoringClasses';
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:30:hardcoded number:    ELIGIBLE_COMBINATIONS_FOR_BATCH, ELIGIBLE_COMBINATIONS_FOR_TLP_PLUS_BYJUS_CLASSES_PLUS_TLP, D4_TABLET_LIST, isAdvanceAdmission,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:31:hardcoded number:    D4_1_1_TABLET_LIST, deviceTypeEligibleGrades, BELP_K3_GRADES, K10_GRADES ,K12_GRADES, IS_UPGRADE_VERTICAL,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:32:hardcoded string:} from '../../utils/productConstant';
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:33:hardcoded object:import { getSiblingFormFields, getProductLearningType, getInfoBlockForAdvanceCourses, isProficiencyAndFotAvailable, getBatchesEligibility, getTodAndDocFields } from '../../utils/ByjusClassesHelper';
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:34:hardcoded file path:import Proficiency from 'modules/student/Proficiency';
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:35:hardcoded file path:import School from 'modules/student/School';
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:36:hardcoded file path:import ByjusMathMentoringClasses from '../mentoring/ByjusMathMentoringClasses';
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:38:hardcoded variable:const mapStateToProps = state => ({
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:39:hardcoded string:    authDetails: get(state, 'auth.details'),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:40:hardcoded string:    leadDetails: get(state, 'auth.leadDetails'),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:41:hardcoded string:    salesDetails: get(state, "details.salesDetails"),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:42:hardcoded string:    user: get(state, "auth.details.user", {}),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:43:hardcoded string:    identifier: get(state, 'details.identifier'),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:44:hardcoded string:    existingProfiles: get(state, 'product.existingProfiles'),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:45:hardcoded string:    showProfileSelectionOption: get(state, 'product.showProfileSelectionOption'),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:46:hardcoded string:    productDetails: get(state, 'product.details'),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:47:hardcoded string:    productConfig: get(state, 'product.config'),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:48:hardcoded string:    loading: get(state, 'product.loading'),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:49:hardcoded string:    error: get(state, 'product.error')
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:52:hardcoded variable:const mapDispatchToProps = dispatch => ({
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:74:hardcoded number:            minStudentCount: 2,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:75:hardcoded number:            formCount: 1,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:76:hardcoded number:            maxStudentCount: 0,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:77:hardcoded array:            formCountArray: [],
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:82:hardcoded object:            productConfig: {},
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:83:hardcoded array:            fields: [],
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:86:hardcoded object:            selectedProfile: {},
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:88:hardcoded number:            isD4Available: false,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:89:hardcoded array:            tabletMappingList: [],
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:90:hardcoded string:            classType: "neo",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:92:hardcoded number:            isV4Batch: true
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:97:hardcoded object:        let { env, productDetails, studentMarksDetails, byjusClassesFormValue, schoolAndProficiencyDetails } = details
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:103:hardcoded string:            doubtClassDetails: get(byjusClassesFormValue, "formValue.selectedDoubtClass", null),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:104:hardcoded string:            electiveDetails: get(byjusClassesFormValue, "formValue.electivesDetails", null),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:105:hardcoded string:            languageOfInstruction: get(byjusClassesFormValue, "formValue.languageOfInstruction", null),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:106:hardcoded string:            languageOfInstructionId: get(byjusClassesFormValue, "formValue.languageOfInstructionId", null)
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:113:hardcoded object:        const { productCombination, identifier, existingProfiles, authDetails, productConfig, leadDetails } = this.props;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:114:hardcoded array:        const { Boards = [] } = productConfig || {};
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:115:hardcoded object:        const { env, featureEnableList } = authDetails;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:116:hardcoded string:        const isEpicEnabled = get(featureEnableList, 'epic_enable_user_list', "");
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:117:hardcoded string:        const isEpicSamplerEnabled = get(featureEnableList, "byjusmath_epic_sampler_bda");
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:118:hardcoded string:        const isD4TabletEnabled = get(featureEnableList, 'd41.1_tablet_access_for_bda');
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:119:hardcoded string:        const isDevEnv = ["development", "local"].includes(env);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:120:hardcoded string:        const isLocalEnv = ['local'].includes(env);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:121:hardcoded object:        const { formCountArray, formCount, classType } = this.state;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:122:hardcoded array:        let students = [];
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:123:hardcoded number:        let mentoringCount = 0;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:124:hardcoded object:        let couponDetails = {};
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:125:hardcoded variable:        let siblingCount = formCountArray.length;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:126:hardcoded array:        let oneToManyMentoringDetails = [], bhlpCourseDetails = [], byjusClassesMentoringDetails = [];
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:128:hardcoded number:        const tabletInfo = this.getAvailableD4ForSharing();
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:129:hardcoded number:        const { tabletMappingList = [], isD4Available } = tabletInfo || {};
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:130:hardcoded number:        this.setState({ isD4Available, tabletMappingList });
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:131:hardcoded string:        const workshopChannel = get(leadDetails, "Workshop_channel", '') || get(leadDetails, 'workshopChannel', '');
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:132:hardcoded variable:        let isbyjusMathSku = true;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:134:hardcoded number:        for (var i = 0; i < siblingCount; i++) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:135:hardcoded variable:            const lastSibling = formCount == siblingCount;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:136:hardcoded array:            const form = this.refs[`productDetailsForm-${formCountArray[i]}`];
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:137:hardcoded array:            const mentoringForm = this.refs[`oneToManyDetailsForm-${formCountArray[i]}`]
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:138:hardcoded array:            const byjusClassesMentoringForm = this.refs[`byjusClassesDetailsForm-${formCountArray[i]}`]
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:139:hardcoded array:            const schoolForm = this.refs[`schoolForm-${formCountArray[i]}`]
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:140:hardcoded array:            const proficiencyForm = this.refs[`proficiencyForm-${formCountArray[i]}`]
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:141:hardcoded array:            const byjusMathDetailsForm = this.refs[`byjusMathDetailsForm-${formCountArray[i]}`]
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:143:hardcoded variable:            const oneToManyFormValue = mentoringForm && await mentoringForm.getMentoringValues()
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:144:hardcoded variable:            const byjusClassesFormValue = byjusClassesMentoringForm && await byjusClassesMentoringForm.getMentoringValues();
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:145:hardcoded variable:            const studentMarksDetails = proficiencyForm && await proficiencyForm.getStudentAcademicDetails();
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:146:hardcoded variable:            const schoolAndProficiencyDetails = schoolForm && await schoolForm.getSchoolDetails()
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:147:hardcoded object:            const details = await form.getProductDetails() || {};
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:149:hardcoded string:            let productDetails = get(details, 'productDetails') || {};
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:150:hardcoded string:            let productLearningType = get(productDetails, 'productLearningType')
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:151:hardcoded variable:            const deviceType = this.getDeviceType(productDetails);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:152:hardcoded array:            const tabletId = this.state[`tabletId-${formCountArray[i]}`];  
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:154:hardcoded string:            productDetails['featureTag'] = getFeatureTag({tablet: tabletId, isD4TabletEnabled})
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:156:hardcoded string:            let initialClass = get(productDetails, 'initialClass')
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:157:hardcoded string:            const dbelByjusMathSampler =  isbyjusMathSku && ['tlp', 'byjus_tlp', 'byjus_classes'].includes(productCombination) && BELP_K3_GRADES.includes(initialClass) ? true : false
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:158:hardcoded variable:            const byjusMathDetailsFormValues = byjusMathDetailsForm && await byjusMathDetailsForm.getMentoringValues()
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:169:hardcoded string:                productDetails['sharedD4tablet'] = this.state[`sharedD4tablet-${formCountArray[i]}`];
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:170:hardcoded string:                productDetails['tabletId'] = this.state[`tabletId-${formCountArray[i]}`];
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:172:hardcoded string:                    productDetails['bfsBatch'] = "1:6";
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:173:hardcoded string:                    productDetails['bfsProductType'] = "16";
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:176:hardcoded string:            productDetails['deviceType'] = deviceType
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:178:hardcoded string:                productDetails['mentoringDetails'] = get(byjusMathDetailsFormValues, 'mentoring', []);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:179:hardcoded string:                productDetails['bhlpCourseDetails'] = get(byjusMathDetailsFormValues, 'courseInfo', {});
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:186:hardcoded variable:                const response = validateBhlpMentoringDetails(oneToManyFormValue, productDetails);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:187:hardcoded string:                oneToManyMentoringDetails = get(response, "oneToManyMentoringDetails", []);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:188:hardcoded string:                bhlpCourseDetails = get(response, "bhlpCourseDetails", []);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:194:hardcoded array:            productLearningType = this.getAvailableProductLearningType(formCountArray[i]);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:196:hardcoded string:            if (ELIGIBLE_COMBINATIONS_FOR_BATCH.includes(productCombination) && ["byjus_classes_plus_byjus_tlp", "byjus_classes"].includes(productLearningType)) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:199:hardcoded variable:                const response = validateByjusClassesMentoringDetails(byjusClassesFormValue, productDetails);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:200:hardcoded string:                byjusClassesMentoringDetails = get(response, "byjusClassesMentoringDetails", []);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:201:hardcoded string:                bhlpCourseDetails = get(response, "bhlpCourseDetails", []);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:208:hardcoded string:            if (classType == "neo" && productCombination == "byjus_classes" && ["byjus_classes_plus_byjus_tlp", "byjus_classes"].includes(productLearningType)) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:209:hardcoded object:                productDetails = this.getUpdatedProductDetails({ env, productDetails, studentMarksDetails, byjusClassesFormValue, schoolAndProficiencyDetails })
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:211:hardcoded number:            /**If any sibling data is empty , make siblingCount as 0 and student Array empty to collect data first */
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:212:hardcoded number:            !isEmpty(productDetails) ? students.push(productDetails) : (students = [] && (siblingCount = 0));
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:213:hardcoded string:            mentoringCount = lastSibling && get(details, 'mentoringCount');
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:214:hardcoded string:            couponDetails = lastSibling && get(details, 'couponDetails');
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:219:hardcoded variable:            const payload = {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:221:hardcoded string:                productType: 'sibling',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:226:hardcoded string:                mentoringDetails: productCombination === "home_learning_program" ? oneToManyMentoringDetails : byjusClassesMentoringDetails, // To track other mentoring details
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:231:hardcoded string:                loggedInMobile: get(leadDetails, 'studentMobile', ''),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:232:hardcoded number:                isV4Batch: this.state.isV4Batch
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:234:hardcoded string:            if (classType == "neo") {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:235:hardcoded string:                // if(isDevEnv && productCombination === 'byjus_classes' && classType == "neo") {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:238:hardcoded string:                //         url:'/api/neo/product/siblingProduct'
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:243:hardcoded string:                        url: '/api/neo/product/sibling'
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:249:hardcoded string:                    url: '/api/product/sibling'
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:256:hardcoded object:        const { productCombination } = productDetails
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:257:hardcoded object:        const { identifier } = this.props;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:258:hardcoded variable:        const payload = {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:264:hardcoded string:            if (["byjus_classes"].includes(productCombination)) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:265:hardcoded string:                payload["productDetails"] = formatByjusClassesFormValues(productDetails);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:270:hardcoded string:                url: '/api/product/storeProductDetails',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:271:hardcoded string:                method: 'POST',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:274:hardcoded string:                const { productDetails, cashbackDetails } = get(response, 'data', {});
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:278:hardcoded object:                this.setState({ error: null });
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:280:hardcoded string:                this.navigateToScreen('address');
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:282:hardcoded object:                this.setState({ error }, () => {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:283:hardcoded object:                    this.setState({ error });
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:291:hardcoded object:        const { history } = this.props;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:292:hardcoded string:        const url = `/${path}${get(history, 'location.search')}`;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:301:hardcoded object:        const { fetchComp } = this.refs;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:302:hardcoded object:        const { isBooksOpted } = this.props;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:305:hardcoded object:            const { status, productDetails } = fetchComp.getProductsAndFinalPrice();
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:307:hardcoded string:                if (status && productDetails && (get(productDetails, 'finalPrice') >= 0)) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:308:hardcoded string:                    productDetails["isBooksOpted"] = isBooksOpted;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:312:hardcoded string:                    this.setState({ error: 'Product Details Missing' });
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:315:hardcoded string:                const errMsg = get(error, 'message', 'Error') || error;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:316:hardcoded object:                this.setState({ error: errMsg });
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:323:hardcoded array:        let rule = []
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:324:hardcoded string:        if (countryCode === '+91') {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:326:hardcoded number:                pattern: new RegExp(/^(\+\d{1,3}[- ]?)?\d{10}$/), message: `Enter 10 digit valid Mobile No`
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:334:hardcoded string:            { label: "Byjus Classes", value: "byjus_classes" },
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:335:hardcoded string:            { label: "BTLP+Byjus Classes(Future Courses)", value: "byjus_tlp_plus_byjus_classes" },
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:336:hardcoded string:            { label: "Byjus Classes+BTLP", value: "byjus_classes_plus_byjus_tlp" },
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:337:hardcoded string:            { label: "Byjus-TLP", value: "byjus_tlp" }]
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:340:hardcoded number:    //fetch options to get available D4 tablets for sharing
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:341:hardcoded number:    getD4TabletOptions = () => {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:342:hardcoded object:        const { productType } = this.props;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:343:hardcoded object:        const { formCountArray, productConfig = {} } = this.state;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:344:hardcoded array:        let { Products = [] } = productConfig;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:345:hardcoded object:        const productConfiguration = find(Products, { formattedName: productType }) || {};
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:346:hardcoded object:        const { tablets } = productConfiguration || {};
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:347:hardcoded array:        const tabletSelected = [];
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:348:hardcoded number:        for (var i = 0; i < formCountArray.length; i++) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:349:hardcoded number:            if (this.state[`sharedD4tablet-${formCountArray[i]}`]) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:350:hardcoded number:                tabletSelected.push(this.state[`sharedD4tablet-${formCountArray[i]}`]);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:353:hardcoded array:        const res = [];
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:354:hardcoded number:        for (var i = 0; i < tabletSelected.length; i++) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:355:hardcoded string:            const val = tabletSelected[i].split("-")[0];
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:356:hardcoded string:            const siblingName = tabletSelected[i].split("-")[1];
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:357:hardcoded variable:            const result = tablets.filter(f => val.includes(f.value));
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:358:hardcoded number:            const label = `${result[0].label}-${siblingName}`;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:359:hardcoded variable:            const option = {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:360:hardcoded array:                label, value: tabletSelected[i]
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:367:hardcoded number:    getSelectedD4TabletOptions = () =>{
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:368:hardcoded string:        return [{label: "Yes", value: true}, {label: "No", value: false}]
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:372:hardcoded object:        const { selectedProfile, formCountArray } = this.state;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:373:hardcoded object:        const { existingProfiles, user, authDetails } = this.props;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:374:hardcoded variable:        const isPrivilegedUser = checkIsPrivilegedUser(user);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:375:hardcoded variable:        let profilesSaved = existingProfiles;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:377:hardcoded variable:            const formName = get(this.state, form)
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:378:hardcoded string:            if (formName && formName !== 'newProfile' && form !== formNumber) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:379:hardcoded variable:                const indexToRemove = profilesSaved.findIndex(profile => profile.value == formName)
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:380:hardcoded array:                let tempVarToExchangeData = []
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:381:hardcoded number:                if (indexToRemove >= 0) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:382:hardcoded number:                    tempVarToExchangeData = profilesSaved.slice(0, indexToRemove)
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:383:hardcoded number:                    tempVarToExchangeData.push(...profilesSaved.slice(indexToRemove + 1, profilesSaved.length))
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:389:hardcoded number:        if (existingProfiles && existingProfiles.length > 0) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:390:hardcoded variable:            let newExistingProfile = existingProfiles;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:391:hardcoded string:            newExistingProfile = newExistingProfile.find(profile => profile.value === "newProfile");
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:393:hardcoded string:                existingProfiles.push({ "label": "New Profile", value: "newProfile" })
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:400:hardcoded string:        let productLearningType = this.state[`productLearningType_${formNumber}`] || "";
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:401:hardcoded string:        if (productLearningType.indexOf("ADVANCE_ADMISSION_PLUS_BYJUS_CLASSES") >= 0) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:402:hardcoded string:            productLearningType = "advance_admission_plus_byjus_classes"
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:404:hardcoded string:        else if (productLearningType.indexOf("_BYJUS_CLASSES_PLUS_BYJUS_TLP") >= 0) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:405:hardcoded string:            productLearningType = "byjus_classes_plus_byjus_tlp"
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:406:hardcoded string:        } else if (productLearningType.indexOf("JUMPSTART_ADMISSION") >= 0) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:407:hardcoded string:            productLearningType = "jumpstart_admission"
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:408:hardcoded string:        } else if (productLearningType.indexOf("_BYJUS_TLP_PLUS_BYJUS_CLASSES") >= 0) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:409:hardcoded string:            productLearningType = "byjus_tlp_plus_byjus_classes"
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:410:hardcoded string:        } else if (productLearningType.indexOf("_BYJUS_CLASS") >= 0) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:411:hardcoded string:            productLearningType = "byjus_classes"
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:412:hardcoded string:        } else if (productLearningType.indexOf("_HLP") >= 0) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:413:hardcoded string:            productLearningType = "home_learning_program"
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:415:hardcoded string:            productLearningType = "byjus_tlp"
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:421:hardcoded object:        const { tablet, initialClass } = productDetails;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:424:hardcoded number:          if (D4_1_1_TABLET_LIST.includes(tablet)) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:425:hardcoded string:            deviceType = "Tablet(LearnStation)"
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:428:hardcoded string:            deviceType = "SD Card Only"
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:431:hardcoded string:            deviceType = "Tablet(Lenovo/Samsung)"
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:439:hardcoded object:        const { selectedInitialClass, validity, productLearningType, selectedFinalClass, state, selectedBoard } = details
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:440:hardcoded object:        const { user, authDetails } = this.props
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:441:hardcoded object:        const { env } = authDetails;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:442:hardcoded string:        const isDevEnv = ["development", "local"].includes(env)
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:444:hardcoded array:        let options = []
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:446:hardcoded object:            options = getFormattedValidity({ validity, user, initialClass: selectedInitialClass, productCombination: productLearningType, authDetails, isDevEnv, finalClass: selectedFinalClass, state, selectedBoard })
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:452:hardcoded number:        const { Tablets, tablets, selectedInitialClass, D4EligibleManagers, formNumber, MeTablets, selectedFinalClass } = details
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:453:hardcoded object:        const { user, salesDetails, authDetails, leadDetails, productCombination } = this.props
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:454:hardcoded object:        const { subCourse: selectedSubCourse } = this.state
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:455:hardcoded string:        const env = get(authDetails, "env")
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:456:hardcoded object:        const selectedIsStreaming = get(this.state, `isStreaming-${formNumber}`);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:458:hardcoded array:        let options = []
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:459:hardcoded number:        if (isK3orPreKClass(selectedInitialClass)) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:460:hardcoded number:            options = getK3orPreKTablets({ Tablets, user, selectedClass: selectedInitialClass, salesDetails, authDetails, D4EligibleManagers, leadDetails, productCombination, MeTablets })
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:462:hardcoded number:            options = getTablets({ tablets, user, selectedClass: selectedInitialClass, salesDetails, authDetails, D4EligibleManagers, leadDetails, selectedSubCourse, productCombination, env, MeTablets })
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:465:hardcoded string:            options = options.filter(tab => !["BYJU'S LearnStation 10inch Mobile Data Grey Tablet (Rs 10000)", "Lenovo 8 inch Tablet (Mobile Data) - V2 (Rs 13000)"].includes(tab.label))
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:467:hardcoded string:        if (['11', '12', '12+','13+'].includes(selectedInitialClass) || ['11', '12', '12+','13+'].includes(selectedFinalClass)) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:468:hardcoded string:            options = options.filter(name => name.label !== "BYJU'S Learn Station 10inch Wifi White Tablet (Rs 13000)")
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:469:hardcoded string:            options = options.filter(tab => tab.value !== "TS8MZZ")
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:471:hardcoded number:        if (K10_GRADES.includes(selectedInitialClass)) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:472:hardcoded string:            options = options.filter(name => name.label !== "BYJU'S LearnStation Junior 10inch Mobile Data Grey Tablet (Rs 16000)")
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:474:hardcoded string:        // if (["byjus_tlp", "byjus_classes"].includes(productCombination) && K10_GRADES.includes(selectedInitialClass)){
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:475:hardcoded string:        //     options = options.filter(name =>  !["Lenovo 10 inch Tablet Mobile Data (4GB/ 64GB) - (Rs 16000)", "Lenovo 10 inch Tablet Mobile Data - V2(Rs. 16000)"].includes(name.label))
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:480:hardcoded number:    getD4SDCardType = (details) => {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:481:hardcoded object:        const { selectedTablet, selectedInitialClass, user } = details
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:482:hardcoded object:        const { authDetails } = this.props
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:483:hardcoded number:        const { isD4Available } = this.state
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:484:hardcoded string:        const env = get(authDetails, "env")
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:485:hardcoded string:        let type = "checkbox"
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:486:hardcoded string:        if (selectedTablet || env == "production" || isPreK3Class(selectedInitialClass) || isD4Available) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:487:hardcoded string:            type = "hidden"
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:489:hardcoded string:        if ((selectedTablet || env === "production" || isK12Class(selectedInitialClass)) || isD4Available) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:490:hardcoded string:            type = "hidden"
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:496:hardcoded string:        const student = get(existingProfiles.find(profile => profile.value === selectedProfile), 'label')
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:497:hardcoded string:        const studentName = student ? student.split('-')[1] : ''
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:498:hardcoded string:        const premiumId = student ? student.split('-')[0] : ''
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:499:hardcoded object:        const values = get(this.state, `formValues-${formNumber}`);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:502:hardcoded array:            [`${formNumber}Name`]: studentName,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:503:hardcoded array:            [`formValues-${formNumber}`]: { ...values, siblingName: studentName },
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:504:hardcoded array:            [`siblingName-${formNumber}`]: studentName,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:505:hardcoded array:            [`premiumId-${formNumber}`]: premiumId
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:510:hardcoded number:        const { formCountArray, classType, isD4Available = false } = this.state
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:511:hardcoded object:        const { productCombination } = this.props;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:512:hardcoded object:        const { showProfileSelectionOption, existingProfiles, authDetails, salesDetails, leadDetails } = this.props;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:513:hardcoded variable:        const productConfig = get(this.state, `productConfig`);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:515:hardcoded string:        const selectedCourse = get(this.state, `course-${formNumber}`, 'K10/K12');
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:516:hardcoded object:        const selectedBoard = get(this.state, `board-${formNumber}`);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:517:hardcoded object:        const selectedState = get(this.state, `state-${formNumber}`);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:518:hardcoded object:        const selectedInitialClass = get(this.state, `initialClass-${formNumber}`);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:519:hardcoded object:        const selectedFinalClass = get(this.state, `finalClass-${formNumber}`);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:520:hardcoded object:        const selectedTlpFinalClass = get(this.state, `tlpFinalGrade-${formNumber}`);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:521:hardcoded object:        const selectedByjusClassFinalGrade = get(this.state, `byjusClassFinalGrade-${formNumber}`)
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:522:hardcoded object:        const selectedTablet = get(this.state, `tablet-${formNumber}`);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:523:hardcoded number:        const selectedD4Tablet = get(this.state, `d4tablet-${formNumber}`);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:524:hardcoded number:        const selectedD4IsShared= get(this.state, `isD4Shared-${formNumber}`);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:525:hardcoded object:        const selectedSubCourse = get(this.state, `subCourse-${formNumber}`);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:526:hardcoded object:        const selectedIsStreaming = get(this.state, `isStreaming-${formNumber}`);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:528:hardcoded object:        const { productType, user } = this.props;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:529:hardcoded object:        const { vertical } = user;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:530:hardcoded number:        const { Products = [], Courses = [], Boards = [], Tablets = [], D4EligibleManagers = [], MeTablets = [] } = productConfig || {};
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:532:hardcoded object:        const productConfiguration = find(Products, { formattedName: productType }) || {};
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:533:hardcoded object:        const { validity, tablets } = productConfiguration || {};
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:534:hardcoded object:        const selectedCourseConfig = find(Courses, { formattedName: selectedCourse }) || {};
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:535:hardcoded object:        const selectedBoardConfig = find(Boards, { formattedName: selectedBoard }) || {};
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:537:hardcoded variable:        const mentoringClassMap = getMentoringClassMap(selectedBoardConfig.classes);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:538:hardcoded variable:        const oneToManyMentoringClassMap = getOneToManyMentoringClassMap(selectedBoardConfig.classes);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:539:hardcoded variable:        const byjusClassesMap = getByjusClassesMap(selectedBoardConfig.classes);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:540:hardcoded variable:        const isPrivilegedUser = checkIsPrivilegedUser(user);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:542:hardcoded variable:        const productLearningType = this.getAvailableProductLearningType(formNumber);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:544:hardcoded object:        const subCourses = getSubCourses({ productLearningType, selectedBoardConfig, selectedFinalClass, tlpFinalGrade: selectedTlpFinalClass, byjusClassFinalGrade: selectedByjusClassFinalGrade });
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:545:hardcoded variable:        const subCourseOptions = subCourses && fetchSubCourseOptions(productLearningType, subCourses, selectedInitialClass, productLearningType, selectedTlpFinalClass)
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:547:hardcoded string:        const accountNumber = get(leadDetails, "accountNumber", '')
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:548:hardcoded string:        const env = get(authDetails, "env");
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:549:hardcoded string:        const isDevEnv = ["development", "local"].includes(env);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:552:hardcoded variable:        let fields = [
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:554:hardcoded string:                type: (showProfileSelectionOption && this.getProfileOptions(formNumber).length > 0 ? 'radio' : 'hidden'),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:556:hardcoded string:                name: 'userProfile',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:557:hardcoded string:                label: 'Choose Profile Type',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:559:hardcoded string:                message: "Please Choose Profile Type",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:561:hardcoded string:                    display: 'block',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:562:hardcoded string:                    height: '30px',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:563:hardcoded string:                    lineHeight: '30px',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:565:hardcoded string:                initialValues: this.getProfileOptions(formNumber)?.length == 0 ? 'newProfile' : '',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:566:hardcoded number:                required: (showProfileSelectionOption && this.getProfileOptions(formNumber).length > 0 ? true : false)
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:569:hardcoded string:                type: productCombination === "byjus_classes" ? 'select' : "hidden",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:570:hardcoded string:                name: 'productLearningType',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:571:hardcoded string:                label: 'Choose Product Learning Type',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:572:hardcoded string:                message: "Please Select Product Learning Type",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:573:hardcoded string:                options: getProductLearningType({ productType: "sibling", isPrivilegedUser,isDevEnv }),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:575:hardcoded string:                required: productCombination === "byjus_classes" ? true : false
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:577:hardcoded string:                type: 'text',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:578:hardcoded string:                name: 'siblingName',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:579:hardcoded string:                label: 'Sibling Name',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:581:hardcoded object:                disabled: get(this.state, `${formNumber}Name`) ? true : false,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:583:hardcoded array:                    { pattern: new RegExp(/^[a-zA-Z\s\.]+$/), message: `Enter valid name` },
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:587:hardcoded array:                                if (formCount != formNumber && this.state[`siblingName-${formCount}`] === value) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:588:hardcoded string:                                    return callback('Siblings cannot have same name');
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:594:hardcoded number:                        max: 80,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:595:hardcoded number:                        message: `Student Name cannot be more than 80 characters long`
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:599:hardcoded string:                message: "Please enter Name"
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:601:hardcoded string:                type: 'hidden',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:602:hardcoded string:                name: 'course',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:603:hardcoded string:                label: 'Select Course',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:604:hardcoded string:                options: get(productConfiguration, 'courses'),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:605:hardcoded string:                value: 'K10/K12',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:606:hardcoded string:                message: "Please select Course"
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:608:hardcoded string:                type: 'select',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:609:hardcoded string:                name: 'board',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:610:hardcoded string:                label: 'Select Board',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:612:hardcoded string:                options: get(selectedCourseConfig, 'boards'),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:614:hardcoded string:                message: "Please select Board",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:615:hardcoded string:                infoMessage: isAdvanceAdmission.includes(productLearningType) ? getInfoBlockForAdvanceCourses("board") : ""
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:617:hardcoded string:                type: selectedBoard === "STATE" ? 'select' : 'hidden',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:618:hardcoded string:                name: 'state',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:619:hardcoded string:                label: 'Select State',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:620:hardcoded string:                required: selectedBoard === "STATE",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:621:hardcoded string:                options: get(selectedBoardConfig, 'states'),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:623:hardcoded string:                message: "Please select State"
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:625:hardcoded string:            ...getSiblingFormFields({ state: this.state, props: this.props, productLearningType: productLearningType || "byjus_tlp", handleChanges: this.handleChanges, handleClassBlurEvent: this.handleClassBlurEvent, formNumber }),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:627:hardcoded string:                type: isK12Class(selectedFinalClass, selectedTlpFinalClass, selectedByjusClassFinalGrade) ? 'select' : 'hidden',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:628:hardcoded string:                name: 'subCourse',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:629:hardcoded string:                label: 'Sub Course',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:630:hardcoded number:                required: isK12Class(selectedFinalClass, selectedTlpFinalClass, selectedByjusClassFinalGrade),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:634:hardcoded string:                message: "Please select Sub Course"
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:636:hardcoded string:                type: 'select',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:637:hardcoded object:                options: this.getValidityOptions({ selectedInitialClass, validity, productLearningType, selectedFinalClass, state : selectedState , selectedBoard}),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:638:hardcoded string:                name: 'validity',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:639:hardcoded string:                label: 'Select Initial Validity',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:643:hardcoded string:                message: "Please Select Initial Validity"
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:645:hardcoded string:                type: serialNumber === 1 || isEmpty(this.getD4TabletOptions()) || selectedSubCourse === "Commerce" ? 'hidden' : 'select',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:646:hardcoded number:                options: this.getSelectedD4TabletOptions(),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:647:hardcoded string:                name: 'isD4Shared',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:648:hardcoded string:                label: 'Share existing D4 Tablet',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:650:hardcoded string:                message: "Please select Yes or No",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:652:hardcoded object:            ...getTodAndDocFields({ state: this.state, props: this.props, handleChanges: this.handleChanges, formNumber}),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:654:hardcoded string:                type:  selectedD4IsShared ? 'select' : 'hidden',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:655:hardcoded number:                options: this.getD4TabletOptions(),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:656:hardcoded string:                name: 'd4tablet',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:657:hardcoded string:                label: 'Please select which tablet to share',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:659:hardcoded string:                message: "Please select D4 Tablet",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:661:hardcoded string:                type: !isK12Class(selectedFinalClass, selectedTlpFinalClass, selectedByjusClassFinalGrade) && productCombination==="byjus_classes" ? "select" : "hidden",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:663:hardcoded string:                name: "subCourse",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:664:hardcoded string:                label: "Select Batch Size",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:665:hardcoded string:                required: productCombination==="byjus_classes" ? true : false,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:667:hardcoded string:                message: "Please Select Batch Size"
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:669:hardcoded string:                type: serialNumber === 1 || !isD4Available || selectedD4IsShared == false ? 'select' : 'hidden',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:670:hardcoded number:                options: checkPrivTabletAccess(leadDetails, user) ? getAllAvailableTablets() : this.getTabletOptions({ Tablets, tablets, selectedInitialClass,selectedFinalClass, D4EligibleManagers, formNumber, MeTablets, isPrivilegedUser }),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:671:hardcoded number:                required: isK3orPreKClass(selectedInitialClass) && !IS_UPGRADE_VERTICAL(vertical) && !isPrivilegedUser && !selectedIsStreaming && !selectedD4Tablet ? true : false,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:672:hardcoded string:                name: 'tablet',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:673:hardcoded string:                label: 'Select Tablet',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:675:hardcoded string:                message: "Please select Tablet",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:678:hardcoded number:                type: this.getD4SDCardType({ selectedTablet, selectedInitialClass, user }),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:679:hardcoded string:                name: 'selectD4SDCard',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:680:hardcoded string:                label: 'Select D4 SD Card',
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:691:hardcoded array:        const productDetailsForm = this.refs[`productDetailsForm-${formNumber}`]
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:692:hardcoded variable:        const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:695:hardcoded string:            finalClass: "", workshops: "", subCourse: "", tablet: "",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:696:hardcoded string:            validity: "", initialClass: "", tlpFinalGrade: "", byjusClassFinalGrade: ""
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:698:hardcoded string:        const courseType = getCourseTypeOption("sibling", value);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:700:hardcoded array:            [`productLearningType_${formNumber}`]: `${formNumber}_${value.toUpperCase()}`,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:701:hardcoded array:            [`courseType-${formNumber}`]: courseType
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:709:hardcoded array:                [`${formNumber}`]: [`${ele.target.value}`]
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:712:hardcoded array:            [formNumber]: ele.target.value
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:719:hardcoded string:            [`schoolState-${formNumber}`]: "",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:720:hardcoded string:            [`city-${formNumber}`]: "",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:721:hardcoded string:            [`schoolName-${formNumber}`]: "",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:722:hardcoded string:            [`otherSchoolName-${formNumber}`]: "",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:723:hardcoded string:            [`newSchool-${formNumber}`]: "",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:724:hardcoded string:            [`schoolAddress-${formNumber}`]: "",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:725:hardcoded string:            [`mathPercent-${formNumber}`]: "",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:726:hardcoded string:            [`sciencePercent-${formNumber}`]: "",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:727:hardcoded string:            [`proficiency-${formNumber}`]: "",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:728:hardcoded string:            [`formValues-${formNumber}`]: { ...this.state[`formValues-${formNumber}`], schoolState: "", city: "", schoolName: "", otherSchoolName: "", newSchool: "", schoolAddress: "", mathPercent: "", sciencePercent: "", proficiency: "" }
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:733:hardcoded array:        const productDetailsForm = this.refs[`productDetailsForm-${formNumber}`];
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:734:hardcoded variable:        const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:735:hardcoded array:        const schoolForm = this.refs[`schoolForm-${formNumber}`]
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:738:hardcoded string:        if (name === "initialClass") {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:740:hardcoded string:                finalClass: "", workshops: "", subCourse: "", tablet: "", validity: "", tlpFinalGrade: "", byjusClassFinalGrade: "",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:741:hardcoded string:                languageOfInstruction: "", isStreaming: false
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:745:hardcoded string:                [`subCourse-${formNumber}`]: "",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:746:hardcoded array:                [`isStreaming-${formNumber}`]: false,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:752:hardcoded string:        if (name === "finalClass") {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:754:hardcoded string:                tablet: "", workshops: "", subCourse: "", tlpFinalGrade: "",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:755:hardcoded string:                byjusClassFinalGrade: "", isStreaming: ""
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:758:hardcoded string:                [`subCourse-${formNumber}`]: "",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:763:hardcoded number:        /**Reset shared D4 tablet if board or state changes*/
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:764:hardcoded string:        if (name === "subCourse") {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:765:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ d4tablet: "" });
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:767:hardcoded string:                [`d4tablet-${formNumber}`]: "",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:768:hardcoded string:                [`tabletId-${formNumber}`]: "",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:774:hardcoded string:        if (name === "board" || name === "state") {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:775:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ initialClass: "", mathPercent: "", sciencePercent: "", languageOfInstruction: "", isStreaming: "" });
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:780:hardcoded string:        if (name === "courseType") {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:781:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ initialClass: "", subCourse: "", tablet: "", validity: "", board: "", tlpFinalGrade: "", byjusClassFinalGrade: "" });
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:784:hardcoded string:        if (name === "siblingName") {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:785:hardcoded array:            const siblingTablet = this.state[`tabletId-${props}`];
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:786:hardcoded string:            let updatedTabletId = ""
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:788:hardcoded string:                updatedTabletId = siblingTablet.split("-").slice(0, 2).join("-") + `-${value}`
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:791:hardcoded array:                [`tabletId-${props}`]: updatedTabletId,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:792:hardcoded array:                [`${name}-${props}`]: value,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:797:hardcoded string:        if (name === "tablet" || name === "isStreaming") {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:798:hardcoded string:            const { label = "" } = props || {};
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:799:hardcoded object:            const { formCountArray } = this.state
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:800:hardcoded number:            detailsForm && detailsForm.setFieldsValue({ selectD4SDCard: false });
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:802:hardcoded array:            const siblingName = this.state[`siblingName-${formNumber}`];
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:803:hardcoded number:            /*Reset Shared D4 tablet if primary sibling tablet was changed */
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:805:hardcoded string:                let sharedD4Tablet = this.state[`d4tablet-${formCount}`] || ""
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:806:hardcoded string:                let sharedSiblingName = sharedD4Tablet.split("-")[1]
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:807:hardcoded number:                if (formCount != formNumber && siblingName === sharedSiblingName && sharedD4Tablet !== `${value}-${siblingName}`) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:808:hardcoded array:                    const productDetailsForm = this.refs[`productDetailsForm-${formCount}`];
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:809:hardcoded variable:                    const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:810:hardcoded string:                    this.setState({ [`d4tablet-${formCount}`]: "" })
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:811:hardcoded string:                    this.setState({ [`tabletId-${formCount}`]: "" })
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:812:hardcoded string:                    detailsForm && detailsForm.setFieldsValue({ d4tablet: "" })
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:816:hardcoded string:                [`tabletId-${formNumber}`]: value ? `T-${value}-${siblingName}` : "",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:817:hardcoded array:                [`tabletName-${formNumber}`]: `${label}`,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:818:hardcoded number:                [`selectD4SDCard-${formNumber}`]: false,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:821:hardcoded number:            if (D4_TABLET_LIST.includes(value)) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:823:hardcoded string:                    [`sharedD4tablet-${formNumber}`]: value ? `${value}-${siblingName}` : "",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:824:hardcoded number:                    isD4Available: true,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:830:hardcoded string:                    [`sharedD4tablet-${formNumber}`]: "",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:831:hardcoded array:                    [`${name}-${formNumber}`]: value,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:832:hardcoded number:                    isD4Available: false,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:839:hardcoded string:        if (name === "isD4Shared"){
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:841:hardcoded array:                [`${name}-${formNumber}`]: value,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:842:hardcoded number:                isD4Available: value ? true : false,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:845:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ d4tablet: "" ,tablet: ""})
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:848:hardcoded string:        if (name === "d4tablet") {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:849:hardcoded string:            const { label = "" } = props || {};
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:851:hardcoded array:                [`${name}-${formNumber}`]: value,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:852:hardcoded string:                [`tabletId-${formNumber}`]: value ? `T-${value}` : "",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:853:hardcoded array:                [`tabletName-${formNumber}`]: `${label}`,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:858:hardcoded string:        if (name === "isStreaming") {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:859:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ tablet: "", validity: "", tlpFinalGrade: "" });
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:861:hardcoded array:                [`isStreaming-${props}`]: value,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:862:hardcoded string:                [`tabletId-${formNumber}`]: "",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:868:hardcoded array:            [`${name}-${formNumber}`]: value,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:874:hardcoded variable:        const productLearningType = this.getAvailableProductLearningType(formNo);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:875:hardcoded string:        const isHlpForm = productLearningType === "home_learning_program";
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:876:hardcoded string:        const isByjusClassForm = ["jumpstart_admission", "byjus_tlp_plus_byjus_classes", "byjus_classes", "byjus_classes_plus_byjus_tlp", "advance_admission_plus_byjus_classes"].includes(productLearningType);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:878:hardcoded array:        const mentoringApplicableFormTrack = [];
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:879:hardcoded variable:        let isMentoringApplicable = false;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:880:hardcoded variable:        let isOneToManyApplicable = false;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:881:hardcoded variable:        let isByjusClassesApplicable = false;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:883:hardcoded object:        const { formCountArray } = this.state;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:886:hardcoded variable:        const currentForm = formCountArray.find(formCount => formCount === formNo);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:887:hardcoded array:        this.setState({ [`isByjusClasses-${currentForm}`]: false })
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:888:hardcoded array:        // let initialClass = this.state[`initialClass-${currentForm}`];
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:890:hardcoded number:        let initialClass = isAdvanceAdmission.includes(productLearningType) || ELIGIBLE_COMBINATIONS_FOR_TLP_PLUS_BYJUS_CLASSES_PLUS_TLP.includes(productLearningType) ? (parseInt(this.state[`initialClass-${currentForm}`], 10) + 1).toString() : this.state[`initialClass-${currentForm}`];
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:892:hardcoded array:        isMentoringApplicable = mentoringClassMap[initialClass] || false;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:893:hardcoded array:        isOneToManyApplicable = oneToManyMentoringClassMap[initialClass] || false;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:894:hardcoded array:        isByjusClassesApplicable = byjusClassesMap[initialClass] || false;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:902:hardcoded array:                [`isOneToManyClass-${currentForm}`]: (isOneToManyApplicable) ? true : false,
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:903:hardcoded array:                [`${formNo}_HLP`]: (isOneToManyApplicable) ? true : false
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:910:hardcoded array:                [`isByjusClasses-${currentForm}`]: (isByjusClassesApplicable) ? true : false
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:921:hardcoded string:        this.setState({ classType: value ? "neo" : "oneToMega" });
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:923:hardcoded object:        const { formCountArray } = this.state
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:925:hardcoded array:            this.setState({ [`isByjusClasses-${formNo}`]: false })
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:926:hardcoded array:            const productDetailsForm = this.refs[`productDetailsForm-${formNo}`];
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:927:hardcoded variable:            const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:930:hardcoded string:                productLearningType: "", initialClass: "", finalClass: "", board: "", state: "",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:931:hardcoded string:                byjusClassFinalGrade: "", validity: "", tlpFinalGrade: "", courseType: "", tablet: "",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:932:hardcoded string:                mathPercent: "", sciencePercent: "", languageOfInstruction: "", flowOfTopic: value ? "default" : "",
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:933:hardcoded string:                siblingName: ""
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:939:hardcoded object:        let { formCount, formCountArray, maxStudentCount } = this.state;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:940:hardcoded object:        const { productCombination } = this.props;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:944:hardcoded variable:            const currentTime = (new Date()).getTime();
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:948:hardcoded variable:            const newFormCountArray = formCountArray;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:952:hardcoded object:            this.setState({ formCount, formCountArray }, () => {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:953:hardcoded object:                this.setState({ formCountArray: newFormCountArray });
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:963:hardcoded object:        let { formCount, formCountArray } = this.state;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:966:hardcoded number:        if (formCount > 0) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:972:hardcoded variable:            const newFormCountArray = formCountArray;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:976:hardcoded object:            this.setState({ formCount, formCountArray }, () => {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:977:hardcoded object:                this.setState({ formCountArray: newFormCountArray });
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:984:hardcoded object:        const { authDetails } = this.props;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:985:hardcoded object:        const { env } = authDetails
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:989:hardcoded variable:            const refs = this.refs;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:990:hardcoded object:            const key = `productDetailsForm-${formCount}`;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:991:hardcoded variable:            const form = get(refs, key);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:992:hardcoded object:            const formValues = form && form.getFormFilledValues() || {};
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:994:hardcoded array:                [`formValues-${formCount}`]: { ...this.state[`formValues-${formCount}`], ...formValues }
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1000:hardcoded object:        this.setState({ error });
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1007:hardcoded object:            this.setState({ productConfig: nextProps.productConfig }, async () => {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1015:hardcoded object:        const { productDetails = {}, productConfig = {}, productType, user } = this.props;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1016:hardcoded object:        let { formCount } = this.state;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1017:hardcoded array:        let formCountArray = [];
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1019:hardcoded string:        const productConfiguration = find(get(productConfig, 'Products', []), { formattedName: productType }) || {};
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1021:hardcoded string:        const userPermissions = get(user, 'permissions', []);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1023:hardcoded number:        const isPriviledgedUser = userPermissions.indexOf(productPermissions.ignoreSiblingCountCheck) >= 0;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1025:hardcoded number:        /** For non-priviledged users, MaxStudent = maxSiblingCount + 1
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1028:hardcoded string:        const maxStudentCount = isPriviledgedUser ? PRIVILEDGED_USERS_SIBLING_COUNT : parseInt(get(productConfiguration, 'otherConfigs.maxSiblingCount')) + 1;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1030:hardcoded string:        if (productType === get(productDetails, 'productType')) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1032:hardcoded string:            formCount = get(productDetails, 'students', []).length || formCount;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1034:hardcoded number:            for (var i = 1; i <= formCount; i++) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1035:hardcoded number:                const formValues = get(productDetails, `students.${i - 1}.formValues`);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1038:hardcoded string:                    [`course-${i}`]: get(formValues, 'course'),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1039:hardcoded string:                    [`board-${i}`]: get(formValues, 'board'),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1040:hardcoded string:                    [`initialClass-${i}`]: get(formValues, 'initialClass'),
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1041:hardcoded string:                    [`finalClass-${i}`]: get(formValues, 'finalClass')
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1047:hardcoded object:            this.setState({ productDetails, formCount });
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1051:hardcoded number:        for (var i = 1; i <= formCount; i++) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1052:hardcoded variable:            const currentTime = (new Date()).getTime();
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1056:hardcoded string:        this.setState({ productConfig, course: 'K10/K12', formCountArray, maxStudentCount });
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1060:hardcoded object:        const { formCountArray } = this.state;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1061:hardcoded variable:        let siblingCount = formCountArray.length;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1063:hardcoded number:        for (var i = 0; i < siblingCount; i++) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1064:hardcoded array:            const byjusClassesMentoringForm = this.refs[`byjusClassesDetailsForm-${formCountArray[i]}`]
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1065:hardcoded variable:            const byjusClassesFormValue = byjusClassesMentoringForm && await byjusClassesMentoringForm.getMentoringValues();
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1067:hardcoded array:                [`${formCountArray[i]}_byjus_class_initialValue`]: byjusClassesFormValue.courseInfo
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1073:hardcoded object:        const { productConfig, isMentoringClass } = this.state;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1074:hardcoded object:        const { productType, productCombination, user } = this.props;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1075:hardcoded array:        const fields = productConfig ? this.getFields(formNumber, formSerialNum) : [];
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1076:hardcoded number:        const initialValues = getProductFormInitialValue(productDetails)[formSerialNum - 1] || get(this.state, `formValues-${formNumber}`) || {};
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1077:hardcoded variable:        const isPrivilegedUser = checkIsPrivilegedUser(user);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1082:hardcoded object:                    heading={`Student #${formSerialNum}`}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1083:hardcoded object:                    key={formNumber}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1084:hardcoded object:                    ref={`productDetailsForm-${formNumber}`}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1085:hardcoded array:                    productLearningType={this.state[`productLearningType_${formNumber}`]}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1086:hardcoded object:                    productType={productType}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1087:hardcoded object:                    fields={fields}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1088:hardcoded string:                    initialValues={{ ...initialValues, flowOfTopic: "default" }}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1089:hardcoded object:                    displayMiscellaneousComponents={isLastSibling ? true : false} /**To display mentoring and coupon count at the end of last sibling */
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1090:hardcoded object:                    isOneToManyAllowed={ELIGIBLE_COMBINATIONS_FOR_ONE_TO_MANY.includes(productCombination) ? true : false} // Byjus HLP
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1091:hardcoded object:                    isByjusClassesAllowed={ELIGIBLE_COMBINATIONS_FOR_BATCH.includes(productCombination) ? true : false} // Byjus Classes
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1092:hardcoded object:                    isMentoringClass={isPrivilegedUser && ELIGIBLE_COMBINATIONS_FOR_ONE_ON_ONE.includes(productCombination) ? isMentoringClass : false} // used to show mentoring component to select
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1093:hardcoded object:                    isMentoringAllowed={isPrivilegedUser && ELIGIBLE_COMBINATIONS_FOR_ONE_ON_ONE.includes(productCombination) ? true : false}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1100:hardcoded number:    getAvailableD4ForSharing = () => {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1101:hardcoded number:        let isD4Available = false;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1102:hardcoded array:        const { formCountArray = [] } = this.state;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1103:hardcoded array:        let tabletMappingList = [];
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1104:hardcoded number:        for (var i = 0; i < formCountArray.length; i++) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1105:hardcoded array:            const siblingName = this.state[`siblingName-${formCountArray[i]}`];
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1106:hardcoded number:            const d4Tablet = this.state[`d4tablet-${formCountArray[i]}`];
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1107:hardcoded array:            let tabletName = this.state[`tabletName-${formCountArray[i]}`];
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1108:hardcoded number:            let tablet = (d4Tablet) ? d4Tablet : this.state[`tablet-${formCountArray[i]}`];
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1109:hardcoded string:            tabletName = (tabletName) ? tabletName : "No tablet selected";
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1110:hardcoded variable:            const tabletMapping = {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1117:hardcoded number:        const d4List = tabletMappingList.filter(ele => (D4_TABLET_LIST.includes(ele.tablet)));
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1118:hardcoded string:        const emptyTabletList = tabletMappingList.filter(ele => (["No tablet selected", undefined, 'undefined', ""].includes(ele.tablet)));
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1120:hardcoded number:        if (!isEmpty(d4List) && !isEmpty(emptyTabletList)) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1121:hardcoded number:            isD4Available = true;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1123:hardcoded number:        return { tabletMappingList, isD4Available };
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1126:hardcoded number:    closeD4WarningMessage = (e) => {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1127:hardcoded number:        this.setState({ isD4Available: false });
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1131:hardcoded object:        const { classType } = this.state
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1132:hardcoded string:        if (classType !== "neo") {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1133:hardcoded array:            return this.state[`isByjusClasses-${formNo}`] && this.state[`finalClass-${formNo}`] && this.state[`validity-${formNo}`]
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1135:hardcoded string:            const productLearningType = get(this.state, `productLearningType_${formNo}`, '')
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1136:hardcoded array:            const isEligible = [`${formNo}_BYJUS_CLASSES`, `${formNo}_BYJUS_CLASSES_PLUS_BYJUS_TLP`].includes(productLearningType) && 
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1143:hardcoded number:        const { error, productDetails, formCount, formCountArray, maxStudentCount, validity, isD4Available, tabletMappingList, classType } = this.state;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1144:hardcoded object:        const { changeNextBtnMode, productType, productCombination, identifier, authDetails, user } = this.props;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1145:hardcoded variable:        const isPrivilegedUser = checkIsPrivilegedUser(user)
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1146:hardcoded object:        const { env } = authDetails
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1147:hardcoded variable:        let isbyjusMathSku = true;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1151:hardcoded object:                <ErrorWrapper error={error} />
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1152:hardcoded number:                <InfoWrapper descriptionBody={<div>Sibling with more number of classes will be considered as 1st Sibling, irrespective of the order in which the selection is made.
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1153:hardcoded number:                    <p><strong>Ex:</strong> Sibling_1 : 10 to 12, Sibling_2 : 6 to 12</p>
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1154:hardcoded number:                    Sibling_2 will be taken as first sibling.
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1155:hardcoded string:                </div>} type="info" />
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1156:hardcoded string:                {isPrivilegedUser && productCombination === "byjus_classes" && <ClassTypeForm
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1157:hardcoded string:                    ref="classTypeForm"
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1158:hardcoded object:                    classType={classType}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1159:hardcoded object:                    changeClassType={this.changeClassType}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1163:hardcoded number:                    const formSerialNum = index + 1;
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1164:hardcoded variable:                    const isLastSibling = (formSerialNum === formCount);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1165:hardcoded array:                    let grade = this.state[`initialClass-${formNo}`]
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1168:hardcoded string:                        if (get(this.state, [`initialClass-${formNo}`], "") < 10) {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1169:hardcoded string:                            grade = (parseInt(get(this.state, [`initialClass-${formNo}`], ""), 10) + 1).toString()
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1172:hardcoded string:                            grade = get(this.state, [`byjusClassFinalGrade-${formNo}`], "")
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1175:hardcoded object:                    const isProficiencyAndFot = isProficiencyAndFotAvailable({ state: this.state, props: this.props, formNumber: formNo, productLearningType: this.getAvailableProductLearningType(formNo) });
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1176:hardcoded variable:                    const isBatchesEligible = this.checkBatchesEligibility(formNo, env)
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1177:hardcoded string:                    const bfsBatch = "1:6"
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1178:hardcoded string:                    const isDevEnv = ['development', 'local'].includes(env);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1179:hardcoded string:                    const isLocalEnv = ['local'].includes(env);
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1180:hardcoded string:                    let board = get(productDetails, 'board')
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1181:hardcoded string:                    const dbelByjusMathSampler =  ['tlp', 'byjus_tlp', 'byjus_classes'].includes(productCombination) && BELP_K3_GRADES.includes(grade) && isbyjusMathSku
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1182:hardcoded array:                    const isDbelBatchesEligible = dbelByjusMathSampler && this.state[`board-${formNo}`] && this.state[`initialClass-${formNo}`] && this.state[`validity-${formNo}`];
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1189:hardcoded object:                        <Fragment key={index}>
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1190:hardcoded object:                            {this.buildSiblingProductForm(formSerialNum, formNo, productDetails, isLastSibling)}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1193:hardcoded object:                                    ref={`schoolForm-${formNo}`}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1194:hardcoded array:                                    board={this.state[`board-${formNo}`]}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1195:hardcoded array:                                    grade={this.state[`initialClass-${formNo}`]}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1196:hardcoded array:                                    premiumId={this.state[`premiumId-${formNo}`]}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1197:hardcoded object:                                    formNumber={formNo}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1198:hardcoded object:                                    handleSiblingChanges={this.handleChanges}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1199:hardcoded object:                                    handleClassBlurEvent={this.handleClassBlurEvent}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1200:hardcoded object:                                    props={this.props}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1201:hardcoded array:                                    state={this.state[`state-${formNo}`]}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1207:hardcoded array:                                this.state[`finalClass-${formNo}`] && this.state[`validity-${formNo}`] && this.state[`${formNo}_HLP`] && <OneToMany
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1208:hardcoded object:                                    ref={`oneToManyDetailsForm-${formNo}`}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1209:hardcoded object:                                    identifier={identifier}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1210:hardcoded array:                                    initialClass={this.state[`initialClass-${formNo}`]}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1211:hardcoded array:                                    board={this.state[`board-${formNo}`]}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1212:hardcoded array:                                    state={this.state[`state-${formNo}`]}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1213:hardcoded object:                                    productType={productType}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1214:hardcoded array:                                    validity={this.state[`validity-${formNo}`]}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1215:hardcoded array:                                    subCourse={this.state[`subCourse-${formNo}`]}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1216:hardcoded string:                                    productCombination="home_learning_program"
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1219:hardcoded number:                            {/* Byjus classes For 4 to 12 grades*/}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1221:hardcoded object:                                ref={`byjusMathDetailsForm-${formNo}`}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1222:hardcoded object:                                identifier={identifier}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1223:hardcoded object:                                initialClass={grade}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1224:hardcoded object:                                finalClass={grade}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1225:hardcoded array:                                board={this.state[`board-${formNo}`]}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1226:hardcoded object:                                bfsBatch={bfsBatch}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1227:hardcoded object:                                productCombination={productCombination}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1228:hardcoded object:                                classType={classType}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1232:hardcoded object:                                    ref={`byjusClassesDetailsForm-${formNo}`}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1233:hardcoded object:                                    identifier={identifier}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1234:hardcoded object:                                    classType={classType}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1235:hardcoded object:                                    initialClass={grade}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1236:hardcoded array:                                    board={this.state[`board-${formNo}`]}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1237:hardcoded array:                                    state={this.state[`state-${formNo}`]}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1238:hardcoded object:                                    productType={productType}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1239:hardcoded string:                                    isV4Batch={this.state[`validity-${formNo}`].toString() == "2024" ? true : false}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1240:hardcoded array:                                    validity={this.state[`validity-${formNo}`]}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1241:hardcoded array:                                    subCourse={this.state[`subCourse-${formNo}`]}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1242:hardcoded string:                                    productCombination="byjus_classes"
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1243:hardcoded array:                                    initialValues={this.state[`${formNo}_byjus_class_initialValue`]}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1244:hardcoded array:                                    courseType={this.state[`courseType-${formNo}`]}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1245:hardcoded array:                                    proficiency={this.state[`proficiency-${formNo}`]}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1246:hardcoded array:                                    trackId={this.state[`trackId-${formNo}`]}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1247:hardcoded array:                                    schoolState={this.state[`schoolState-${formNo}`]}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1250:hardcoded string:                            <div className="sibling-product-btn-holder">
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1252:hardcoded string:                                    <Button color="success" onClick={this.addSibling}>+</Button>}{" "}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1253:hardcoded string:                                {formSerialNum > 1 && <Button color="danger" onClick={() => this.removeSibling(formNo)}>-</Button>}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1260:hardcoded string:                    ref='fetchComp'
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1261:hardcoded object:                    onClickFetchPrices={this.onClickFetchPrices}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1262:hardcoded object:                    getProductDetails={this.getProductDetails}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1263:hardcoded object:                    changeNextBtnMode={changeNextBtnMode}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1264:hardcoded object:                    productType={productType}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1265:hardcoded object:                    setError={this.setError}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1266:hardcoded object:                    productCombination={productCombination}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1269:hardcoded number:                {isD4Available && <Alert
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1270:hardcoded number:                    description={<div>There is D4 tablet selected which can be shared with other siblings.<p></p>{tabletMappingList && tabletMappingList.map((tabletList, index) => {
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1272:hardcoded number:                            Sibling {index + 1} ({tabletList.siblingName}) : {tabletList.tabletName}<br></br>
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1275:hardcoded string:                    type="warning"
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1276:hardcoded object:                    closable={true}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1277:hardcoded number:                    afterClose={this.closeD4WarningMessage} />}
microservices-middleware/client/src/modules/product/components/types/SiblingProduct.js:1284:hardcoded object:export default connect(mapStateToProps, mapDispatchToProps, null, { forwardRef: true })(SiblingProduct);
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:1:hardcoded object:import React, { Component } from 'react';
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:2:hardcoded object:import { connect } from 'react-redux';
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:3:hardcoded object:import { get, find, isEmpty, size } from 'lodash';
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:5:hardcoded object:import { saveProductDetails, addLoader, removeLoader, resetPrice, saveCashbackDetails } from '../../productReducer';
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:8:hardcoded number:    getFormattedValidity, isK12Class, getClasses, getSubCourses,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:12:hardcoded string:} from '../productHelper';
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:13:hardcoded file path:import CallApi from 'api/callApi';
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:14:hardcoded file path:import ClassTypeForm from '../ClassTypeForm'
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:15:hardcoded file path:import ProductDetailsForm from '../ProducDetailsForm';
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:16:hardcoded file path:import FetchPrices from '../FetchPrices';
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:17:hardcoded file path:import ErrorWrapper from 'components/ErrorWrapper';
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:18:hardcoded object:import { isEqual } from 'date-fns';
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:19:hardcoded file path:import OneToMany from '../mentoring/OneToManyMentoring';
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:20:hardcoded object:import { validateBhlpMentoringDetails, validateByjusClassesMentoringDetails } from '../mentoring/MentoringHelper';
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:21:hardcoded file path:import ByjusMentoringClasses from '../mentoring/ByjusMentoringClasses';
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:26:hardcoded string:} from '../../utils/productConstant';
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:27:hardcoded object:import { getStreamingFormFields, getCourseTypeFormFieldType, getProductLearningType, isProficiencyAndFotAvailable, getBatchesEligibility, getTodAndDocFields } from '../../utils/ByjusClassesHelper';
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:28:hardcoded file path:import Proficiency from 'modules/student/Proficiency';
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:29:hardcoded file path:import School from 'modules/student/School'
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:31:hardcoded variable:const mapStateToProps = state => ({
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:32:hardcoded string:    authDetails: get(state, 'auth.details'),
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:33:hardcoded string:    identifier: get(state, 'details.identifier'),
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:34:hardcoded string:    existingProfiles: get(state, 'product.existingProfiles'),
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:35:hardcoded string:    showProfileSelectionOption: get(state, 'product.showProfileSelectionOption'),
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:36:hardcoded string:    productDetails: get(state, 'product.details'),
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:37:hardcoded string:    productConfig: get(state, 'product.config'),
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:38:hardcoded string:    loading: get(state, 'product.loading'),
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:39:hardcoded string:    error: get(state, 'product.error'),
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:40:hardcoded string:    addressDetail: get(state, 'address.details', {}),
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:41:hardcoded string:    leadDetails: get(state, 'auth.leadDetails'),
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:44:hardcoded variable:const mapDispatchToProps = dispatch => ({
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:69:hardcoded object:            productConfig: {},
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:71:hardcoded array:            fields: [],
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:73:hardcoded string:            classType: "neo",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:76:hardcoded number:            isV4Batch: true
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:81:hardcoded object:        let { env, productDetails, studentMarksDetails, byjusClassesFormValue, schoolAndProficiencyDetails } = details
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:87:hardcoded string:            doubtClassDetails: get(byjusClassesFormValue, "formValue.selectedDoubtClass", null),
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:88:hardcoded string:            electiveDetails: get(byjusClassesFormValue, "formValue.electivesDetails", null),
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:89:hardcoded string:            languageOfInstruction: get(byjusClassesFormValue, "formValue.languageOfInstruction", null),
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:90:hardcoded string:            languageOfInstructionId: get(byjusClassesFormValue, "formValue.languageOfInstructionId", null)
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:96:hardcoded object:        const { initialClass, course, classType, tod = true, doc = true } = this.state;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:97:hardcoded object:        const { productCombination, identifier, country, authDetails, productConfig, productType, leadDetails } = this.props;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:98:hardcoded array:        const { Boards = [] } = productConfig || {};
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:99:hardcoded object:        const { env } = authDetails
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:101:hardcoded object:        const { productDetailsForm, oneToManyDetailsForm, byjusClassesDetailsForm, proficiencyForm, schoolForm } = this.refs;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:102:hardcoded array:        let oneToManyMentoringDetails = [], bhlpCourseDetails = [], byjusClassesMentoringDetails = [];
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:104:hardcoded variable:        const details = await productDetailsForm.getProductDetails();
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:105:hardcoded variable:        const oneToManyFormValue = oneToManyDetailsForm && await oneToManyDetailsForm.getMentoringValues();
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:106:hardcoded variable:        const byjusClassesFormValue = byjusClassesDetailsForm && await byjusClassesDetailsForm.getMentoringValues();
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:107:hardcoded variable:        const studentMarksDetails = proficiencyForm && await proficiencyForm.getStudentAcademicDetails();
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:108:hardcoded variable:        const schoolAndProficiencyDetails = schoolForm && await schoolForm.getSchoolDetails()
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:109:hardcoded variable:        const deviceType = this.getDeviceType(productType, initialClass);
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:110:hardcoded object:        const { isDevEnv } = window
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:112:hardcoded string:        const workshopChannel = get(leadDetails, "Workshop_channel", '') || get(leadDetails, 'workshopChannel', '');
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:113:hardcoded string:        let productDetails = get(details, 'productDetails');
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:114:hardcoded string:        if (productDetails && !productDetails.course) productDetails["course"] = course;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:116:hardcoded string:        productDetails['deviceType'] = deviceType
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:117:hardcoded string:        productDetails['tod'] = tod;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:118:hardcoded string:        productDetails['doc'] = doc;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:120:hardcoded number:         * For classes 12 mentoring details is not required
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:122:hardcoded string:        if (ELIGIBLE_COMBINATIONS_FOR_ONE_TO_MANY.includes(productCombination) && !["12"].includes(initialClass)) {
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:123:hardcoded variable:            const response = validateBhlpMentoringDetails(oneToManyFormValue, productDetails);
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:124:hardcoded string:            oneToManyMentoringDetails = get(response, "oneToManyMentoringDetails", []);
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:125:hardcoded string:            bhlpCourseDetails = get(response, "bhlpCourseDetails", []);
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:132:hardcoded string:        if (ELIGIBLE_COMBINATIONS_FOR_BATCH.includes(productCombination) && !["1", "2", "3"].includes(initialClass)) {
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:135:hardcoded variable:            const response = validateByjusClassesMentoringDetails(byjusClassesFormValue, productDetails);
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:136:hardcoded string:            byjusClassesMentoringDetails = get(response, "byjusClassesMentoringDetails", []);
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:137:hardcoded string:            bhlpCourseDetails = get(response, "bhlpCourseDetails", []);
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:143:hardcoded string:        if (classType == "neo" && productCombination == "byjus_classes") {
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:144:hardcoded object:            productDetails = this.getUpdatedProductDetails({ env, productDetails, studentMarksDetails, byjusClassesFormValue, schoolAndProficiencyDetails })
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:148:hardcoded variable:            const payload = {
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:150:hardcoded string:                productType: 'streaming',
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:153:hardcoded string:                mentoringCount: get(details, 'mentoringCount'),
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:154:hardcoded string:                couponDetails: get(details, 'couponDetails'),
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:159:hardcoded string:                loggedInMobile: get(leadDetails, 'studentMobile', ''),
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:160:hardcoded number:                isV4Batch: this.state.isV4Batch
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:163:hardcoded string:            if (classType == "neo") {
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:164:hardcoded string:                // if(isDevEnv && productCombination === 'byjus_classes') {
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:167:hardcoded string:                //         url:'/api/neo/product/streamingProduct'
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:172:hardcoded string:                        url: '/api/neo/product/streaming'
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:178:hardcoded string:                    url: '/api/product/streaming'
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:185:hardcoded object:        const { productCombination } = productDetails;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:186:hardcoded object:        const { identifier } = this.props;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:187:hardcoded variable:        const payload = {
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:194:hardcoded string:                payload["productDetails"] = formatByjusClassesFormValues(productDetails);
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:199:hardcoded string:                url: '/api/product/storeProductDetails',
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:200:hardcoded string:                method: 'POST',
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:203:hardcoded string:                const { productDetails, cashbackDetails } = get(response, 'data', {});
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:207:hardcoded object:                this.setState({ error: null });
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:209:hardcoded string:                this.navigateToScreen('address');
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:211:hardcoded object:                this.setState({ error }, () => {
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:220:hardcoded object:        const { history } = this.props;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:221:hardcoded string:        const url = `/${path}${get(history, 'location.search')}`;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:230:hardcoded object:        const { fetchComp } = this.refs;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:233:hardcoded object:            const { status, productDetails } = fetchComp.getProductsAndFinalPrice();
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:235:hardcoded string:                if (status && productDetails && (get(productDetails, 'finalPrice') >= 0)) {
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:239:hardcoded string:                    this.setState({ error: 'Product Details Missing' });
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:242:hardcoded string:                const errMsg = get(error, 'message', 'Error') || error;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:243:hardcoded object:                this.setState({ error: errMsg });
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:250:hardcoded object:        const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:251:hardcoded variable:        const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:252:hardcoded object:        const { setAdvanceOrderPunching } = this.props;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:254:hardcoded variable:        const productLearningType = value;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:255:hardcoded string:        this.handleChanges(getCourseTypeOption("streaming", productLearningType), 'courseType');
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:256:hardcoded object:        this.setState({ productLearningType, isByjusClass: false });
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:265:hardcoded string:                initialClass: "", finalClass: "", subCourse: "",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:266:hardcoded string:                byjusClassFinalGrade: "", validity: "", tlpFinalGrade: "", courseType: ""
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:272:hardcoded object:        const { selectedInitialClass, validity, productLearningType, productType, selectedFinalClass } = details
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:273:hardcoded object:        const { user, authDetails } = this.props
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:274:hardcoded object:        const { env } = authDetails;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:275:hardcoded string:        const isDevEnv = ["development", "local"].includes(env)
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:277:hardcoded array:        let options = []
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:279:hardcoded object:            options = getFormattedValidity({ validity, user, initialClass: selectedInitialClass, productCombination: productLearningType, productType, authDetails, isDevEnv, finalClass: selectedFinalClass })
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:288:hardcoded string:            deviceType = "Streaming"
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:296:hardcoded object:        const { selectedProfile } = this.state;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:297:hardcoded object:        const { existingProfiles, user } = this.props;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:298:hardcoded variable:        const isPrivilegedUser = checkIsPrivilegedUser(user);
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:299:hardcoded number:        if (existingProfiles && existingProfiles.length > 0) {
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:300:hardcoded variable:            let newExistingProfile = existingProfiles;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:301:hardcoded string:            newExistingProfile = newExistingProfile.find(profile => profile.value === "newProfile");
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:303:hardcoded string:                existingProfiles.push({ "label": "New Profile", value: "newProfile" })
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:313:hardcoded object:        const { showProfileSelectionOption, existingProfiles, authDetails } = this.props;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:315:hardcoded string:        !selectedCourse && this.handleChanges('K10/K12', 'course');
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:317:hardcoded object:        const { env } = authDetails;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:318:hardcoded string:        const isDevEnv = ["development", "local"].includes(env);
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:319:hardcoded object:        const { productType, user, productCombination } = this.props;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:320:hardcoded array:        const { Products = [], Tablets = [] } = productConfig || {};
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:321:hardcoded object:        const productConfiguration = find(Products, { formattedName: productType }) || {};
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:322:hardcoded object:        const { validity, tablets } = productConfiguration || {};
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:324:hardcoded variable:        const classConfig = this.getStreamingClassConfig();
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:325:hardcoded string:        const classes = getClasses(classConfig, [], '', productCombination);
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:327:hardcoded variable:        const classesConfig = classConfig.classes;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:328:hardcoded variable:        const mentoringClassMap = getMentoringClassMap(classConfig.classes);
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:329:hardcoded variable:        const oneToManyMentoringClassMap = getOneToManyMentoringClassMap(classesConfig);
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:330:hardcoded variable:        const byjusClassesMap = getByjusClassesMap(classesConfig);
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:332:hardcoded variable:        let selectedBoardConfig = classConfig
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:333:hardcoded object:        const subCourses = getSubCourses({ selectedBoardConfig, selectedFinalClass, tlpFinalGrade, byjusClassFinalGrade, productLearningType });
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:334:hardcoded variable:        const subCourseOptions = subCourses && fetchSubCourseOptions(productCombination, subCourses, selectedInitialClass, productLearningType, tlpFinalGrade)
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:336:hardcoded variable:        const isPrivilegedUser = checkIsPrivilegedUser(user)
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:338:hardcoded variable:        const courseTypeFormField = productLearningType && getCourseTypeFormFieldType(productCombination);
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:340:hardcoded variable:        let fields = [{
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:341:hardcoded string:            type: productCombination === "byjus_classes" ? 'select' : "hidden",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:342:hardcoded string:            name: 'productLearningType',
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:343:hardcoded string:            label: 'Choose Product Learning Type',
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:344:hardcoded string:            message: "Please Product Learning Type",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:345:hardcoded string:            options: getProductLearningType({ productType: "streaming", isPrivilegedUser,isDevEnv }),
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:347:hardcoded string:            required: productCombination === "byjus_classes" ? true : false
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:349:hardcoded object:        ...getStreamingFormFields({ state: this.state, props: this.props, handleChanges: this.handleChanges, handleClassBlurEvent: this.handleClassBlurEvent, getStreamingClassConfig: this.getStreamingClassConfig }),
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:351:hardcoded string:            type: isK12Class(selectedFinalClass, tlpFinalGrade, byjusClassFinalGrade) ? 'select' : 'hidden',
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:352:hardcoded string:            name: 'subCourse',
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:353:hardcoded string:            label: 'Select Sub Course',
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:354:hardcoded number:            required: isK12Class(selectedFinalClass, tlpFinalGrade, byjusClassFinalGrade),
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:358:hardcoded string:            message: "Please select Sub Course"
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:360:hardcoded string:            type: 'select',
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:361:hardcoded object:            options: this.getValidityOptions({ selectedInitialClass, validity, productLearningType, productType, selectedFinalClass }),
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:362:hardcoded string:            name: 'validity',
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:363:hardcoded string:            label: 'Select Initial Validity',
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:367:hardcoded string:            message: "Please Select Initial Validity"
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:369:hardcoded string:            type: !isK12Class(selectedFinalClass, tlpFinalGrade, byjusClassFinalGrade) && productCombination==="byjus_classes" ? "select" : "hidden",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:371:hardcoded string:            name: "subCourse",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:372:hardcoded string:            label: "Select Batch Size",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:373:hardcoded string:            required: productCombination==="byjus_classes" ? true : false,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:375:hardcoded string:            message: "Please Select Batch Size"
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:378:hardcoded string:        //     type: 'select',
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:379:hardcoded number:        //     options: isK3orPreKClass(selectedInitialClass) ? getK3orPreKTablets(Tablets, user) : getTablets(tablets, user),
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:380:hardcoded string:        //     name: 'tablet',
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:381:hardcoded string:        //     label: 'Select Tablet',
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:383:hardcoded string:        //     message: "Please select Tablet",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:384:hardcoded number:        //     required: isK3orPreKClass(selectedInitialClass) && !isPrivilegedUser ? true : false
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:386:hardcoded object:        ...getTodAndDocFields({ state: this.state, props: this.props, handleChanges: this.handleChanges }),
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:388:hardcoded string:            type: (showProfileSelectionOption && existingProfiles.length > 0 ? 'radio' : 'hidden'),
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:390:hardcoded string:            name: 'userProfile',
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:391:hardcoded string:            label: 'Choose Profile Type',
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:393:hardcoded string:            message: "Please Choose Profile Type",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:395:hardcoded string:                display: 'block',
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:396:hardcoded string:                height: '30px',
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:397:hardcoded string:                lineHeight: '30px',
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:399:hardcoded number:            required: (showProfileSelectionOption && existingProfiles.length > 0 ? true : false)
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:409:hardcoded string:            "classes": [{
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:410:hardcoded string:                "class": "1",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:411:hardcoded string:                "value": { label: "1", value: "1" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:412:hardcoded string:                "crpAllowed": false,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:413:hardcoded string:                "subCourses": [],
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:414:hardcoded string:                "isMentoringApplicable": false,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:415:hardcoded string:                "maxClass": "4"
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:418:hardcoded string:                "class": "2",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:419:hardcoded string:                "value": { label: "2", value: "2" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:420:hardcoded string:                "crpAllowed": false,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:421:hardcoded string:                "subCourses": [],
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:422:hardcoded string:                "isMentoringApplicable": false,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:423:hardcoded string:                "maxClass": "5"
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:426:hardcoded string:                "class": "3",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:427:hardcoded string:                "value": { label: "3", value: "3" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:428:hardcoded string:                "crpAllowed": false,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:429:hardcoded string:                "subCourses": [],
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:430:hardcoded string:                "isMentoringApplicable": false,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:431:hardcoded string:                "isOneToManyApplicable": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:432:hardcoded string:                "maxClass": "6"
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:434:hardcoded string:                "class": "4",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:435:hardcoded string:                "value": { label: "4", value: "4" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:436:hardcoded string:                "crpAllowed": false,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:437:hardcoded string:                "subCourses": [],
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:438:hardcoded string:                "isMentoringApplicable": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:439:hardcoded string:                "isOneToManyApplicable": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:440:hardcoded string:                "maxClass": "7"
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:443:hardcoded string:                "class": "5",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:444:hardcoded string:                "value": { label: "5", value: "5" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:445:hardcoded string:                "crpAllowed": false,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:446:hardcoded string:                "subCourses": [],
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:447:hardcoded string:                "isMentoringApplicable": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:448:hardcoded string:                "isOneToManyApplicable": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:449:hardcoded string:                "maxClass": "8"
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:452:hardcoded string:                "class": "6",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:453:hardcoded string:                "value": { label: "6", value: "6" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:454:hardcoded string:                "crpAllowed": false,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:455:hardcoded string:                "subCourses": [],
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:456:hardcoded string:                "isMentoringApplicable": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:457:hardcoded string:                "isOneToManyApplicable": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:458:hardcoded string:                "maxClass": "9"
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:461:hardcoded string:                "class": "7",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:462:hardcoded string:                "value": { label: "7", value: "7" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:463:hardcoded string:                "crpAllowed": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:464:hardcoded string:                "subCourses": [],
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:465:hardcoded string:                "isMentoringApplicable": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:466:hardcoded string:                "isOneToManyApplicable": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:467:hardcoded string:                "maxClass": "10"
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:470:hardcoded string:                "class": "8",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:471:hardcoded string:                "value": { label: "8", value: "8" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:472:hardcoded string:                "crpAllowed": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:473:hardcoded string:                "subCourses": [],
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:474:hardcoded string:                "isMentoringApplicable": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:475:hardcoded string:                "isOneToManyApplicable": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:476:hardcoded string:                "maxClass": "12"
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:479:hardcoded string:                "class": "9",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:480:hardcoded string:                "value": { label: "9", value: "9" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:481:hardcoded string:                "crpAllowed": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:482:hardcoded string:                "subCourses": [],
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:483:hardcoded string:                "isMentoringApplicable": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:484:hardcoded string:                "isOneToManyApplicable": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:485:hardcoded string:                "maxClass": "12"
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:488:hardcoded string:                "class": "10",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:489:hardcoded string:                "value": { label: "10", value: "10" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:490:hardcoded string:                "crpAllowed": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:491:hardcoded string:                "subCourses": [],
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:492:hardcoded string:                "isMentoringApplicable": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:493:hardcoded string:                "isOneToManyApplicable": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:494:hardcoded string:                "maxClass": "12"
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:497:hardcoded string:                "class": "11",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:498:hardcoded string:                "value": { label: "11", value: "11" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:499:hardcoded string:                "crpAllowed": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:500:hardcoded string:                "subCourses": [
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:501:hardcoded string:                    { label: "JEE", value: "JEE" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:502:hardcoded string:                    { label: "NEET", value: "NEET" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:503:hardcoded string:                    { label: "JEE+NEET", value: "JEE/NEET" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:504:hardcoded string:                    { label: "Commerce", value: "Commerce" }
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:506:hardcoded string:                "isMentoringApplicable": false,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:507:hardcoded string:                "isOneToManyApplicable": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:508:hardcoded string:                "maxClass": "12",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:509:hardcoded string:                "language": [
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:511:hardcoded string:                        "label": "English",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:512:hardcoded string:                        "value": "english"
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:515:hardcoded string:                        "label": "Combination of Hindi and English",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:516:hardcoded string:                        "value": "hindi_english"
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:521:hardcoded string:                "class": "12",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:522:hardcoded string:                "value": { label: "12", value: "12" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:523:hardcoded string:                "crpAllowed": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:524:hardcoded string:                "subCourses": [
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:525:hardcoded string:                    { label: "JEE", value: "JEE" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:526:hardcoded string:                    { label: "NEET", value: "NEET" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:527:hardcoded string:                    { label: "JEE+NEET", value: "JEE/NEET" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:528:hardcoded string:                    { label: "Commerce", value: "Commerce" }
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:530:hardcoded string:                "isMentoringApplicable": false,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:531:hardcoded string:                "isOneToManyApplicable": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:532:hardcoded string:                "maxClass": "12",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:533:hardcoded string:                "language": [
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:535:hardcoded string:                        "label": "English",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:536:hardcoded string:                        "value": "english"
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:539:hardcoded string:                        "label": "Combination of Hindi and English",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:540:hardcoded string:                        "value": "hindi_english"
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:545:hardcoded string:                "class": "12+",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:546:hardcoded string:                "value": { label: "12+", value: "12+" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:547:hardcoded string:                "crpAllowed": false,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:548:hardcoded string:                "subCourses": [
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:549:hardcoded string:                    { label: "JEE", value: "JEE" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:550:hardcoded string:                    { label: "NEET", value: "NEET" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:551:hardcoded string:                    { label: "JEE+NEET", value: "JEE/NEET" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:552:hardcoded string:                    { label: "Commerce", value: "Commerce" }
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:554:hardcoded string:                "isMentoringApplicable": false,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:555:hardcoded string:                "isOneToManyApplicable": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:556:hardcoded string:                "maxClass": "12+",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:557:hardcoded string:                "language": [
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:559:hardcoded string:                        "label": "English",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:560:hardcoded string:                        "value": "english"
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:563:hardcoded string:                        "label": "Combination of Hindi and English",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:564:hardcoded string:                        "value": "hindi_english"
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:569:hardcoded string:                "class": "13",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:570:hardcoded string:                "value": { label: "12th Crash Course", value: "13" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:571:hardcoded string:                "crpAllowed": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:572:hardcoded string:                "subCourses": [
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:573:hardcoded string:                    { label: "JEE", value: "JEE" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:574:hardcoded string:                    { label: "NEET", value: "NEET" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:575:hardcoded string:                    { label: "JEE+NEET", value: "JEE/NEET" }
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:577:hardcoded string:                "isMentoringApplicable": false,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:578:hardcoded string:                "isOneToManyApplicable": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:579:hardcoded string:                "maxClass": "13",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:580:hardcoded string:                "language": [{ label: "English", value: "english" }]
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:583:hardcoded string:                "class": "14",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:584:hardcoded string:                "value": { label: "12th Retarget Crash Course", value: "14" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:585:hardcoded string:                "crpAllowed": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:586:hardcoded string:                "subCourses": [
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:587:hardcoded string:                    { label: "JEE", value: "JEE" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:588:hardcoded string:                    { label: "NEET", value: "NEET" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:589:hardcoded string:                    { label: "JEE+NEET", value: "JEE/NEET" }
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:591:hardcoded string:                "isMentoringApplicable": false,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:592:hardcoded string:                "isOneToManyApplicable": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:593:hardcoded string:                "maxClass": "14",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:594:hardcoded string:                "language": [{ label: "English", value: "english" }
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:598:hardcoded string:                "class": "11+12",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:599:hardcoded string:                "value": { label: "11-12", value: "11+12" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:600:hardcoded string:                "crpAllowed": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:601:hardcoded string:                "subCourses": [
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:602:hardcoded string:                    { label: "JEE", value: "JEE" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:603:hardcoded string:                    { label: "NEET", value: "NEET" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:604:hardcoded string:                    { label: "JEE+NEET", value: "JEE/NEET" },
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:605:hardcoded string:                    { label: "Commerce", value: "Commerce" }
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:607:hardcoded string:                "isMentoringApplicable": false,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:608:hardcoded string:                "isOneToManyApplicable": true,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:609:hardcoded string:                "language": [
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:611:hardcoded string:                        "label": "English",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:612:hardcoded string:                        "value": "english"
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:615:hardcoded string:                        "label": "Combination of Hindi and English",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:616:hardcoded string:                        "value": "hindi_english"
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:625:hardcoded object:        const { productDetailsForm, schoolForm } = this.refs;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:626:hardcoded variable:        const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:629:hardcoded string:        if (name == "initialClass") {
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:631:hardcoded string:                finalClass: "", tablet: "", subCourse: "", validity: "", tlpFinalGrade: "", byjusClassFinalGrade: "",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:632:hardcoded string:                mathPercent: "", sciencePercent: "", languageOfInstruction: ""
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:637:hardcoded string:        if (name == "finalClass") {
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:638:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ tlpFinalGrade: "", byjusClassFinalGrade: "", validity: "" })
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:641:hardcoded string:        if (name === "courseType") {
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:642:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ initialClass: "", subCourse: "", tablet: "", validity: "" });
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:646:hardcoded array:            [name]: value,
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:652:hardcoded object:        const { initialClass: selectedInitialClass, productLearningType, finalClass } = this.state;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:654:hardcoded number:        let initialGrade = isAdvanceAdmission.includes(productLearningType) ? (parseInt(finalClass, 10) + 1).toString() : selectedInitialClass;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:655:hardcoded object:        this.setState({ isOneToManyClass: false, isByjusClass: false })
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:656:hardcoded array:        const isMentoringApplicable = mentoringClassMap[initialGrade] || false;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:657:hardcoded array:        const isOneToManyMentoringApplicable = oneToManyMentoringClassMap[initialGrade] || false;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:658:hardcoded array:        const isByjusClassesApplicable = byjusClassesMap[initialGrade] || false;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:668:hardcoded string:        this.setState({ classType: value ? "neo" : "oneToMega", isByjusClass: false });
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:670:hardcoded object:        const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:671:hardcoded variable:        const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:673:hardcoded string:            productLearningType: "", initialClass: "", finalClass: "",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:674:hardcoded string:            byjusClassFinalGrade: "", validity: "", tlpFinalGrade: "", courseType: "",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:675:hardcoded string:            mathPercent: "", sciencePercent: "", languageOfInstruction: "", flowOfTopic: value ? "default" : "",
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:680:hardcoded object:        this.setState({ error });
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:686:hardcoded object:            this.setState({ productConfig: nextProps.productConfig }, async () => {
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:694:hardcoded object:        const { productDetails, productConfig, productType } = this.props;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:696:hardcoded string:        if (productType === get(productDetails, 'productType')) {
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:697:hardcoded string:            const formValues = get(productDetails, 'students[0].formValues');
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:701:hardcoded string:                course: get(formValues, 'course'),
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:702:hardcoded string:                board: get(formValues, 'board'),
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:703:hardcoded string:                initialClass: get(formValues, 'initialClass'),
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:704:hardcoded string:                finalClass: get(formValues, 'finalClass'),
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:705:hardcoded string:                subCourse: get(formValues, 'subCourse')
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:710:hardcoded string:        this.setState({ productConfig, course: 'K10/K12' });
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:716:hardcoded object:        const { user, authDetails, productCombination } = this.props;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:717:hardcoded object:        const { env } = authDetails
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:719:hardcoded string:        if (classType != "neo") {
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:722:hardcoded string:            const isEligible = getBatchesEligibility(this.state, "")
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:729:hardcoded string:        const { error, productConfig, productDetails, isMentoringClass, isOneToManyClass, isByjusClass, initialClass, validity, subCourse, productLearningType = "", courseType, classType, proficiency, trackId } = this.state;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:730:hardcoded object:        const { changeNextBtnMode, productType, productCombination, identifier, user, authDetails } = this.props;
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:731:hardcoded object:        const { env } = authDetails
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:733:hardcoded array:        const fields = productConfig ? this.getFields() : [];
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:734:hardcoded variable:        const isPrivilegedUser = checkIsPrivilegedUser(user);
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:735:hardcoded object:        const isProficiencyAndFot = isProficiencyAndFotAvailable({ state: this.state, props: this.props });
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:737:hardcoded string:        let grade = "";
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:739:hardcoded string:            if (get(this.state, "initialClass", "") < 10) {
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:740:hardcoded string:                grade = (parseInt(get(this.state, "initialClass", ""), 10) + 1).toString()
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:742:hardcoded string:                grade = get(this.state, "byjusClassFinalGrade", "")
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:745:hardcoded string:            grade = (parseInt(get(this.state, "initialClass", ""), 10) + 1).toString();
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:747:hardcoded string:            grade = get(this.state, "initialClass", "")
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:750:hardcoded variable:        const isBatchesEligible = this.checkBatchesEligibility()
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:753:hardcoded object:                <ErrorWrapper error={error} />
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:754:hardcoded string:                {isPrivilegedUser && productCombination === "byjus_classes" && <ClassTypeForm
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:755:hardcoded string:                    ref="classTypeForm"
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:756:hardcoded object:                    classType={classType}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:757:hardcoded object:                    changeClassType={this.changeClassType}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:760:hardcoded string:                    ref="productDetailsForm"
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:761:hardcoded object:                    productType={productType}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:762:hardcoded object:                    productLearningType={productLearningType}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:763:hardcoded object:                    fields={fields}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:764:hardcoded string:                    initialValues={{ ...getProductFormInitialValue(productDetails), flowOfTopic: "default" }}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:765:hardcoded object:                    isOneToManyAllowed={ELIGIBLE_COMBINATIONS_FOR_ONE_TO_MANY.includes(productCombination) ? true : false} // Byjus HLP
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:766:hardcoded object:                    isByjusClassesAllowed={ELIGIBLE_COMBINATIONS_FOR_BATCH.includes(productCombination) ? true : false} // Byjus Classes
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:767:hardcoded object:                    isMentoringClass={isPrivilegedUser && ELIGIBLE_COMBINATIONS_FOR_ONE_ON_ONE.includes(productCombination) ? isMentoringClass : false} // used to show mentoring component to select
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:768:hardcoded object:                    isMentoringAllowed={isPrivilegedUser && ELIGIBLE_COMBINATIONS_FOR_ONE_ON_ONE.includes(productCombination) ? true : false}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:772:hardcoded string:                        ref="schoolForm"
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:773:hardcoded string:                        board="CBSE"
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:774:hardcoded object:                        props={this.props}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:775:hardcoded object:                        grade={initialClass}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:776:hardcoded object:                        handleParentChanges={this.handleChanges}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:777:hardcoded object:                        handleClassBlurEvent={this.handleClassBlurEvent}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:782:hardcoded number:                {/* BHLP for 4 to 12 */}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:785:hardcoded string:                        ref="oneToManyDetailsForm"
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:786:hardcoded object:                        identifier={identifier}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:787:hardcoded object:                        initialClass={initialClass}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:788:hardcoded object:                        productType={productType}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:789:hardcoded object:                        validity={validity}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:790:hardcoded object:                        subCourse={subCourse}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:791:hardcoded string:                        productCombination="home_learning_program" />
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:793:hardcoded number:                {/* Byjus classes For 4 to 12 grades*/}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:796:hardcoded string:                        ref="byjusClassesDetailsForm"
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:797:hardcoded object:                        identifier={identifier}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:798:hardcoded object:                        initialClass={grade}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:799:hardcoded object:                        productType={productType}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:800:hardcoded object:                        validity={validity}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:801:hardcoded object:                        subCourse={subCourse}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:802:hardcoded object:                        productLearningType={productLearningType}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:803:hardcoded object:                        courseType={courseType}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:804:hardcoded object:                        classType={classType}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:805:hardcoded string:                        isV4Batch={validity.toString() == "2024" ? true : false}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:806:hardcoded object:                        proficiency={proficiency}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:807:hardcoded object:                        trackId={trackId}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:808:hardcoded string:                        productCombination="byjus_classes"
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:809:hardcoded string:                        schoolState={get(this.state, 'schoolState', '')}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:813:hardcoded string:                    ref='fetchComp'
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:814:hardcoded object:                    onClickFetchPrices={this.onClickFetchPrices}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:815:hardcoded object:                    getProductDetails={this.getProductDetails}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:816:hardcoded object:                    changeNextBtnMode={changeNextBtnMode}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:817:hardcoded object:                    productType={productType}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:818:hardcoded object:                    setError={this.setError}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:819:hardcoded object:                    productCombination={productCombination}
microservices-middleware/client/src/modules/product/components/types/StreamingProduct.js:827:hardcoded object:export default connect(mapStateToProps, mapDispatchToProps, null, { forwardRef: true })(StreamingProduct);microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:1:hardcoded object:import React, { Component } from 'react';
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:2:hardcoded object:import { connect } from 'react-redux';
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:3:hardcoded object:import { get, find, isEmpty } from 'lodash';
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:5:hardcoded object:import { saveProductDetails, addLoader, removeLoader, resetPrice, saveCashbackDetails } from '../../productReducer';
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:8:hardcoded number:    getFormattedValidity, isK12Class, getClasses, getTablets, checkIsPrivilegedUser, checkPrivTabletAccess, getAllAvailableTablets
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:9:hardcoded string:} from '../productHelper';
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:10:hardcoded file path:import CallApi from '../../../../api/callApi';
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:11:hardcoded file path:import ProductDetailsForm from '../ProducDetailsForm';
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:12:hardcoded file path:import FetchPrices from '../FetchPrices';
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:13:hardcoded file path:import ErrorWrapper from '../../../../components/ErrorWrapper';
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:14:hardcoded object:import { validateProfileSelection } from 'modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper'
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:16:hardcoded object:import { isEqual } from 'date-fns';
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:17:hardcoded object:import { productPermissions } from 'utility/screenPermission';
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:19:hardcoded variable:const mapStateToProps = state => ({
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:20:hardcoded string:    identifier: get(state, 'details.identifier'),
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:21:hardcoded string:    authDetails: get(state, 'auth.details'),
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:22:hardcoded string:    productDetails: get(state, 'product.details'),
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:23:hardcoded string:    productConfig: get(state, 'product.config'),
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:24:hardcoded string:    loading: get(state, 'product.loading'),
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:25:hardcoded string:    error: get(state, 'product.error'),
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:26:hardcoded string:    existingProfiles: get(state, 'product.existingProfiles'),
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:27:hardcoded string:    showProfileSelectionOption: get(state, 'product.showProfileSelectionOption'),
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:28:hardcoded string:    leadDetails: get(state, 'auth.leadDetails')
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:31:hardcoded variable:const mapDispatchToProps = dispatch => ({
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:56:hardcoded object:            productConfig: {},
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:57:hardcoded array:            fields: []
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:62:hardcoded object:        // const { productCombination } = this.state;
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:63:hardcoded object:        const { identifier, productCombination, existingProfiles, authDetails } = this.props;
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:64:hardcoded object:        const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:65:hardcoded variable:        const details = await productDetailsForm.getProductDetails();
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:66:hardcoded string:        const productDetails = get(details, 'productDetails');
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:68:hardcoded number:        if (existingProfiles.length > 0 && productDetails) {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:69:hardcoded variable:            const isValidate = validateProfileSelection(productDetails);
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:73:hardcoded string:        if (details && get(details, 'productDetails')) {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:74:hardcoded variable:            const payload = {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:75:hardcoded string:                productType: 'competitive',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:76:hardcoded string:                student: get(details, 'productDetails'),
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:77:hardcoded string:                mentoringCount: get(details, 'mentoringCount'),
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:78:hardcoded string:                couponDetails: get(details, 'couponDetails'),
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:86:hardcoded string:                url: '/api/product/competitive'
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:92:hardcoded object:        const { identifier } = this.props;
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:93:hardcoded variable:        const payload = {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:102:hardcoded string:                url: '/api/product/storeProductDetails',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:103:hardcoded string:                method: 'POST',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:106:hardcoded string:                const { productDetails, cashbackDetails } = get(response, 'data', {});
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:110:hardcoded object:                this.setState({ error: null });
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:112:hardcoded string:                this.navigateToScreen('address');
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:114:hardcoded object:                this.setState({ error }, () => {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:123:hardcoded object:        const { history } = this.props;
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:124:hardcoded string:        const url = `/${path}${get(history, 'location.search')}`;
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:133:hardcoded object:        const { fetchComp } = this.refs;
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:136:hardcoded object:            const { status, productDetails } = fetchComp.getProductsAndFinalPrice();
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:138:hardcoded string:                if (status && productDetails && (get(productDetails, 'finalPrice') >= 0)) {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:142:hardcoded string:                    this.setState({ error: 'Product Details Missing' });
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:145:hardcoded string:                const errMsg = get(error, 'message', 'Error') || error;
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:146:hardcoded object:                this.setState({ error: errMsg });
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:154:hardcoded object:        const { user } = this.props;
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:155:hardcoded variable:        const isPrivilegedUser = checkIsPrivilegedUser(user);
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:156:hardcoded string:        if (["byjus_classes", "home_learning_program"].includes(productCombination)) {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:157:hardcoded string:            return courses.filter(course => course.value === "IAS");
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:158:hardcoded string:        } else if ([ "byjus_tlp"].includes(productCombination)&& !isPrivilegedUser) {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:159:hardcoded string:            return courses.filter(course => course.value === "IAS");
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:165:hardcoded array:    getTypeOptions = (productCombination, typeOptions = [], isHLPCompetitiveAllowed,env) => {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:166:hardcoded variable:        let options = typeOptions;
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:167:hardcoded object:        const { user } = this.props;
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:168:hardcoded variable:        const isPrivilegedUser = checkIsPrivilegedUser(user);
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:169:hardcoded string:        if (["byjus_tlp"].includes(productCombination)) {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:170:hardcoded string:            options = options.filter(ele => !["only_byjus_classes"].includes(ele.value));
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:173:hardcoded string:            if (["byjus_tlp"].includes(productCombination)) {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:174:hardcoded string:                options = options.filter(ele => !["Extension", "Extension+Optional"].includes(ele.value));
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:175:hardcoded string:            } else if (["byjus_classes"].includes(productCombination)) {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:176:hardcoded string:                options = options.filter(ele => !["Extension_BYJUS_CLASSES", "Extension+Optional_BYJUS_CLASSES"].includes(ele.value));
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:179:hardcoded string:        if (productCombination === "byjus_classes") {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:180:hardcoded string:            options = options.filter(ele => (get(ele, "value", "").includes("BYJUS_CLASSES") || get(ele, "value", "").includes("byjus_classes")));
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:181:hardcoded string:        } else if (productCombination === "home_learning_program" && isHLPCompetitiveAllowed) {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:182:hardcoded string:            options = options.filter(ele => get(ele, "value", "").includes("HLP"));
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:184:hardcoded string:            options = ["development", "local"].includes(env) ?options.filter(ele => get(ele, "value", "").indexOf("HLP") <= 0 && get(ele, "value", "").indexOf("BYJUS_CLASSES") < 0 ):options.filter(ele => get(ele, "value", "").indexOf("HLP") <= 0 && get(ele, "value", "").indexOf("BYJUS_CLASSES") <= 0 );
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:190:hardcoded object:        const { selectedProfile } = this.state;
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:191:hardcoded object:        const { existingProfiles, user } = this.props;
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:192:hardcoded variable:        const isPrivilegedUser = checkIsPrivilegedUser(user);
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:193:hardcoded number:        if (existingProfiles && existingProfiles.length > 0) {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:194:hardcoded variable:            let newExistingProfile = existingProfiles;
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:195:hardcoded string:            newExistingProfile = newExistingProfile.find(profile => profile.value === "newProfile");
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:197:hardcoded string:                existingProfiles.push({ "label": "New Profile", value: "newProfile" })
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:204:hardcoded variable:        let isBhlpApplicable = false;
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:206:hardcoded string:            course: selectedCourse, isMiscellaneousReq, miscellaneous, type, course, language = "", optionalCourses = [] } = this.state;
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:208:hardcoded object:        const { productType, user, productCombination, existingProfiles, authDetails, showProfileSelectionOption, leadDetails } = this.props;
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:209:hardcoded string:        const env = get(authDetails, "env")
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:210:hardcoded array:        const { Products = [], Courses = [], Boards = [], Tablets = [], MeTablets = [] } = productConfig || {};
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:212:hardcoded object:        const productConfiguration = find(Products, { formattedName: productType }) || {};
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:213:hardcoded array:        const { validity, tablets, batch = [] } = productConfiguration || {};
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:214:hardcoded object:        const selectedCourseConfig = find(Courses, { formattedName: selectedCourse }) || {};
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:215:hardcoded string:        const courseLanguages = get(selectedCourseConfig, 'languages', []);
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:216:hardcoded string:        let typeOptions = get(selectedCourseConfig, 'types', []);
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:218:hardcoded string:        const permissions = get(user, "permissions", []);
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:219:hardcoded variable:        const isHLPCompetitiveAllowed = permissions.includes(productPermissions.allowHLPCompetitive);
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:221:hardcoded string:        if (type && type.includes("HLP") || type && type.includes("BYJUS_CLASSES") && course === "IAS") {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:225:hardcoded variable:        let fields = [{
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:226:hardcoded string:            type: 'select',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:227:hardcoded string:            name: 'course',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:228:hardcoded string:            label: 'Select Course',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:229:hardcoded string:            options: this.getCourseOptions(get(productConfiguration, 'courses'), productCombination),
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:232:hardcoded string:            message: "Please select Course"
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:234:hardcoded string:            type: courseLanguages.length ? 'select' : 'hidden',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:235:hardcoded string:            options: get(selectedCourseConfig, 'languages'),
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:236:hardcoded string:            name: 'language',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:237:hardcoded string:            label: 'Select Language',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:240:hardcoded string:            message: "Please select Language"
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:242:hardcoded string:            type: 'select',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:244:hardcoded string:            name: 'type',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:245:hardcoded string:            label: 'Select Type',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:248:hardcoded string:            message: "Please select Type"
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:250:hardcoded string:            type: isBhlpApplicable ? 'select' : 'hidden',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:252:hardcoded string:            name: 'workshops',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:253:hardcoded string:            label: 'Select Batch',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:256:hardcoded string:            message: "Please select Batch"
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:258:hardcoded string:            type: (selectedCourse === "IAS" && get(selectedCourseConfig, 'optionalCourses.options', []).includes(type)) ? 'select' : 'hidden',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:259:hardcoded string:            options: this.getOptionalCourses(language, get(selectedCourseConfig, 'optionalCourses.courses', [])),
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:260:hardcoded string:            required: (selectedCourse === "IAS" && get(selectedCourseConfig, 'optionalCourses.options', []).includes(type)) ? true : false,
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:261:hardcoded string:            name: 'optionalCourses',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:262:hardcoded string:            label: 'Select Optional Course',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:264:hardcoded string:            message: "Please select Optional Courses"
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:266:hardcoded string:            type: get(selectedCourseConfig, 'miscellaneous.options', []).includes(type) ? "checkbox" : "disable",
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:267:hardcoded string:            name: 'isMiscellaneousReq',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:268:hardcoded string:            checkBoxLabel: 'Select only Miscellaneous Courses',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:271:hardcoded string:            type: isMiscellaneousReq && get(selectedCourseConfig, 'miscellaneous.options', []).includes(type) ? 'select' : 'hidden',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:272:hardcoded string:            mode: 'multiple',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:273:hardcoded string:            options: this.getMiscellaneousCourses(language, get(selectedCourseConfig, 'miscellaneous.courses', []), productCombination, env),
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:274:hardcoded string:            name: 'miscellaneous',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:275:hardcoded string:            label: 'Select Miscellaneous Course',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:277:hardcoded string:            required: isMiscellaneousReq && get(selectedCourseConfig, 'miscellaneous.options', []).includes(type),
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:278:hardcoded array:            value: !isMiscellaneousReq && [],
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:279:hardcoded string:            message: "Please select Miscellaneous Courses"
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:281:hardcoded string:            type: 'select',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:282:hardcoded string:            options: getFormattedValidity({ validity, user, productType: "competitive", productCombination, selectedCourse, type, isMiscellaneousReq, miscellaneous, optionalCourses  }),
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:283:hardcoded string:            name: 'validity',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:284:hardcoded string:            label: 'Select Initial Validity',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:287:hardcoded string:            message: "Please Select Initial Validity"
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:289:hardcoded string:            type: 'select',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:290:hardcoded string:            options: checkPrivTabletAccess(leadDetails, user) ? getAllAvailableTablets : getTablets({ tablets, user, productType: "competitive", productCombination, leadDetails, MeTablets }),
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:291:hardcoded string:            name: 'tablet',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:293:hardcoded string:            disabled: (productCombination == "byjus_tlp") && isMiscellaneousReq && get(selectedCourseConfig, 'miscellaneous.options', []).includes(type) ? true : false,
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:294:hardcoded string:            label: 'Select Tablet',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:295:hardcoded string:            message: "Please select Tablet"
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:297:hardcoded string:            type: (showProfileSelectionOption && existingProfiles.length > 0 ? 'radio' : 'hidden'),
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:299:hardcoded string:            name: 'userProfile',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:300:hardcoded string:            label: 'Choose Profile Type',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:302:hardcoded string:            message: "Please Choose Profile Type",
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:304:hardcoded string:                display: 'block',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:305:hardcoded string:                height: '30px',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:306:hardcoded string:                lineHeight: '30px',
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:308:hardcoded number:            required: (showProfileSelectionOption && existingProfiles.length > 0 ? true : false)
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:315:hardcoded array:    getMiscellaneousCourses = (language, MiscellaneousCourses = [], productCombination, env) => {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:316:hardcoded variable:        let options = MiscellaneousCourses
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:318:hardcoded string:        //if (["development", "local"].includes(env)) {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:319:hardcoded string:            if (productCombination == "byjus_tlp") {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:320:hardcoded string:                if (language === "Hindi") {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:321:hardcoded string:                    options = options.filter(ele => ["Misc Prelims Test Series - Hindi", "Misc Mains Test Series - Hindi"].includes(ele.value))
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:324:hardcoded string:                    options = options.filter(ele => ['Misc Mains Test Series - General Studies', 'Misc Mains Test Series - Sociology', "Misc Prelims Test Series - English"].includes(ele.value))
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:327:hardcoded string:            else if (productCombination == 'byjus_classes') {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:328:hardcoded string:                if (language === "Hindi") {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:329:hardcoded string:                    options = options.filter(ele => get(ele, "value", "").includes("Misc Prelims Test Series - Hindi"));
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:331:hardcoded string:                    options = options.filter(ele => get(ele, "value", "").includes('Misc Prelims Test Series - English'));
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:336:hardcoded string:        //     if (productCombination == "byjus_tlp") {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:337:hardcoded string:        //         if (language === "Hindi")
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:338:hardcoded array:        //             return [];
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:340:hardcoded string:        //             options = options.filter(ele => ['Misc Mains Test Series - General Studies', 'Misc Mains Test Series - Sociology'].includes(ele.value))
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:343:hardcoded string:        //     else if (productCombination == 'byjus_classes') {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:344:hardcoded string:        //         if (language === "Hindi") {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:345:hardcoded string:        //             options = options.filter(ele => get(ele, "value", "").includes("Misc Prelims Test Series - Hindi"));
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:347:hardcoded string:        //             options = options.filter(ele => get(ele, "value", "").includes('Misc Prelims Test Series - English'));
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:354:hardcoded array:    getOptionalCourses = (language, OptionalCourses = []) => {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:355:hardcoded array:        let options = []
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:356:hardcoded string:        if (language === "English") {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:363:hardcoded object:        const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:364:hardcoded variable:        const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:366:hardcoded string:        if (name === "course") {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:367:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ language: "", type: "", workshops: "", optionalCourses: [], validity: "" });
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:369:hardcoded string:        if (name === "type") {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:370:hardcoded array:            detailsForm && detailsForm.setFieldsValue({ optionalCourses: [], miscellaneous: [], isMiscellaneousReq: false });
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:371:hardcoded object:            this.setState({ isMiscellaneousReq: false })
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:373:hardcoded string:        if (name === "language") {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:374:hardcoded array:            detailsForm && detailsForm.setFieldsValue({ miscellaneous: [], optionalCourses: [] })
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:376:hardcoded string:        if (name === "miscellaneous"){
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:377:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ miscellaneous: [], optionalCourses: [], validity: "" });
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:378:hardcoded string:            this.setState({ miscellaneous:[], validity: "" });
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:382:hardcoded array:            [name]: value,
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:388:hardcoded object:        const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:389:hardcoded variable:        const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:391:hardcoded array:        detailsForm && detailsForm.setFieldsValue({ miscellaneous: [] });
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:392:hardcoded string:        if (name === "isMiscellaneousReq") {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:393:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ tablet: "", validity: ""});
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:394:hardcoded string:            this.setState({validity:""})
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:397:hardcoded array:            [name]: checked,
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:398:hardcoded array:            miscellaneous: [],
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:404:hardcoded object:        this.setState({ error });
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:410:hardcoded object:            this.setState({ productConfig: nextProps.productConfig }, async () => {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:418:hardcoded object:        const { productDetails, productConfig, productType } = this.props;
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:420:hardcoded string:        if (productType === get(productDetails, 'productType')) {
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:421:hardcoded object:            this.setState({ productDetails });
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:422:hardcoded string:            const formValues = get(productDetails, 'students[0].formValues');
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:426:hardcoded string:                course: get(formValues, 'course'),
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:427:hardcoded string:                isMiscellaneousReq: get(formValues, 'course')
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:432:hardcoded object:        this.setState({ productConfig });
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:436:hardcoded object:        const { error, productConfig, productDetails } = this.state;
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:437:hardcoded object:        const { changeNextBtnMode, productCombination,productType } = this.props;
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:439:hardcoded array:        const fields = productConfig ? this.getFields() : [];
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:442:hardcoded object:                <ErrorWrapper error={error} />
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:444:hardcoded string:                    ref="productDetailsForm"
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:445:hardcoded object:                    productType={productType}
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:446:hardcoded object:                    fields={fields}
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:447:hardcoded object:                    initialValues={getProductFormInitialValue(productDetails)}
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:450:hardcoded string:                    ref='fetchComp'
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:451:hardcoded object:                    onClickFetchPrices={this.onClickFetchPrices}
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:452:hardcoded object:                    getProductDetails={this.getProductDetails}
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:453:hardcoded object:                    changeNextBtnMode={changeNextBtnMode}
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:454:hardcoded object:                    productCombination={productCombination}
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:455:hardcoded object:                    productType={productType}
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:456:hardcoded object:                    setError={this.setError}
microservices-middleware/client/src/modules/product/components/types/CompetitiveProduct.js:464:hardcoded object:export default connect(mapStateToProps, mapDispatchToProps, null, { forwardRef: true })(CompetitiveProduct);microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:1:hardcoded object:import React, { Component } from 'react';
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:2:hardcoded object:import { connect } from 'react-redux';
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:3:hardcoded object:import _, { get, find, isEmpty, isEqual, size } from 'lodash';
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:5:hardcoded object:import { saveProductDetails, addLoader, removeLoader, resetPrice, saveCashbackDetails } from '../../productReducer';
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:6:hardcoded object:import { saveOrderPunchingType } from '../../../../store/authReducer';
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:8:hardcoded number:    getProductFormInitialValue, getFormattedValidity, isPreK3Class,
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:9:hardcoded number:    isK12Class, isK3orPreKClass, getK3orPreKTablets, getTablets, getMentoringClassMap, initialGradeOptionForNeo,
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:13:hardcoded string:} from '../productHelper';
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:14:hardcoded file path:import CallApi from 'api/callApi';
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:15:hardcoded file path:import ClassTypeForm from '../ClassTypeForm'
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:16:hardcoded file path:import ProductDetailsForm from '../ProducDetailsForm';
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:17:hardcoded file path:import FetchPrices from '../FetchPrices';
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:18:hardcoded file path:import ErrorWrapper from 'components/ErrorWrapper';
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:19:hardcoded file path:import OneToMany from '../mentoring/OneToManyMentoring';
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:20:hardcoded object:import { validateBhlpMentoringDetails, validateByjusClassesMentoringDetails } from '../mentoring/MentoringHelper';
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:21:hardcoded file path:import ByjusMentoringClasses from '../mentoring/ByjusMentoringClasses';
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:26:hardcoded number:    isAdvanceAdmission, D4_1_1_TABLET_LIST, deviceTypeEligibleGrades, BELP_K3_GRADES, IS_UPGRADE_VERTICAL
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:27:hardcoded string:} from '../../utils/productConstant';
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:28:hardcoded object:import { validateProfileSelection } from 'modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper'
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:32:hardcoded string:} from '../../utils/ByjusClassesHelper';
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:33:hardcoded file path:import Proficiency from 'modules/student/Proficiency';
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:34:hardcoded file path:import School from 'modules/student/School'
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:35:hardcoded object:import { getSamplerTlpTabletOptions } from '../../utils/epicSampler';
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:36:hardcoded file path:import ByjusMathMentoringClasses from '../mentoring/ByjusMathMentoringClasses';
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:39:hardcoded variable:const mapStateToProps = state => ({
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:40:hardcoded string:    authDetails: get(state, 'auth.details'),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:41:hardcoded string:    orderPunchingType: get(state, 'auth.orderPunchingType'),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:42:hardcoded string:    leadDetails: get(state, 'auth.leadDetails'),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:43:hardcoded string:    salesDetails: get(state, "details.salesDetails"),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:44:hardcoded string:    customerDetails: get(state, 'details.customerDetails'),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:45:hardcoded string:    identifier: get(state, 'details.identifier'),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:46:hardcoded string:    existingProfiles: get(state, 'product.existingProfiles'),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:47:hardcoded string:    showProfileSelectionOption: get(state, 'product.showProfileSelectionOption'),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:48:hardcoded string:    productDetails: get(state, 'product.details'),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:49:hardcoded string:    productConfig: get(state, 'product.config'),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:50:hardcoded string:    loading: get(state, 'product.loading'),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:51:hardcoded string:    error: get(state, 'product.error')
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:54:hardcoded variable:const mapDispatchToProps = dispatch => ({
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:81:hardcoded object:            productConfig: {},
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:82:hardcoded array:            fields: [],
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:91:hardcoded number:            isV4Batch: true
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:96:hardcoded object:        let { env, productDetails, studentMarksDetails, byjusClassesFormValue, schoolAndProficiencyDetails } = details
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:102:hardcoded string:            doubtClassDetails: get(byjusClassesFormValue, "formValue.selectedDoubtClass", null),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:103:hardcoded string:            electiveDetails: get(byjusClassesFormValue, "formValue.electivesDetails", null),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:104:hardcoded string:            languageOfInstruction: get(byjusClassesFormValue, "formValue.languageOfInstruction", null),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:105:hardcoded string:            languageOfInstructionId: get(byjusClassesFormValue, "formValue.languageOfInstructionId", null)
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:111:hardcoded object:        const { initialClass, classType, tabletId, tod = true, doc = true } = this.state;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:112:hardcoded object:        const { productCombination, identifier, existingProfiles, authDetails, productConfig, leadDetails } = this.props;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:113:hardcoded array:        const { Boards = [] } = productConfig || {};
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:114:hardcoded object:        const { env, featureEnableList } = authDetails;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:115:hardcoded string:        const isEpicEnabled = get(featureEnableList, 'epic_enable_user_list', "");
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:116:hardcoded string:        const isEpicSamplerEnabled = get(featureEnableList, 'byjusmath_epic_sampler_bda');
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:117:hardcoded string:        const isD4TabletEnabled = get(featureEnableList, 'd41.1_tablet_access_for_bda');
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:118:hardcoded string:        const isInsideSalesEnabled = get(featureEnableList, 'single_year_byjus_classes');
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:119:hardcoded string:        const isDevEnv = ["development", "local"].includes(env);
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:120:hardcoded string:        const isLocalEnv = ["local"].includes(env);
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:121:hardcoded object:        const { productDetailsForm, oneToManyDetailsForm, byjusClassesDetailsForm, proficiencyForm, schoolForm, byjusMathDetailsForm } = this.refs;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:122:hardcoded array:        let oneToManyMentoringDetails = [], bhlpCourseDetails = [], byjusClassesMentoringDetails = [];
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:124:hardcoded string:        const workshopChannel = get(leadDetails, "Workshop_channel", '') || get(leadDetails, 'workshopChannel', '');
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:125:hardcoded variable:        const details = await productDetailsForm.getProductDetails();
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:126:hardcoded variable:        const oneToManyFormValue = oneToManyDetailsForm && await oneToManyDetailsForm.getMentoringValues();
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:127:hardcoded variable:        const byjusClassesFormValue = byjusClassesDetailsForm && await byjusClassesDetailsForm.getMentoringValues();
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:128:hardcoded variable:        const studentMarksDetails = proficiencyForm && await proficiencyForm.getStudentAcademicDetails();
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:129:hardcoded variable:        const schoolAndProficiencyDetails = schoolForm && await schoolForm.getSchoolDetails()
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:130:hardcoded variable:        const deviceType = this.getDeviceType();
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:131:hardcoded variable:        const byjusMathDetailsFormValues = byjusMathDetailsForm && (await byjusMathDetailsForm.getMentoringValues())
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:132:hardcoded string:        const dbelByjusMathSampler = productCombination === 'byjus_tlp' && BELP_K3_GRADES.includes(initialClass)
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:143:hardcoded string:        let productDetails = get(details, 'productDetails');
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:144:hardcoded string:        const productLearningType = get(productDetails, "productLearningType", "")
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:146:hardcoded string:            productDetails['tabletId'] = this.state[`tabletId`];
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:148:hardcoded string:                productDetails['bfsBatch'] = "1:6";
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:149:hardcoded string:                productDetails['bfsProductType'] = "16";
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:153:hardcoded string:            productDetails['mentoringDetails'] = get(byjusMathDetailsFormValues, 'mentoring', []);
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:154:hardcoded string:            productDetails['bhlpCourseDetails'] = get(byjusMathDetailsFormValues, 'courseInfo', {});
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:156:hardcoded string:        productDetails['deviceType'] = deviceType
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:157:hardcoded string:        productDetails['featureTag'] = getFeatureTag({ tablet: tabletId, isD4TabletEnabled })
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:158:hardcoded string:        productDetails['tod'] = tod;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:159:hardcoded string:        productDetails['doc'] = doc;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:161:hardcoded number:        /** For classes 12 mentoring details is not required */
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:162:hardcoded string:        if (ELIGIBLE_COMBINATIONS_FOR_ONE_TO_MANY.includes(productCombination) && !["12"].includes(initialClass)) {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:163:hardcoded variable:            const response = validateBhlpMentoringDetails(oneToManyFormValue, productDetails);
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:164:hardcoded string:            oneToManyMentoringDetails = get(response, "oneToManyMentoringDetails", []);
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:165:hardcoded string:            bhlpCourseDetails = get(response, "bhlpCourseDetails", []);
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:170:hardcoded string:        if ((ELIGIBLE_COMBINATIONS_FOR_BATCH.includes(productCombination) || productLearningType == "BYJUS_AKASH_CLASSES") && !["1", "2", "3"].includes(initialClass)) {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:173:hardcoded variable:            const response = validateByjusClassesMentoringDetails(byjusClassesFormValue, productDetails);
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:174:hardcoded string:            byjusClassesMentoringDetails = get(response, "byjusClassesMentoringDetails", []);
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:175:hardcoded string:            bhlpCourseDetails = get(response, "bhlpCourseDetails", []);
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:180:hardcoded number:        if (existingProfiles.length > 0 && productDetails) {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:181:hardcoded variable:            const isValidate = validateProfileSelection(productDetails);
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:185:hardcoded string:        if (productCombination == "byjus_classes") {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:186:hardcoded object:            const { productLearningType } = this.state;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:187:hardcoded string:            productDetails["productLearningType"] = productLearningType
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:190:hardcoded string:        if (classType == "neo" && productCombination == "byjus_classes") {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:191:hardcoded object:            productDetails = this.getUpdatedProductDetails({ env, productDetails, studentMarksDetails, byjusClassesFormValue, schoolAndProficiencyDetails })
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:195:hardcoded variable:            const payload = {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:197:hardcoded string:                productType: 'combo',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:199:hardcoded string:                mentoringCount: get(details, 'mentoringCount'),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:200:hardcoded string:                couponDetails: get(details, 'couponDetails'),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:202:hardcoded string:                mentoringDetails: isLocalEnv && dbelByjusMathSampler ? get(byjusMathDetailsFormValues, 'mentoring', []) : byjusClassesMentoringDetails,
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:203:hardcoded string:                bhlpCourseDetails: isLocalEnv && dbelByjusMathSampler ? get(byjusMathDetailsFormValues, 'courseInfo', {}) : bhlpCourseDetails,
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:209:hardcoded string:                loggedInMobile: get(leadDetails, 'studentMobile', ''),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:210:hardcoded number:                isV4Batch: this.state.isV4Batch
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:213:hardcoded string:            let url = '/api/product/combo'
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:214:hardcoded string:            url = classType == "neo" ? '/api/neo/product/combo' : url
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:215:hardcoded string:            // if(isDevEnv && productCombination === 'byjus_classes' && classType == "neo") {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:218:hardcoded string:            //         url:'/api/neo/product/comboProduct'
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:230:hardcoded object:        const { identifier, productCombination } = this.props;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:231:hardcoded object:        const { productLearningType } = this.state;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:232:hardcoded object:        let { orderPunchingType, customerDetails, existingProfiles } = this.props;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:233:hardcoded string:        const primaryNumber = get(customerDetails, "studentMobileNo", "");
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:235:hardcoded string:        if (["AAKASH_LIVE"].includes(productLearningType)) {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:236:hardcoded string:            this.props.saveOrderPunchingType("AAKASH_SD_CARD_PLUS_LIVE ");
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:237:hardcoded string:            orderPunchingType = "AAKASH_SD_CARD_PLUS_LIVE"
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:238:hardcoded string:        } else if (["AAKASH_SD_CARD"].includes(productLearningType)) {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:239:hardcoded string:            this.props.saveOrderPunchingType("AAKASH_SD_CARD ");
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:240:hardcoded string:            orderPunchingType = "AAKASH_SD_CARD"
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:243:hardcoded variable:        const payload = {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:254:hardcoded string:                payload["productDetails"] = formatByjusClassesFormValues(productDetails);
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:260:hardcoded string:                url: '/api/product/storeProductDetails',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:261:hardcoded string:                method: 'POST',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:264:hardcoded string:                const { productDetails, cashbackDetails } = get(response, 'data', {});
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:268:hardcoded object:                this.setState({ error: null });
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:270:hardcoded string:                this.navigateToScreen('address');
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:272:hardcoded object:                this.setState({ error }, () => {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:281:hardcoded object:        const { history } = this.props;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:282:hardcoded string:        const url = `/${path}${get(history, 'location.search')}`;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:291:hardcoded object:        const { fetchComp } = this.refs;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:292:hardcoded object:        const { isBooksOpted } = this.props;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:295:hardcoded object:            const { status, productDetails } = fetchComp.getProductsAndFinalPrice();
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:297:hardcoded string:                if (status && productDetails && (get(productDetails, 'finalPrice') >= 0)) {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:298:hardcoded string:                    productDetails["isBooksOpted"] = isBooksOpted;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:302:hardcoded string:                    this.setState({ error: 'Product Details Missing' });
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:305:hardcoded string:                const errMsg = get(error, 'message', 'Error') || error;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:306:hardcoded object:                this.setState({ error: errMsg });
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:313:hardcoded object:        const { customerDetails, identifier, addLoader, removeLoader } = this.props;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:314:hardcoded string:        const studentMobileNo = get(customerDetails, "studentMobileNo", "")
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:315:hardcoded object:        this.setState({ loading: true });
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:319:hardcoded string:            url: '/api/aakash/isPrimaryNumber',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:320:hardcoded string:            method: 'POST',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:321:hardcoded object:            body: { primaryNumber: studentMobileNo, identifier }
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:323:hardcoded string:            const { success } = get(response, 'data', {});
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:332:hardcoded string:                errorActions: [{ handleOnClick: this.sendAppLink, text: "Send App Link to Customer", name: "aakashError" }]
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:339:hardcoded object:        let { errorActions } = this.state;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:340:hardcoded object:        const { customerDetails, identifier } = this.props;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:341:hardcoded string:        const studentMobileNo = get(customerDetails, "studentMobileNo", "")
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:342:hardcoded object:        this.setState({ loading: true });
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:346:hardcoded string:            url: '/api/aakash/sendAppLinkSMS',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:347:hardcoded string:            method: 'POST',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:348:hardcoded object:            body: { primaryNumber: studentMobileNo }
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:350:hardcoded string:            const { smsResult } = get(response, 'data', {});
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:352:hardcoded string:                if (error.name === 'aakashError') {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:353:hardcoded array:                    errorActions[idx].message = smsResult.message
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:367:hardcoded string:                if (error.name === 'aakashError') {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:368:hardcoded array:                    errorActions[idx].message = err.errorMsg
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:382:hardcoded string:        // if (["AAKASH_SD_CARD","AAKASH_LIVE"].includes(value)) {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:385:hardcoded object:        const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:386:hardcoded variable:        const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:387:hardcoded object:        const { setAdvanceOrderPunching } = this.props;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:389:hardcoded variable:        const productLearningType = value;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:390:hardcoded string:        this.handleChanges(getCourseTypeOption("combo", productLearningType), 'courseType');
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:391:hardcoded object:        this.setState({ productLearningType, isByjusClass: false });
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:398:hardcoded string:                // initialClass: "", finalClass: "", 
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:399:hardcoded string:                subCourse: "", byjusClassFinalGrade: "", validity: "", tlpFinalGrade: "", courseType: "", errorActions: {}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:405:hardcoded object:        const { tablet, initialClass } = this.state;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:408:hardcoded number:            if (D4_1_1_TABLET_LIST.includes(tablet)) {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:409:hardcoded string:                deviceType = "Tablet(LearnStation)"
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:412:hardcoded string:                deviceType = "SD Card Only"
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:415:hardcoded string:                deviceType = "Tablet(Lenovo/Samsung)"
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:423:hardcoded object:        const { selectedBoard, selectedInitialClass, validity, productLearningType, isExtraDiscntSale, productType, selectedFinalClass, state } = details
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:424:hardcoded object:        const { user, authDetails } = this.props
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:425:hardcoded object:        const { env } = authDetails;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:426:hardcoded string:        const isDevEnv = ["development", "local"].includes(env);
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:427:hardcoded array:        let options = []
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:430:hardcoded object:                options = getExtraDiscountSaleValidity({ validity })
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:432:hardcoded object:                options = getFormattedValidity({ validity, user, initialClass: selectedInitialClass, selectedBoard, productCombination: productLearningType, authDetails, isDevEnv, productType, finalClass: selectedFinalClass, state })
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:438:hardcoded string:        const { Tablets, tablets, selectedInitialClass, D4EligibleManagers, productCombination = "", selectedFinalClass, tlpFinalGrade, MeTablets = [], isPrivilegedUser = false } = details
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:439:hardcoded object:        const { user, salesDetails, authDetails, leadDetails } = this.props
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:440:hardcoded object:        const { subCourse: selectedSubCourse, tlpFinalGrade: selectedTlpFinalGrade } = this.state
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:441:hardcoded object:        const { env, featureEnableList } = authDetails
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:442:hardcoded string:        const isEpicSamplerEnabled = get(featureEnableList, 'byjusmath_epic_sampler_bda');
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:444:hardcoded array:        let options = []
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:445:hardcoded number:        if (isK3orPreKClass(selectedInitialClass)) {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:446:hardcoded number:            options = getK3orPreKTablets({ Tablets, user, selectedClass: selectedInitialClass, salesDetails, authDetails, D4EligibleManagers, leadDetails, productCombination, MeTablets })
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:447:hardcoded string:        } else if (productCombination == 'byjus_aakash') {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:448:hardcoded number:            options = getAakashTablet({ tablets, user, selectedClass: selectedInitialClass, salesDetails, authDetails, D4EligibleManagers, leadDetails, productCombination, MeTablets })
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:450:hardcoded number:            options = getTablets({ tablets, user, selectedClass: selectedInitialClass, selectedFinalClass, salesDetails, authDetails, D4EligibleManagers, leadDetails, productCombination, selectedSubCourse, env, selectedTlpFinalGrade, MeTablets })
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:452:hardcoded string:        if (['11', '12', '12+', '13+'].includes(selectedFinalClass) || ['11', '12', '12+', '13+'].includes(selectedInitialClass) || ['11', '12', '12+', '13+'].includes(tlpFinalGrade)) {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:453:hardcoded string:            options = options.filter(tablet => tablet.value != "TLXMZ2")
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:455:hardcoded string:                { label: "Lenovo 10 inch Tablet Mobile Data (3GB/ 32GB) - (Rs 16000)", value: "TLXMZZ" },
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:456:hardcoded string:                { label: "Lenovo Tablet (Add-on-BYJUS) (8 inch)(Rs.8000)", value: "TL8MZZ" }
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:459:hardcoded string:                options = options.filter(tablet => tablet.value !== "TS8MZZ")
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:462:hardcoded string:        if (['11', '12', '12+', '13+'].includes(selectedFinalClass) || ['11', '12', '12+', '13+'].includes(tlpFinalGrade)) {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:463:hardcoded string:            options = options.filter(tab => !["BYJU'S LearnStation 10inch Mobile Data Grey Tablet (Rs 10000)"].includes(tab.label))
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:465:hardcoded object:        options = getSamplerTlpTabletOptions({ options, env, isEpicSamplerEnabled, productCombination })
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:469:hardcoded number:    getD4SDCardType = (details) => {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:470:hardcoded object:        const { selectedTablet, selectedInitialClass, selectedFinalClass, isByjusAakash, user } = details
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:471:hardcoded object:        const { authDetails } = this.props
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:472:hardcoded string:        const env = get(authDetails, "env")
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:473:hardcoded string:        let type = "checkbox"
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:474:hardcoded string:        if (selectedTablet || env == "production" || isPreK3Class(selectedInitialClass) || isByjusAakash) {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:475:hardcoded string:            type = "hidden"
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:477:hardcoded string:        if (isK12Class(selectedFinalClass) && (selectedTablet || env === "production" || isByjusAakash)) {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:478:hardcoded string:            type = "hidden"
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:484:hardcoded object:        const { selectedProfile } = this.state;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:485:hardcoded object:        const { existingProfiles, user } = this.props;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:486:hardcoded variable:        const isPrivilegedUser = checkIsPrivilegedUser(user);
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:487:hardcoded number:        if (existingProfiles && existingProfiles.length > 0) {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:488:hardcoded variable:            let newExistingProfile = existingProfiles;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:489:hardcoded string:            newExistingProfile = newExistingProfile.find(profile => profile.value === "newProfile");
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:491:hardcoded string:                existingProfiles.push({ "label": "New Profile", value: "newProfile" })
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:498:hardcoded object:        const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:499:hardcoded variable:        const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:502:hardcoded string:            this.onChangeProductLearningType("byjus_classes_plus_byjus_tlp", "productLearningType")
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:508:hardcoded string:            this.onChangeProductLearningType("byjus_classes", "productLearningType")
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:509:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ finalClass: "", tlpFinalGrade: "" })
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:522:hardcoded object:        const { showProfileSelectionOption, existingProfiles, authDetails, salesDetails, leadDetails } = this.props;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:523:hardcoded object:        const { env, featureEnableList } = authDetails;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:524:hardcoded string:        const isDevEnv = ["development", "local"].includes(env);
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:525:hardcoded string:        !selectedCourse && this.handleChanges('K10/K12', 'course');
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:528:hardcoded object:        const { productType, user, productCombination } = this.props;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:529:hardcoded object:        const { vertical } = user;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:530:hardcoded variable:        const isPrivilegedUser = checkIsPrivilegedUser(user);
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:531:hardcoded number:        const { Products = [], Courses = [], Boards = [], Tablets = [], D4EligibleManagers = [], MeTablets = [] } = productConfig || {};
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:533:hardcoded object:        const productConfiguration = find(Products, { formattedName: productType }) || {};
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:534:hardcoded object:        const { validity, tablets } = productConfiguration || {};
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:535:hardcoded object:        const selectedCourseConfig = find(Courses, { formattedName: selectedCourse }) || {};
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:536:hardcoded string:        const selectedBoardConfig = find(Boards, { formattedName: (selectedBoard || "CBSE") }) || {};
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:538:hardcoded variable:        const mentoringClassMap = getMentoringClassMap(selectedBoardConfig.classes);
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:539:hardcoded variable:        const oneToManyMentoringClassMap = getOneToManyMentoringClassMap(selectedBoardConfig.classes);
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:540:hardcoded variable:        const byjusClassesMap = getByjusClassesMap(selectedBoardConfig.classes);
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:542:hardcoded number:        //Requirement on Jan 2022 : Every sales person reporting to A Particular Senior manager and punching order on an existing profile should have one year extra validity and should be able to sell (byjus_aakash & btlp, 11+12 / 12 grade, 2023 validity) on a lower price.
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:543:hardcoded object:        const isExtraDiscntSale = isExtraDiscountSale({ user, existingProfiles, productCombination, initialClass: selectedInitialClass, finalClass: selectedFinalClass, isPrivilegedUser, initialGradeProductCategory, featureEnableList, isDevEnv });
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:545:hardcoded object:        const subCourses = getSubCourses({ selectedBoardConfig, selectedFinalClass, tlpFinalGrade, byjusClassFinalGrade, productLearningType, selectedInitialClass });
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:546:hardcoded variable:        const subCourseOptions = subCourses && fetchSubCourseOptions(productCombination, subCourses, selectedInitialClass, productLearningType, tlpFinalGrade, isPrivilegedUser, initialGradeProductCategory, isExtraDiscntSale, productType, isDevEnv)
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:547:hardcoded variable:        const isadvanceOrderPunchingAllowed = isAdvanceOrderPunchingAllowed();
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:548:hardcoded string:        const isEpicSamplerEnabled = get(featureEnableList, 'byjusmath_epic_sampler_bda');
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:549:hardcoded string:        const isInsideSalesEnabled = get(featureEnableList, 'single_year_byjus_classes');
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:553:hardcoded string:        // if ( !isDevEnv&&_.isEqual(productCombination, "byjus_tlp") && !isEmpty(subCourses) && !checkIsPrivilegedUser(user)) {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:554:hardcoded string:        //     let indexOfCommerce = subCourseOptions.findIndex(name => _.isEqual(name.label, "Commerce"));
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:555:hardcoded number:        //     if (indexOfCommerce !== -1)
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:556:hardcoded number:        //         subCourseOptions.splice(indexOfCommerce, 1);
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:559:hardcoded string:        //const isAakashNumberNotRegistered = errorActions && errorActions.find(error => { return error.name === 'aakashError' });
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:560:hardcoded string:        const isByjusAakash = productCombination == "byjus_aakash"
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:562:hardcoded variable:        let fields = [{
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:563:hardcoded string:            type: 'hidden',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:564:hardcoded string:            name: 'course',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:565:hardcoded string:            label: 'Select Course',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:566:hardcoded string:            options: get(productConfiguration, 'courses'),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:567:hardcoded string:            value: 'K10/K12',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:568:hardcoded string:            message: "Please select Course"
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:570:hardcoded string:            type: ["byjus_aakash"].includes(productCombination) ? 'select' : "hidden",
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:571:hardcoded string:            name: 'productLearningType',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:572:hardcoded string:            label: 'Choose Product Learning Type',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:573:hardcoded string:            message: "Please Select Product Learning Type",
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:574:hardcoded string:            options: getProductLearningType({ productType: "combo", isPrivilegedUser, productCombination, props: this.props }),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:576:hardcoded string:            required: ["byjus_aakash"].includes(productCombination) ? true : false
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:578:hardcoded string:            type: (["byjus_aakash"].includes(productCombination) && isadvanceOrderPunchingAllowed && ["AAKASH_LIVE"].includes(productLearningType)) ? 'select' : "hidden",
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:579:hardcoded string:            name: 'initialGradeProductCategory',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:580:hardcoded string:            label: 'Select Initial Grade product category',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:581:hardcoded string:            message: "Please Select Initial Grade product category",
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:582:hardcoded string:            options: getInitialGradeProductCategory({ productType: "combo", productCombination }),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:584:hardcoded string:            required: (["byjus_aakash"].includes(productCombination) && isadvanceOrderPunchingAllowed && ["AAKASH_LIVE"].includes(productLearningType)) ? true : false
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:586:hardcoded string:            type: isByjusAakash ? "hidden" : 'select',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:587:hardcoded string:            name: 'board',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:588:hardcoded string:            label: 'Select Board',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:590:hardcoded string:            options: get(selectedCourseConfig, 'boards'),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:592:hardcoded string:            message: "Please select Board",
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:593:hardcoded string:            infoMessage: isAdvanceAdmission.includes(productLearningType) ? getInfoBlockForAdvanceCourses("board") : ""
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:595:hardcoded string:            type: selectedBoard === "STATE" ? 'select' : 'hidden',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:596:hardcoded string:            name: 'state',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:597:hardcoded string:            label: 'Select State',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:598:hardcoded string:            required: selectedBoard === "STATE",
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:599:hardcoded string:            options: get(selectedBoardConfig, 'states'),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:601:hardcoded string:            message: "Please select State"
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:608:hardcoded string:            type: isK12Class(selectedFinalClass, tlpFinalGrade, byjusClassFinalGrade) ? 'select' : 'hidden',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:609:hardcoded string:            name: 'subCourse',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:610:hardcoded string:            label: 'Select Sub Course',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:611:hardcoded number:            required: isK12Class(selectedFinalClass, tlpFinalGrade, byjusClassFinalGrade),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:615:hardcoded string:            message: "Please select Sub Course"
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:618:hardcoded string:            type: 'select',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:619:hardcoded string:            options: this.getValidityOptions({ selectedBoard, selectedInitialClass, validity, productLearningType, isExtraDiscntSale, productType: "combo", selectedFinalClass, state }),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:620:hardcoded string:            name: 'validity',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:621:hardcoded string:            label: 'Select Initial Validity',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:625:hardcoded string:            message: "Please Select Initial Validity",
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:629:hardcoded string:            type: !isK12Class(selectedFinalClass, tlpFinalGrade, byjusClassFinalGrade) && productCombination==="byjus_classes" ? "select" : "hidden",
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:631:hardcoded string:            name: "subCourse",
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:632:hardcoded string:            label: "Select Batch Size",
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:633:hardcoded string:            required: productCombination==="byjus_classes" ? true : false,
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:635:hardcoded string:            message: "Please Select Batch Size"
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:638:hardcoded string:            type: 'select',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:639:hardcoded number:            options: checkPrivTabletAccess(leadDetails, user) ? getAllAvailableTabletsBasedOnUser(user) : this.getTabletOptions({ Tablets, tablets, selectedInitialClass, D4EligibleManagers, productCombination, selectedFinalClass, tlpFinalGrade, MeTablets, isPrivilegedUser }),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:640:hardcoded string:            name: 'tablet',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:641:hardcoded string:            label: 'Select Tablet',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:643:hardcoded string:            message: "Please select Tablet",
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:644:hardcoded number:            required: !IS_UPGRADE_VERTICAL(vertical) && isK3orPreKClass(selectedInitialClass) && !isPrivilegedUser && !isByjusAakash || isEpicSamplerEnabled ? true : false
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:646:hardcoded object:        ...getTodAndDocFields({ state: this.state, props: this.props, handleChanges: this.handleChanges }),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:649:hardcoded string:            type: user?.email !== 'mohnishsales@byjus.com' ? this.getD4SDCardType({ selectedTablet, selectedInitialClass, selectedFinalClass, isByjusAakash, user }) : 'hidden',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:650:hardcoded string:            name: 'selectD4SDCard',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:651:hardcoded string:            label: 'Select D4 SD Card',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:655:hardcoded string:            type: (showProfileSelectionOption && existingProfiles.length > 0 ? 'radio' : 'hidden'),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:657:hardcoded string:            name: 'userProfile',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:658:hardcoded string:            label: 'Choose Profile Type',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:660:hardcoded string:            message: "Please Choose Profile Type",
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:662:hardcoded string:                display: 'block',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:663:hardcoded string:                height: '30px',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:664:hardcoded string:                lineHeight: '30px',
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:666:hardcoded number:            required: (showProfileSelectionOption && existingProfiles.length > 0 ? true : false)
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:673:hardcoded object:        const { productDetailsForm, schoolForm } = this.refs;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:674:hardcoded variable:        const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:675:hardcoded object:        const { authDetails } = this.props
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:676:hardcoded object:        const { env } = authDetails;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:677:hardcoded string:        const isDevEnv = ["development", "local"].includes(env)
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:680:hardcoded string:        if (name == "initialClass") {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:682:hardcoded string:                finalClass: "", workshops: "", subCourse: "", tablet: "", validity: "", tlpFinalGrade: "", byjusClassFinalGrade: "",
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:683:hardcoded string:                mathPercent: "", sciencePercent: "", languageOfInstruction: ""
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:687:hardcoded string:                subCourse: "",
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:688:hardcoded string:                finalClass: "",
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:689:hardcoded string:                validity: "",
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:690:hardcoded string:                tablet: "",
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:695:hardcoded string:        if (name == "finalClass") {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:696:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ tlpFinalGrade: "", subCourse: "", byjusClassFinalGrade: "", tablet: "" })
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:698:hardcoded string:                subCourse: "",
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:699:hardcoded string:                validity: "",
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:700:hardcoded string:                tablet: "",
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:705:hardcoded string:        if (name == "subCourse") {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:706:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ tablet: "", validity: "" })
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:708:hardcoded string:                tablet: "",
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:709:hardcoded string:                validity: ""
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:714:hardcoded string:        if (name === "board" || name === "state") {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:715:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ initialClass: "", mathPercent: "", sciencePercent: "", languageOfInstruction: "" });
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:718:hardcoded string:                initialClass: "",
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:719:hardcoded string:                finalClass: "",
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:720:hardcoded string:                validity: "",
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:721:hardcoded string:                tablet: ""
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:725:hardcoded string:        if (name === "courseType") {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:726:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ subCourse: "", tablet: "", validity: "" });
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:729:hardcoded string:        if (name === "tablet") {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:730:hardcoded number:            detailsForm && detailsForm.setFieldsValue({ selectD4SDCard: false });
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:732:hardcoded array:                [`tabletId`]: `T-${value}`,
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:733:hardcoded number:                [`selectD4SDCard`]: false,
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:739:hardcoded array:            [name]: value,
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:745:hardcoded object:        const { initialClass: selectedInitialClass, productLearningType, finalClass, validity, subCourse } = this.state;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:746:hardcoded object:        const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:747:hardcoded variable:        const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:749:hardcoded number:        let initialGrade = isAdvanceAdmission.includes(productLearningType) || ELIGIBLE_COMBINATIONS_FOR_TLP_PLUS_BYJUS_CLASSES_PLUS_TLP.includes(productLearningType) ? (parseInt(selectedInitialClass, 10) + 1).toString() : selectedInitialClass;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:751:hardcoded object:        this.setState({ isOneToManyClass: false, isByjusClass: false })
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:752:hardcoded array:        const isMentoringApplicable = mentoringClassMap[initialGrade] || false;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:753:hardcoded array:        const isOneToManyMentoringApplicable = oneToManyMentoringClassMap[initialGrade] || false;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:754:hardcoded array:        const isByjusClassesApplicable = byjusClassesMap[initialGrade] || false;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:762:hardcoded number:        //JEE/NEET/JEE+NEET is applicable only for years other than 2022
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:763:hardcoded string:        if (isExtraDiscntSale && validity == 2022 && (subCourse == "JEE" || subCourse == "NEET" || subCourse == "JEE/NEET") && productLearningType == "AAKASH_LIVE" && selectedInitialClass == "12" && finalClass == "12") {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:764:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ subCourse: "", validity: "" });
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:766:hardcoded string:                error: "This sub course cannot be chosen for 2022. This is applicable only for 2023"
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:772:hardcoded string:        this.setState({ classType: value ? "neo" : "oneToMega", isByjusClass: false });
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:774:hardcoded object:        const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:775:hardcoded variable:        const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:777:hardcoded string:            productLearningType: "", initialClass: "", finalClass: "", board: "", state: "",
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:778:hardcoded string:            byjusClassFinalGrade: "", validity: "", tlpFinalGrade: "", courseType: "", tablet: "",
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:779:hardcoded string:            mathPercent: "", sciencePercent: "", languageOfInstruction: "", flowOfTopic: value ? "default" : "",
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:784:hardcoded object:        this.setState({ error });
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:789:hardcoded string:        if (nextProps.productCombination == "byjus_aakash" && !isEqual(nextProps.productCombination, this.props.productCombination)) {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:790:hardcoded object:            this.setState({ classType: null })
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:795:hardcoded object:            this.setState({ productConfig: nextProps.productConfig }, async () => {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:803:hardcoded object:        const { productDetails, productConfig, productType, authDetails, productCombination } = this.props;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:805:hardcoded string:        if (productCombination != "byjus_aakash") {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:806:hardcoded string:            this.setState({ classType: "neo" })
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:809:hardcoded string:        if (productType === get(productDetails, 'productType')) {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:810:hardcoded string:            const formValues = get(productDetails, 'students[0].formValues');
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:814:hardcoded string:                course: get(formValues, 'course'),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:815:hardcoded string:                board: get(formValues, 'board'),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:816:hardcoded string:                initialClass: get(formValues, 'initialClass'),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:817:hardcoded string:                finalClass: get(formValues, 'finalClass'),
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:818:hardcoded string:                subCourse: get(formValues, 'subCourse')
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:824:hardcoded string:        this.setState({ productConfig, course: 'K10/K12' });
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:828:hardcoded object:        const { productCombination } = this.props;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:829:hardcoded string:        if (productCombination == "byjus_classes") {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:830:hardcoded string:            this.onChangeProductLearningType("byjus_classes", "productLearningType")
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:838:hardcoded object:        const { user, authDetails, productCombination } = this.props;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:839:hardcoded object:        const { env } = authDetails
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:841:hardcoded string:        if (classType != "neo") {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:842:hardcoded string:            return !["11"].includes(initialClass) && courseType && isByjusClass && validity && productCombination === "byjus_classes"
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:843:hardcoded string:        } else if (!["11"].includes(initialClass) && courseType && productCombination === "byjus_classes") {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:844:hardcoded string:            const isEligible = getBatchesEligibility(this.state, "")
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:850:hardcoded object:        const { error, productConfig, productDetails, isMentoringClass, isOneToManyClass, isByjusClass, initialClass, finalClass, state, board, validity, subCourse, productLearningType, courseType, errorActions, classType, proficiency, trackId } = this.state;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:851:hardcoded object:        const { changeNextBtnMode, productType, productCombination, user, identifier, authDetails } = this.props;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:852:hardcoded object:        const { env } = authDetails
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:854:hardcoded array:        const fields = productConfig ? this.getFields() : [];
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:855:hardcoded variable:        const isPrivilegedUser = checkIsPrivilegedUser(user);
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:856:hardcoded object:        const isProficiencyAndFot = isProficiencyAndFotAvailable({ state: this.state, props: this.props, handleChanges: this.handleChanges });
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:858:hardcoded string:        let grade = "";
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:861:hardcoded string:            if (get(this.state, "initialClass", "") < 10) {
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:862:hardcoded string:                grade = (parseInt(get(this.state, "initialClass", ""), 10) + 1).toString()
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:864:hardcoded string:                grade = get(this.state, "byjusClassFinalGrade", "")
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:868:hardcoded string:            grade = (parseInt(get(this.state, "initialClass", ""), 10) + 1).toString();
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:871:hardcoded string:            grade = get(this.state, "initialClass", "")
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:874:hardcoded string:        const schoolState = get(this.state, "schoolState", "")
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:875:hardcoded variable:        const isBatchesEligible = this.checkBatchesEligibility()
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:876:hardcoded string:        const bfsBatch = "1:6"
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:877:hardcoded string:        const isDevEnv = ['development', 'local'].includes(env);
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:878:hardcoded string:        const isLocalEnv = ["local"].includes(env);
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:879:hardcoded variable:        const isDbelBatchesEligible = board && initialClass && validity;
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:880:hardcoded string:        const dbelByjusMathSampler = productCombination == 'byjus_tlp' && BELP_K3_GRADES.includes(initialClass)
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:884:hardcoded object:                <ErrorWrapper error={error} errorActions={errorActions} />
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:885:hardcoded string:                {isPrivilegedUser && productCombination === "byjus_classes" && <ClassTypeForm
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:886:hardcoded string:                    ref="classTypeForm"
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:887:hardcoded object:                    classType={classType}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:888:hardcoded object:                    changeClassType={this.changeClassType}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:891:hardcoded string:                    ref="productDetailsForm"
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:892:hardcoded object:                    productLearningType={productLearningType}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:893:hardcoded object:                    productType={productType}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:894:hardcoded object:                    fields={fields}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:895:hardcoded object:                    initialValues={{ ...getProductFormInitialValue(productDetails) }}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:896:hardcoded object:                    isOneToManyAllowed={ELIGIBLE_COMBINATIONS_FOR_ONE_TO_MANY.includes(productCombination) ? true : false} // Byjus HLP
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:897:hardcoded object:                    isByjusClassesAllowed={ELIGIBLE_COMBINATIONS_FOR_BATCH.includes(productCombination) ? true : false} // Byjus Classes
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:898:hardcoded object:                    isMentoringClass={isPrivilegedUser && ELIGIBLE_COMBINATIONS_FOR_ONE_ON_ONE.includes(productCombination) ? isMentoringClass : false} // used to show mentoring component to select
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:899:hardcoded object:                    isMentoringAllowed={isPrivilegedUser && ELIGIBLE_COMBINATIONS_FOR_ONE_ON_ONE.includes(productCombination) ? true : false}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:900:hardcoded object:                    isAakashByjusLivePgm={AAKASH_BYJUS_PRGM.includes(productCombination) ? true : false}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:902:hardcoded number:                {/* BHLP for 4 to 12 */}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:905:hardcoded string:                        ref="oneToManyDetailsForm"
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:906:hardcoded object:                        identifier={identifier}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:907:hardcoded object:                        initialClass={initialClass}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:908:hardcoded object:                        board={board}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:909:hardcoded object:                        state={state}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:910:hardcoded object:                        productType={productType}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:911:hardcoded object:                        validity={validity}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:912:hardcoded object:                        subCourse={subCourse}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:913:hardcoded string:                        productCombination="home_learning_program" />
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:917:hardcoded string:                        ref="schoolForm"
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:918:hardcoded object:                        board={board}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:919:hardcoded object:                        state={state}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:920:hardcoded object:                        props={this.props}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:921:hardcoded object:                        grade={initialClass}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:922:hardcoded object:                        handleParentChanges={this.handleChanges}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:923:hardcoded object:                        handleClassBlurEvent={this.handleClassBlurEvent}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:928:hardcoded number:                {/* Byjus classes For 4 to 12 grades*/}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:930:hardcoded string:                    ref="byjusMathDetailsForm"
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:931:hardcoded object:                    identifier={identifier}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:932:hardcoded object:                    initialClass={initialClass}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:933:hardcoded object:                    finalClass={initialClass}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:934:hardcoded object:                    board={board}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:935:hardcoded object:                    bfsBatch={bfsBatch}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:936:hardcoded object:                    productCombination={productCombination}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:937:hardcoded object:                    classType={classType}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:939:hardcoded string:                    ref="byjusClassesDetailsForm"
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:940:hardcoded object:                    identifier={identifier}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:941:hardcoded object:                    initialClass={grade}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:942:hardcoded object:                    finalClass={finalClass}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:943:hardcoded object:                    board={board}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:944:hardcoded object:                    state={state}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:945:hardcoded object:                    productType={productType}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:946:hardcoded object:                    validity={validity}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:947:hardcoded object:                    subCourse={subCourse}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:948:hardcoded string:                    isV4Batch={validity.toString() == "2024" ? true : false}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:949:hardcoded string:                    productCombination="byjus_classes"
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:950:hardcoded object:                    productLearningType={productLearningType}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:951:hardcoded object:                    classType={classType}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:952:hardcoded object:                    courseType={courseType}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:953:hardcoded object:                    proficiency={proficiency}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:954:hardcoded object:                    trackId={trackId}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:955:hardcoded string:                    schoolState={get(this.state, 'schoolState', '')}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:959:hardcoded string:                    ref='fetchComp'
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:960:hardcoded object:                    onClickFetchPrices={this.onClickFetchPrices}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:961:hardcoded object:                    getProductDetails={this.getProductDetails}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:962:hardcoded object:                    changeNextBtnMode={changeNextBtnMode}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:963:hardcoded object:                    productType={productType}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:964:hardcoded object:                    setError={this.setError}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:965:hardcoded object:                    productCombination={productCombination}
microservices-middleware/client/src/modules/product/components/types/ComboProduct.js:973:hardcoded object:export default connect(mapStateToProps, mapDispatchToProps, null, { forwardRef: true })(ComboProduct);
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1:hardcoded object:import React, { Component } from "react";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:2:hardcoded object:import { connect } from "react-redux";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:3:hardcoded object:import { Row, Col } from "reactstrap";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:4:hardcoded object:import _, { get, find, cloneDeep, isEqual, isEmpty } from "lodash";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:11:hardcoded string:} from "../../productReducer";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:15:hardcoded number:  isK12Class,
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:18:hardcoded number:  isK3orPreKClass,
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:20:hardcoded number:  getK3orPreKTablets,
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:24:hardcoded number:  isPreK3Class,
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:33:hardcoded string:} from "../productHelper";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:34:hardcoded file path:import CallApi from "../../../../api/callApi";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:35:hardcoded file path:import ClassTypeForm from "../ClassTypeForm";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:36:hardcoded file path:import ProductDetailsForm from "../ProducDetailsForm";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:37:hardcoded file path:import FetchPrices from "../FetchPrices";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:38:hardcoded file path:import ErrorWrapper from "../../../../components/ErrorWrapper";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:39:hardcoded object:import { getMlpSessions } from '../../components/assembler/mlpSession'
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:40:hardcoded file path:import OneToMany from "../mentoring/OneToManyMentoring";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:41:hardcoded file path:import ByjusMentoringClasses from "../mentoring/ByjusMentoringClasses";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:42:hardcoded object:import { validateProfileSelection } from "modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:47:hardcoded string:} from "../mentoring/MentoringHelper";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:48:hardcoded number:import { ELIGIBLE_COMBINATIONS_FOR_ONE_ON_ONE, D4_1_1_TABLET_LIST, deviceTypeEligibleGrades, BELP_K3_GRADES, IS_UPGRADE_VERTICAL, WB_ELIGIBLE_GRADES, ELIGIBLE_GRADES, BOARD_ELIGIBLE_GRADES } from "../../utils/productConstant";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:54:hardcoded string:} from "../../utils/ByjusClassesHelper";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:55:hardcoded file path:import PremiumAccount from "../../../student/premiumaccount/PremiumAccount";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:56:hardcoded file path:import School from "modules/student/School";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:57:hardcoded object:import { getSamplerTlpTabletOptions } from "../../utils/epicSampler";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:58:hardcoded file path:import ByjusMathMentoringClasses from '../mentoring/ByjusMathMentoringClasses';
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:60:hardcoded variable:const mapStateToProps = (state) => ({
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:61:hardcoded string:  authDetails: get(state, "auth.details"),
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:62:hardcoded string:  leadDetails: get(state, "auth.leadDetails"),
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:63:hardcoded string:  salesDetails: get(state, "details.salesDetails"),
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:64:hardcoded string:  identifier: get(state, "details.identifier"),
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:65:hardcoded string:  existingProfiles: get(state, "product.existingProfiles"),
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:66:hardcoded string:  showProfileSelectionOption: get(state, "product.showProfileSelectionOption"),
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:67:hardcoded string:  productDetails: get(state, "product.details"),
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:68:hardcoded string:  productConfig: get(state, "product.config"),
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:69:hardcoded string:  loading: get(state, "product.loading"),
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:70:hardcoded string:  error: get(state, "product.error"),
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:73:hardcoded variable:const mapDispatchToProps = (dispatch) => ({
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:101:hardcoded object:      productConfig: {},
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:102:hardcoded array:      fields: [],
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:107:hardcoded string:      classType: "neo",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:115:hardcoded object:    let { productDetails, byjusClassesFormValue, schoolAndProficiencyDetails } = details;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:120:hardcoded string:      electiveDetails: get(byjusClassesFormValue, "formValue.electivesDetails", null),
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:121:hardcoded string:      doubtClassDetails: get(byjusClassesFormValue, "formValue.selectedDoubtClass", null),
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:122:hardcoded string:      languageOfInstruction: get(byjusClassesFormValue, "formValue.languageOfInstruction", null),
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:123:hardcoded string:      languageOfInstructionId: get(byjusClassesFormValue, "formValue.languageOfInstructionId", null),
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:136:hardcoded string:    if (["local", "development"].includes(env)) {
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:137:hardcoded object:      const { premiumAccountComp } = this.refs;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:138:hardcoded variable:      const selectedProfileDetails = premiumAccountComp?.getSelectedPid();
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:143:hardcoded string:        productDetails["userProfile"] = selectedProfileDetails?.selectedPid;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:144:hardcoded string:        productDetails["profileType"] = selectedProfileDetails?.isNewPidSelected
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:145:hardcoded string:          ? "new"
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:146:hardcoded string:          : "existing";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:154:hardcoded string:    const { initialClass, course, courseType, tabletId = "", classType, validity, tod = true, doc = true } = this.state;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:155:hardcoded object:    const { productCombination, identifier, existingProfiles, authDetails, leadDetails } = this.props;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:156:hardcoded object:    const { env, featureEnableList } = authDetails;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:157:hardcoded string:    const isEpicEnabled = get(featureEnableList, "epic_enable_user_list", "");
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:158:hardcoded string:    const isEpicSamplerEnabled = get(featureEnableList, "byjusmath_epic_sampler_bda");
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:159:hardcoded string:    const isD4TabletEnabled = get(featureEnableList, 'd41.1_tablet_access_for_bda');
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:160:hardcoded string:    const isDevEnv = ["development", "local"].includes(env);
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:161:hardcoded string:    const isLocalEnv = ["local"].includes(env);
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:162:hardcoded number:    let currentYear = (new Date()).getFullYear(); //2022
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:163:hardcoded number:    let updatedYear = currentYear + 1; // 2023
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:175:hardcoded array:    let oneToManyMentoringDetails = [],
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:176:hardcoded array:      bhlpCourseDetails = [],
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:177:hardcoded array:      byjusClassesMentoringDetails = [];
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:179:hardcoded variable:    const details = await productDetailsForm.getProductDetails();
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:180:hardcoded variable:    const byjusMathDetailsFormValues = byjusMathDetailsForm && (await byjusMathDetailsForm.getMentoringValues())
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:181:hardcoded string:    const dbelByjusMathSampler = productCombination === 'byjus_tlp' && BELP_K3_GRADES.includes(initialClass)
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:190:hardcoded variable:    const oneToManyFormValue = oneToManyDetailsForm && (await oneToManyDetailsForm.getMentoringValues());
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:191:hardcoded variable:    const byjusClassesFormValue = byjusClassesDetailsForm && (await byjusClassesDetailsForm.getMentoringValues());
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:192:hardcoded variable:    const studentMarksDetails = proficiencyForm && (await proficiencyForm.getStudentAcademicDetails());
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:193:hardcoded variable:    const schoolAndProficiencyDetails = schoolForm && (await schoolForm.getSchoolDetails());
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:194:hardcoded variable:    const deviceType = this.getDeviceType();
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:196:hardcoded string:    let productDetails = get(details, "productDetails");
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:197:hardcoded string:    productDetails["tabletId"] = tabletId;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:198:hardcoded string:    productDetails['deviceType'] = deviceType
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:199:hardcoded string:    productDetails['featureTag'] = getFeatureTag({ tablet: tabletId, isD4TabletEnabled })
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:200:hardcoded string:    productDetails['tod'] = tod;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:201:hardcoded string:    productDetails['doc'] = doc;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:202:hardcoded string:    let workshopChannel = get(leadDetails, 'Workshop_channel', '') || get(leadDetails, 'workshopChannel', '');
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:204:hardcoded string:    if (productDetails && !productDetails.course) { productDetails["course"] = course; }
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:206:hardcoded string:      productDetails['bfsBatch'] = "1:6";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:207:hardcoded string:      productDetails['bfsProductType'] = "16";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:210:hardcoded string:      productDetails['mentoringDetails'] = get(byjusMathDetailsFormValues, 'mentoring', []);
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:211:hardcoded string:      productDetails['bhlpCourseDetails'] = get(byjusMathDetailsFormValues, 'courseInfo', {});
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:214:hardcoded number:    /** For classes 11 and 12 mentoring details is not required */
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:215:hardcoded string:    if (productCombination === "home_learning_program" && !["12"].includes(initialClass)) {
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:216:hardcoded variable:      const response = validateBhlpMentoringDetails(oneToManyFormValue, productDetails);
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:217:hardcoded string:      oneToManyMentoringDetails = get(response, "oneToManyMentoringDetails", []);
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:218:hardcoded string:      bhlpCourseDetails = get(response, "bhlpCourseDetails", []);
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:224:hardcoded string:    if (productCombination === "byjus_classes" &&
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:225:hardcoded string:      !["1", "2", "11"].includes(initialClass) &&
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:230:hardcoded variable:      const response = validateByjusClassesMentoringDetails(byjusClassesFormValue, productDetails);
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:231:hardcoded string:      byjusClassesMentoringDetails = get(response, "byjusClassesMentoringDetails", []);
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:232:hardcoded string:      bhlpCourseDetails = get(response, "bhlpCourseDetails", []);
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:238:hardcoded string:    if (classType === "neo" && productCombination === "byjus_classes") {
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:239:hardcoded object:      productDetails = this.getUpdatedProductDetails({ env, productDetails, studentMarksDetails, byjusClassesFormValue, schoolAndProficiencyDetails, });
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:242:hardcoded number:    if (!isDevEnv && existingProfiles?.length > 0 && productDetails) {
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:243:hardcoded variable:      const isValidate = validateProfileSelection(productDetails);
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:248:hardcoded variable:      const selectedPid = premiumAccount?.getSelectedPid();
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:250:hardcoded string:      productDetails["userProfile"] = selectedPid;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:254:hardcoded variable:      const payload = {
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:256:hardcoded string:        productType: "single",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:258:hardcoded string:        mentoringCount: get(details, "mentoringCount"),
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:259:hardcoded string:        couponDetails: get(details, "couponDetails"),
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:262:hardcoded string:          productCombination === "home_learning_program"
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:264:hardcoded string:            : isLocalEnv && dbelByjusMathSampler ? get(byjusMathDetailsFormValues, 'mentoring', [])
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:266:hardcoded string:        bhlpCourseDetails: isLocalEnv && dbelByjusMathSampler ? get(byjusMathDetailsFormValues, 'courseInfo', {}) : bhlpCourseDetails,
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:270:hardcoded string:        loggedInMobile: get(leadDetails, 'studentMobile', '')
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:273:hardcoded variable:      const urlMap = {
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:274:hardcoded string:        'quarterly_pack': '/quarterlyPack',
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:275:hardcoded string:        'subscription': '/subscription',
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:276:hardcoded string:        'mini_learning_program': '/mlp',
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:277:hardcoded string:        'TRIAL_PACK': '/trial'
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:279:hardcoded string:      const clsType = classType === "neo" ? "/neo" : "";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:280:hardcoded string:      // if(isDevEnv && productCombination === 'byjus_classes' && validity == updatedYear) {
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:283:hardcoded object:      //     url: `/api${clsType}/product/singleProduct`
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:288:hardcoded string:        url: `/api${clsType}/product${urlMap[validity] || "/single"}`
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:296:hardcoded object:    const { identifier } = this.props;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:297:hardcoded variable:    const payload = {
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:306:hardcoded string:        url: "/api/product/storeProductDetails",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:307:hardcoded string:        method: "POST",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:311:hardcoded string:          const { productDetails, cashbackDetails } = get(response, "data", {});
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:315:hardcoded object:          this.setState({ error: null });
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:317:hardcoded string:          this.navigateToScreen("address");
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:320:hardcoded object:          this.setState({ error });
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:327:hardcoded object:    const { history } = this.props;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:328:hardcoded string:    const url = `/${path}${get(history, "location.search")}`;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:337:hardcoded object:    const { fetchComp } = this.refs;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:338:hardcoded object:    const { isBooksOpted } = this.props;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:341:hardcoded object:      const { status, productDetails } = fetchComp.getProductsAndFinalPrice();
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:346:hardcoded string:          get(productDetails, "finalPrice") >= 0
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:348:hardcoded string:          productDetails["isBooksOpted"] = isBooksOpted;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:351:hardcoded string:          this.setState({ error: "Product Details Missing" });
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:354:hardcoded string:        const errMsg = get(error, "message", "Error") || error;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:355:hardcoded object:        this.setState({ error: errMsg });
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:361:hardcoded object:    const { tablet, initialClass } = this.state;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:364:hardcoded number:      if (D4_1_1_TABLET_LIST.includes(tablet)) {
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:365:hardcoded string:        deviceType = "Tablet(LearnStation)"
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:368:hardcoded string:        deviceType = "SD Card Only"
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:371:hardcoded string:        deviceType = "Tablet(Lenovo/Samsung)"
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:379:hardcoded object:    const { selectedClass, validity, classType, selectedBoard, state } = details;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:380:hardcoded object:    const { user, authDetails, productCombination, salesDetails } = this.props;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:381:hardcoded string:    const { courseType: selectedCourseType, yearSelection = "" } = this.state;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:382:hardcoded string:    const teamManager = get(salesDetails, "directSalesByTeamManager", "");
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:383:hardcoded object:    const { env } = authDetails;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:384:hardcoded string:    const isDevEnv = ["development", "local"].includes(env);
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:385:hardcoded array:    let options = [];
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:390:hardcoded string:        productType: "single",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:411:hardcoded number:      D4EligibleManagers,
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:423:hardcoded object:    const { subCourse: selectedSubCourse } = this.state;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:424:hardcoded object:    const { env, featureEnableList } = authDetails;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:425:hardcoded variable:    const isEpicSamplerEnabled = get(
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:427:hardcoded string:      "byjusmath_epic_sampler_bda"
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:429:hardcoded array:    let options = [];
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:430:hardcoded number:    if (isK3orPreKClass(selectedClass)) {
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:431:hardcoded number:      options = getK3orPreKTablets({
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:437:hardcoded number:        D4EligibleManagers,
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:450:hardcoded number:        D4EligibleManagers,
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:459:hardcoded string:    if (["11", "12", "12+",'13+'].includes(selectedClass)) {
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:463:hardcoded string:          "BYJU'S Learn Station 10inch Wifi White Tablet (Rs 13000)"
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:465:hardcoded string:      options = isPrivilegedUser ? options : options.filter(tab => tab.value !== "TS8MZZ")
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:476:hardcoded number:  getD4SDCardType = (details) => {
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:477:hardcoded object:    const { selectedTablet, selectedClass, selectedValidity, isDevEnv } = details;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:478:hardcoded object:    const { authDetails } = this.props;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:479:hardcoded string:    const env = get(authDetails, "env");
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:480:hardcoded string:    let type = "checkbox";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:481:hardcoded string:    if (selectedTablet || env === "production" || isPreK3Class(selectedClass)) {
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:482:hardcoded string:      type = "hidden";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:484:hardcoded string:    if (selectedTablet || env === "production" || isK12Class(selectedClass)) {
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:485:hardcoded string:      type = "hidden";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:487:hardcoded string:    if (['mini_learning_program', 'TRIAL_PACK'].includes(selectedValidity)) {
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:488:hardcoded string:      type = "hidden";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:494:hardcoded object:    const { existingProfiles, user } = this.props;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:495:hardcoded variable:    const isPrivilegedUser = checkIsPrivilegedUser(user);
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:496:hardcoded number:    if (existingProfiles && existingProfiles.length > 0) {
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:497:hardcoded variable:      let newExistingProfile = existingProfiles;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:499:hardcoded string:        (profile) => profile.value === "newProfile"
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:502:hardcoded string:        existingProfiles.push({ label: "New Profile", value: "newProfile" });
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:510:hardcoded string:    const previligedUserTransDate = new Date('2023, 5, 31');
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:511:hardcoded variable:    let validityOption = [{
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:512:hardcoded number:      label: 2023,
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:513:hardcoded number:      value: 2023
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:518:hardcoded array:          validityOption = []
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:523:hardcoded array:          validityOption = []
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:526:hardcoded number:      validityOption.push({ label: 2024, value: 2024 })
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:530:hardcoded number:          validityOption = [{ label: 2024, value: 2024 }]
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:535:hardcoded number:          validityOption = [{ label: 2024, value: 2024 }]
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:563:hardcoded string:    !selectedCourse && this.handleChanges("K10/K12", "course");
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:564:hardcoded string:    !selectedCourseType && this.handleChanges("regular", "courseType");
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:566:hardcoded object:    const { productType, user, productCombination } = this.props;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:568:hardcoded array:      Products = [],
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:569:hardcoded array:      Courses = [],
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:570:hardcoded array:      Boards = [],
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:571:hardcoded array:      Tablets = [],
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:572:hardcoded number:      D4EligibleManagers = [],
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:573:hardcoded number:      PreK3EligibleManagers = [],
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:574:hardcoded array:      MeTablets = []
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:575:hardcoded object:    } = productConfig || {};
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:578:hardcoded object:      find(Products, { formattedName: productType }) || {};
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:580:hardcoded object:    const { validity, tablets } = productConfiguration || {};
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:582:hardcoded object:      find(Courses, { formattedName: selectedCourse }) || {};
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:584:hardcoded object:      find(Boards, { formattedName: selectedBoard }) || {};
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:586:hardcoded object:      find(selectedBoardConfig.classes, { class: selectedClass }) || {};
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:587:hardcoded variable:    const mentoringClassMap = getMentoringClassMap(selectedBoardConfig.classes);
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:588:hardcoded variable:    const oneToManyMentoringClassMap = getOneToManyMentoringClassMap(
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:591:hardcoded variable:    const byjusClassesMap = getByjusClassesMap(selectedBoardConfig.classes);
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:592:hardcoded object:    const { env, featureEnableList } = authDetails;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:593:hardcoded object:    const { vertical } = user;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:594:hardcoded string:    const isDevEnv = ["development", "local"].includes(env);
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:595:hardcoded variable:    const isPrivilegedUser = checkIsPrivilegedUser(user);
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:596:hardcoded variable:    const isEpicSamplerEnabled = get(
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:598:hardcoded string:      "byjusmath_epic_sampler_bda"
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:600:hardcoded variable:    let classOptions = cloneDeep(
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:608:hardcoded number:        PreK3EligibleManagers
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:611:hardcoded string:    const subCourses = get(selectedClassConfig, "subCourses");
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:627:hardcoded string:    if (_.isEqual(productCombination, "byjus_tlp") && !isEmpty(classOptions)) {
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:628:hardcoded number:      let indexOf11 = classOptions.findIndex((name) =>
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:629:hardcoded string:        _.isEqual(name.label, "11")
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:631:hardcoded string:      classOptions[indexOf11].label = "11";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:632:hardcoded number:      let indexOf12 = classOptions.findIndex((name) =>
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:633:hardcoded string:        _.isEqual(name.label, "12")
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:635:hardcoded string:      classOptions[indexOf12].label = "12";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:636:hardcoded number:      let indexOf12Plus = classOptions.findIndex((name) =>
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:637:hardcoded string:        _.isEqual(name.label, "12+")
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:639:hardcoded string:      classOptions[indexOf12Plus].label = "12+(Aakash Byju's TLP)";
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:642:hardcoded string:    // if ( _.isEqual(productCombination, "byjus_tlp") && !isEmpty(subCourses) && !checkIsPrivilegedUser(user)) {
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:643:hardcoded string:    //     let indexOfCommerce = subCourseOptions.findIndex(name => _.isEqual(name.label, "Commerce"));
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:644:hardcoded number:    //     if (indexOfCommerce !== -1)
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:645:hardcoded number:    //         subCourseOptions.splice(indexOfCommerce, 1);
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:649:hardcoded string:      _.isEqual(productCombination, "byjus_classes") &&
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:652:hardcoded number:      let indexOf12 = classOptions.findIndex((name) =>
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:653:hardcoded string:        _.isEqual(name.label, "12")
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:655:hardcoded number:      classOptions.splice(indexOf12, 1);
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:656:hardcoded number:      let indexOf12Plus = classOptions.findIndex((name) =>
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:657:hardcoded string:        _.isEqual(name.label, "12+")
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:659:hardcoded number:      classOptions.splice(indexOf12Plus, 1);
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:661:hardcoded number:    //Remove 11 for BHLP and Byjus classes
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:663:hardcoded string:      ["home_learning_program", "byjus_classes"].includes(productCombination)
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:665:hardcoded string:      let unAvalibaleGrades = ["11"];
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:670:hardcoded string:      classOptions.filter((ele) => !["12"].includes(ele.value));
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:676:hardcoded variable:    let fields = [
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:678:hardcoded string:        type: "hidden",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:679:hardcoded string:        name: "course",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:680:hardcoded string:        label: "Select Course",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:681:hardcoded string:        options: get(productConfiguration, "courses"),
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:682:hardcoded string:        value: "K10/K12",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:683:hardcoded string:        message: "Please select Course",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:686:hardcoded string:        type: "hidden",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:687:hardcoded string:        name: "courseType",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:688:hardcoded string:        label: "Select Course Type",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:689:hardcoded string:        value: "regular",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:690:hardcoded string:        message: "Please select Course Type",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:693:hardcoded string:        type: "select",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:694:hardcoded string:        name: "board",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:695:hardcoded string:        label: "Select Board",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:697:hardcoded string:        options: get(selectedCourseConfig, "boards"),
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:699:hardcoded string:        message: "Please select Board",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:702:hardcoded string:        type: selectedBoard === "STATE" ? "select" : "hidden",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:703:hardcoded string:        name: "state",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:704:hardcoded string:        label: "Select State",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:705:hardcoded string:        required: selectedBoard === "STATE",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:706:hardcoded string:        options: get(selectedBoardConfig, "states"),
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:708:hardcoded string:        message: "Please select State",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:711:hardcoded string:        type: selectedBoard && courseTypeFormField ? "select" : "hidden",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:712:hardcoded string:        name: "initialClass",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:713:hardcoded string:        label: "Select Class",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:724:hardcoded number:          PreK3EligibleManagers,
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:735:hardcoded string:        message: "Please select Class",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:738:hardcoded string:        type: isK12Class(selectedClass) ? "select" : "hidden",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:739:hardcoded string:        name: "subCourse",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:740:hardcoded string:        label: "Select Sub Course",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:741:hardcoded number:        required: isK12Class(selectedClass),
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:751:hardcoded string:        message: "Please select Sub Course",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:754:hardcoded string:        type: productCombination === "byjus_classes" ? "select" : "hidden",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:756:hardcoded string:        name: "yearSelection",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:757:hardcoded string:        label: "Select Initial Validity",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:758:hardcoded string:        required: productCombination === "byjus_classes" ? true : false,
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:761:hardcoded string:        message: "Please Select Initial Validity",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:764:hardcoded string:        type: productCombination==="byjus_classes" ? "select" : "hidden",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:766:hardcoded string:        name: "subCourse",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:767:hardcoded string:        label: "Select Batch Size",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:768:hardcoded string:        required: productCombination==="byjus_classes" ? true : false,
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:770:hardcoded string:        message: "Please Select Batch Size"
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:773:hardcoded string:        type: isOneToSixProduct(productCombination,subCourse) ? "hidden" : "select" ,
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:774:hardcoded object:        options: this.getValidityOptions({ selectedClass, validity, classType, selectedBoard, state }),
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:775:hardcoded string:        name: "validity",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:777:hardcoded string:          productCombination === "byjus_classes"
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:778:hardcoded string:            ? "Select Course Type"
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:779:hardcoded string:            : "Select Initial Validity",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:783:hardcoded string:          productCombination === "byjus_classes"
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:784:hardcoded string:            ? "Please Select Course Type"
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:785:hardcoded string:            : "Please Select Initial Validity",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:788:hardcoded string:        type: productCombination == "byjus_classes" && ["mini_learning_program"].includes(selectedValidity) ? "select" : "hidden",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:789:hardcoded string:        name: 'session',
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:790:hardcoded string:        required: ["mini_learning_program"].includes(selectedValidity) ? true : false,
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:792:hardcoded string:        label: "Select Number Of Session",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:793:hardcoded string:        message: "Please Select Number of Session",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:798:hardcoded string:        type: !["TRIAL_PACK", "TRIAL_SUBSCRIPTION", "mini_learning_program"].includes(selectedValidity)
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:799:hardcoded string:          ? "select"
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:800:hardcoded string:          : "hidden",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:805:hardcoded number:          D4EligibleManagers,
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:810:hardcoded string:        name: "tablet",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:811:hardcoded string:        label: "Select Tablet",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:813:hardcoded string:        message: "Please select Tablet",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:815:hardcoded number:          ((isK3orPreKClass(selectedClass) && !IS_UPGRADE_VERTICAL(vertical)) &&
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:817:hardcoded string:            selectedValidity !== "selectedValidity") ||
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:818:hardcoded string:            selectedValidity === "subscription" ||
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:822:hardcoded string:        disabled: ["quarterly_pack", "TRIAL_PACK", "mini_learning_program"].includes(selectedValidity) ? true : false
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:824:hardcoded object:      ...getTodAndDocFields({ state: this.state, props: this.props, handleChanges: this.handleChanges }),
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:827:hardcoded string:        type: user?.email !== 'mohnishsales@byjus.com' ? this.getD4SDCardType({ selectedTablet, selectedClass, user, selectedValidity, isDevEnv }) : 'hidden',
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:828:hardcoded string:        name: "selectD4SDCard",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:829:hardcoded string:        label: "Select D4 SD Card",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:835:hardcoded number:          !isDevEnv && showProfileSelectionOption && existingProfiles.length > 0
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:836:hardcoded string:            ? "radio"
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:837:hardcoded string:            : "hidden",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:839:hardcoded string:        name: "userProfile",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:840:hardcoded string:        label: "Choose Profile Type",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:842:hardcoded string:        message: "Please Choose Profile Type",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:844:hardcoded string:          display: "block",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:845:hardcoded string:          height: "30px",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:846:hardcoded string:          lineHeight: "30px",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:849:hardcoded number:          !isDevEnv && showProfileSelectionOption && existingProfiles.length > 0
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:859:hardcoded object:    const { productDetailsForm, schoolForm } = this.refs;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:863:hardcoded string:    if (name === "initialClass") {
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:866:hardcoded string:          workshops: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:867:hardcoded string:          subCourse: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:868:hardcoded string:          tablet: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:870:hardcoded string:          yearSelection: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:871:hardcoded string:          mathPercent: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:872:hardcoded string:          sciencePercent: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:873:hardcoded string:          languageOfInstruction: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:874:hardcoded string:          session: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:878:hardcoded string:        subCourse: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:879:hardcoded string:        validity: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:880:hardcoded string:        tablet: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:884:hardcoded string:    if (name === "yearSelection") {
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:887:hardcoded string:          workshops: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:888:hardcoded string:          subCourse: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:889:hardcoded string:          tablet: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:891:hardcoded string:          mathPercent: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:892:hardcoded string:          sciencePercent: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:893:hardcoded string:          languageOfInstruction: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:894:hardcoded string:          session: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:898:hardcoded string:        subCourse: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:899:hardcoded string:        validity: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:900:hardcoded string:        tablet: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:905:hardcoded string:    if (name === "courseType") {
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:908:hardcoded string:          initialClass: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:909:hardcoded string:          subCourse: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:910:hardcoded string:          tablet: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:911:hardcoded string:          validity: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:912:hardcoded string:          board: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:913:hardcoded string:          session: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:918:hardcoded string:    if (name === "board" || name === "state") {
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:921:hardcoded string:          initialClass: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:922:hardcoded string:          mathPercent: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:923:hardcoded string:          sciencePercent: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:924:hardcoded string:          languageOfInstruction: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:925:hardcoded string:          session: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:928:hardcoded string:      this.setState({ initialClass: "", validity: "", tablet: "" })
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:931:hardcoded string:    if (name === "tablet") {
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:932:hardcoded number:      detailsForm && detailsForm.setFieldsValue({ selectD4SDCard: false });
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:934:hardcoded array:        [`tabletId`]: `T-${value}`,
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:935:hardcoded number:        [`selectD4SDCard`]: false,
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:940:hardcoded string:    if (name === "validity") {
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:941:hardcoded string:      detailsForm && detailsForm.setFieldsValue({ tablet: "", session: "", });
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:945:hardcoded array:      [name]: value,
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:951:hardcoded string:    this.setState({ session: "" })
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:952:hardcoded object:    this.setState({ session: `${session}` })
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:961:hardcoded object:    this.setState({ isOneToManyClass: false, isByjusClass: false });
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:962:hardcoded array:    const isMentoringApplicable = mentoringClassMap[selectedClass] || false;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:964:hardcoded array:      oneToManyMentoringClassMap[selectedClass] || false;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:965:hardcoded array:    const isByjusClassesApplicable = byjusClassesMap[selectedClass] || false;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:976:hardcoded string:      classType: value ? "neo" : "oneToMega",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:980:hardcoded object:    const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:985:hardcoded string:        initialClass: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:986:hardcoded string:        subCourse: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:987:hardcoded string:        tablet: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:988:hardcoded string:        validity: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:989:hardcoded string:        yearSelection: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:990:hardcoded string:        board: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:991:hardcoded string:        mathPercent: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:992:hardcoded string:        sciencePercent: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:993:hardcoded string:        languageOfInstruction: "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:994:hardcoded string:        flowOfTopic: value ? "default" : "",
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:999:hardcoded object:    this.setState({ error });
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1004:hardcoded object:      const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1007:hardcoded string:      detailsForm && detailsForm.setFieldsValue({ initialClass: "" });
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1013:hardcoded object:      this.setState({ productConfig: nextProps.productConfig });
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1024:hardcoded string:    if (productType === get(productDetails, "productType")) {
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1025:hardcoded string:      const formValues = get(productDetails, "students[0].formValues");
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1030:hardcoded string:          course: get(formValues, "course"),
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1031:hardcoded string:          board: get(formValues, "board"),
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1032:hardcoded string:          initialClass: get(formValues, "initialClass"),
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1033:hardcoded string:          subCourse: get(formValues, "subCourse"),
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1040:hardcoded string:    this.setState({ productConfig, course: "K10/K12" });
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1052:hardcoded object:    const { productCombination } = this.props;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1054:hardcoded string:    if (classType !== "neo") {
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1056:hardcoded string:        !["11"].includes(initialClass) &&
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1060:hardcoded string:        productCombination === "byjus_classes"
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1062:hardcoded string:    } else if ((validity == 'mini_learning_program' && session) || validity == 'TRIAL_PACK') {
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1065:hardcoded string:      !["11"].includes(initialClass) &&
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1067:hardcoded string:      productCombination === "byjus_classes"
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1069:hardcoded string:      const isEligible = getBatchesEligibility(this.state, "");
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1078:hardcoded object:    const { changeNextBtnMode, productType, productCombination, identifier, user, authDetails } = this.props;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1079:hardcoded object:    const { env } = authDetails
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1080:hardcoded array:    const fields = productConfig ? this.getFields() : [];
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1081:hardcoded variable:    const isPrivilegedUser = checkIsPrivilegedUser(user);
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1082:hardcoded variable:    const isProficiencyAndFot = isProficiencyAndFotAvailable({
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1088:hardcoded variable:    const isBatchesEligible = this.checkBatchesEligibility();
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1089:hardcoded variable:    const isByjusMathBatchesEligible = board && initialClass && validity;
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1090:hardcoded string:    const bfsBatch = "1:6"
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1091:hardcoded string:    const isDevEnv = ['development', 'local'].includes(env);
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1092:hardcoded string:    const isLocalEnv = ["local"].includes(env)
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1095:hardcoded object:        <ErrorWrapper error={error} />
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1096:hardcoded string:        {isPrivilegedUser && productCombination === "byjus_classes" && (
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1098:hardcoded string:            ref="classTypeForm"
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1099:hardcoded object:            classType={classType}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1100:hardcoded object:            changeClassType={this.changeClassType}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1104:hardcoded number:          <Col md={8} sm={12}>
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1106:hardcoded string:              ref="productDetailsForm"
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1107:hardcoded object:              productType={productType}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1108:hardcoded object:              fields={fields}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1109:hardcoded object:              initialValues={{ ...getProductFormInitialValue(productDetails) }}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1111:hardcoded string:                productCombination === "home_learning_program" ? true : false
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1114:hardcoded string:                productCombination === "byjus_classes" ? true : false
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1130:hardcoded number:          <Col md={4} sm={12}>
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1133:hardcoded string:                ref="premiumAccount"
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1134:hardcoded object:                productCombination={productCombination}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1139:hardcoded number:        {/* BHLP for 4 to 12 */}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1142:hardcoded string:          productCombination === "home_learning_program" && (
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1144:hardcoded string:              ref="oneToManyDetailsForm"
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1145:hardcoded object:              identifier={identifier}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1146:hardcoded object:              initialClass={initialClass}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1147:hardcoded object:              board={board}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1148:hardcoded object:              state={state}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1149:hardcoded object:              productType={productType}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1150:hardcoded object:              validity={validity}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1151:hardcoded object:              subCourse={subCourse}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1152:hardcoded string:              productCombination="home_learning_program"
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1155:hardcoded number:        {/* Byjus classes For 3 to 10*/}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1158:hardcoded string:            ref="schoolForm"
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1159:hardcoded object:            board={board}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1160:hardcoded object:            state={state}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1161:hardcoded object:            props={this.props}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1162:hardcoded object:            grade={initialClass}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1163:hardcoded object:            handleParentChanges={this.handleChanges}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1164:hardcoded object:            handleClassBlurEvent={this.handleClassBlurEvent}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1170:hardcoded string:          productCombination == 'byjus_tlp' && parseInt(initialClass) >= 1 && parseInt(initialClass) < 4 ?
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1172:hardcoded string:              ref="byjusMathDetailsForm"
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1173:hardcoded object:              identifier={identifier}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1174:hardcoded object:              initialClass={initialClass}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1175:hardcoded object:              finalClass={initialClass}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1176:hardcoded object:              board={board}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1177:hardcoded object:              bfsBatch={bfsBatch}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1178:hardcoded object:              productCombination={productCombination}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1179:hardcoded object:              classType={classType}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1184:hardcoded string:                ref="byjusClassesDetailsForm"
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1185:hardcoded object:                identifier={identifier}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1186:hardcoded object:                initialClass={initialClass}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1187:hardcoded object:                board={board}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1188:hardcoded object:                state={state}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1189:hardcoded object:                productType={productType}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1190:hardcoded object:                validity={validity}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1191:hardcoded object:                subCourse={subCourse}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1192:hardcoded object:                courseType={courseType}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1193:hardcoded object:                classType={classType}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1194:hardcoded object:                session={session}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1195:hardcoded object:                proficiency={proficiency}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1196:hardcoded object:                trackId={trackId}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1197:hardcoded string:                isV4Batch={validity.toString() == "2024" || (yearSelection== 2024 && subCourse==="1:6") ? true : false}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1198:hardcoded string:                productCombination="byjus_classes"
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1199:hardcoded string:                schoolState={get(this.state, 'schoolState', '')}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1200:hardcoded object:                yearSelection={yearSelection}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1204:hardcoded string:          ref="fetchComp"
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1205:hardcoded object:          onClickFetchPrices={this.onClickFetchPrices}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1206:hardcoded object:          getProductDetails={this.getProductDetails}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1207:hardcoded object:          changeNextBtnMode={changeNextBtnMode}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1208:hardcoded object:          productType={productType}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1209:hardcoded object:          setError={this.setError}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1210:hardcoded object:          productCombination={productCombination}
microservices-middleware/client/src/modules/product/components/types/SingleProduct.js:1211:hardcoded object:          validity={validity}
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:1:hardcoded object:import React, { Component } from 'react';
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:2:hardcoded object:import { connect } from 'react-redux';
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:3:hardcoded object:import { get, find, isEmpty } from 'lodash';
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:5:hardcoded object:import { saveProductDetails, addLoader, removeLoader, resetPrice, saveCashbackDetails } from '../../productReducer';
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:8:hardcoded number:    getFormattedValidity, isK12Class, getClasses, getTablets, checkIsPrivilegedUser, checkPrivTabletAccess, getAllAvailableTablets
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:9:hardcoded string:} from '../productHelper';
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:10:hardcoded file path:import CallApi from '../../../../api/callApi';
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:11:hardcoded file path:import ProductDetailsForm from '../ProducDetailsForm';
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:12:hardcoded file path:import FetchPrices from '../FetchPrices';
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:13:hardcoded file path:import ErrorWrapper from '../../../../components/ErrorWrapper';
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:14:hardcoded object:import { validateProfileSelection } from 'modules/ordertype/upgrade/trialpack/components/products/UpgradeProductHelper'
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:16:hardcoded object:import { isEqual } from 'date-fns';
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:18:hardcoded variable:const mapStateToProps = state => ({
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:19:hardcoded string:    identifier: get(state, 'details.identifier'),
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:20:hardcoded string:    productDetails: get(state, 'product.details'),
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:21:hardcoded string:    productConfig: get(state, 'product.config'),
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:22:hardcoded string:    loading: get(state, 'product.loading'),
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:23:hardcoded string:    error: get(state, 'product.error'),
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:24:hardcoded string:    existingProfiles: get(state, 'product.existingProfiles'),
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:25:hardcoded string:    showProfileSelectionOption: get(state, 'product.showProfileSelectionOption'),
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:26:hardcoded string:    env: get(state, "auth.details.env"),
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:27:hardcoded string:    leadDetails: get(state, 'auth.leadDetails')
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:30:hardcoded variable:const mapDispatchToProps = dispatch => ({
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:55:hardcoded object:            productConfig: {},
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:56:hardcoded array:            fields: []
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:61:hardcoded object:        const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:62:hardcoded object:        const { identifier, productCombination, existingProfiles } = this.props;
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:63:hardcoded variable:        const details = await productDetailsForm.getProductDetails();
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:65:hardcoded string:        const productDetails = get(details, 'productDetails');
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:67:hardcoded number:        if (existingProfiles.length > 0 && productDetails) {
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:68:hardcoded variable:            const isValidate = validateProfileSelection(productDetails);
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:72:hardcoded string:        if (details && get(details, 'productDetails')) {
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:73:hardcoded variable:            const payload = {
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:75:hardcoded string:                productType: 'crpCompetitive',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:77:hardcoded string:                student: get(details, 'productDetails'),
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:78:hardcoded string:                mentoringCount: get(details, 'mentoringCount'),
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:79:hardcoded string:                couponDetails: get(details, 'couponDetails')
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:84:hardcoded string:                url: '/api/product/crpCompetitive'
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:90:hardcoded object:        const { identifier } = this.props;
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:91:hardcoded variable:        const payload = {
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:100:hardcoded string:                url: '/api/product/storeProductDetails',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:101:hardcoded string:                method: 'POST',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:104:hardcoded string:                const { productDetails, cashbackDetails } = get(response, 'data', {});
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:108:hardcoded object:                this.setState({ error: null });
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:110:hardcoded string:                this.navigateToScreen('address');
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:112:hardcoded object:                this.setState({ error }, () => {
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:121:hardcoded object:        const { history } = this.props;
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:122:hardcoded string:        const url = `/${path}${get(history, 'location.search')}`;
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:131:hardcoded object:        const { fetchComp } = this.refs;
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:134:hardcoded object:            const { status, productDetails } = fetchComp.getProductsAndFinalPrice();
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:136:hardcoded string:                if (status && productDetails && (get(productDetails, 'finalPrice') >= 0)) {
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:140:hardcoded string:                    this.setState({ error: 'Product Details Missing' });
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:143:hardcoded string:                const errMsg = get(error, 'message', 'Error') || error;
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:144:hardcoded object:                this.setState({ error: errMsg });
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:150:hardcoded array:    getTypeOptions = (productCombination, typeOptions = [], crpCity) => {
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:151:hardcoded object:        const { env } = this.props
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:152:hardcoded variable:        let options = typeOptions;
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:153:hardcoded string:        if (productCombination === "byjus_classes" && (["HYD", "DELHI"].includes(crpCity))) {
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:154:hardcoded string:            options = options.filter(ele => (get(ele, "value", "") === "New_BYJUS_CLASSES") || (get(ele, "value", "") === "Optional"));
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:155:hardcoded string:        } else if (productCombination === "byjus_classes") {
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:156:hardcoded string:            options = options.filter(ele => (get(ele, "value", "") === "New_BYJUS_CLASSES"))
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:162:hardcoded object:        const { productConfig } = this.props
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:163:hardcoded object:        const { Courses } = productConfig
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:164:hardcoded string:        const IAScourses = Courses.find(obj => obj.name == "IAS")
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:165:hardcoded object:        const { optionalCourses } = IAScourses
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:166:hardcoded array:        const { crpCourses = [] } = optionalCourses
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:167:hardcoded array:        let options = []
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:168:hardcoded string:        if (crpCity == "HYD") {
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:169:hardcoded string:            options = crpCourses.filter(ele => get(ele, "value", "") === "anthropology");
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:171:hardcoded string:        else if (crpCity == "DELHI") {
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:172:hardcoded string:            if (language === "Hindi") {
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:173:hardcoded string:                options = crpCourses.filter(ele => ["literature", "geography"].includes(get(ele, "value", "")));
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:175:hardcoded string:                options = crpCourses.filter(ele => get(ele, "value", "") === "geography");
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:181:hardcoded variable:        let options = courseLanguages;
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:182:hardcoded string:        if (!["LUCKNOW","DELHI","JAIPUR"].includes(crpCity)) {
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:183:hardcoded string:            options = options.filter(ele => get(ele, "value", "") === "English" );
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:188:hardcoded object:        const { env } = this.props
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:189:hardcoded string:        if (selectedOptionalCourse == "anthropology") {
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:190:hardcoded string:            batches = batches.filter(ele => get(ele, "value", "") === "WEEKDAY_MORNING");
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:195:hardcoded object:        const { selectedProfile } = this.state;
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:196:hardcoded object:        const { existingProfiles, user } = this.props;
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:197:hardcoded variable:        const isPrivilegedUser = checkIsPrivilegedUser(user);
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:198:hardcoded number:        if (existingProfiles && existingProfiles.length > 0) {
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:199:hardcoded variable:            let newExistingProfile = existingProfiles;
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:200:hardcoded string:            newExistingProfile = newExistingProfile.find(profile => profile.value === "newProfile");
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:202:hardcoded string:                existingProfiles.push({ "label": "New Profile", value: "newProfile" })
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:211:hardcoded object:        const { productType, user, productCombination, existingProfiles, showProfileSelectionOption, env, leadDetails } = this.props;
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:212:hardcoded array:        const { Products = [], Courses = [], Boards = [], Tablets = [], MeTablets = [] } = productConfig || {};
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:213:hardcoded array:        let { CrpCities = [] } = productConfig || {}
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:214:hardcoded object:        const productConfiguration = find(Products, { formattedName: productType }) || {};
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:215:hardcoded string:        CrpCities = CrpCities.filter(val => val.value !== "Chandigarh")
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:217:hardcoded object:        const { validity, tablets, batch } = productConfiguration || {};
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:218:hardcoded object:        const selectedCourseConfig = find(Courses, { formattedName: selectedCourse }) || {};
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:219:hardcoded string:        let courseLanguages = get(selectedCourseConfig, 'languages', []);
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:220:hardcoded string:        let typeOptions = get(selectedCourseConfig, 'types', []);
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:221:hardcoded variable:        let fields = [{
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:222:hardcoded string:            type: 'select',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:223:hardcoded string:            name: 'crpCity',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:224:hardcoded string:            label: 'Select City',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:225:hardcoded array:            options: CrpCities || [],
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:228:hardcoded string:            message: "Please select City"
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:230:hardcoded string:            type: 'select',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:231:hardcoded string:            name: 'course',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:232:hardcoded string:            label: 'Select Course',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:233:hardcoded string:            options: get(productConfiguration, 'courses'),
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:236:hardcoded string:            message: "Please select Course"
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:238:hardcoded string:            type: courseLanguages.length && productCombination === "byjus_classes" ? 'select' : 'hidden',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:240:hardcoded string:            name: 'language',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:241:hardcoded string:            label: 'Select Language',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:243:hardcoded string:            required: courseLanguages.length && productCombination === "byjus_classes" ? true : false,
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:244:hardcoded string:            message: "Please select Language"
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:246:hardcoded string:            type: productCombination === "byjus_classes" ? 'select' : 'hidden',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:248:hardcoded string:            name: 'type',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:249:hardcoded string:            label: 'Select Type',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:251:hardcoded string:            required: productCombination === "byjus_classes" ? true : false,
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:252:hardcoded string:            message: "Please select Type"
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:257:hardcoded string:            type: ( ["development","local"].includes(env))?(get(selectedCourseConfig, 'miscellaneous.options', []).includes(type)) ? "checkbox" : "disable":'hidden',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:258:hardcoded string:            name: 'isCrpFlowReq',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:259:hardcoded string:            checkBoxLabel: 'Crp Only Flow',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:264:hardcoded string:            type: (productCombination === "byjus_classes" && type == "Optional" ) ? 'select' : 'hidden',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:266:hardcoded string:            name: 'optional',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:267:hardcoded string:            label: 'Select optional',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:269:hardcoded string:            required: productCombination === "byjus_classes" && type == "Optional" ? true : false,
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:270:hardcoded string:            message: "Please select optional"
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:273:hardcoded string:            type: productCombination === "byjus_classes" ? 'select' : 'hidden',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:275:hardcoded string:            name: 'workshops',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:276:hardcoded string:            disabled: (productCombination == "byjus_classes" && type == "Optional" && crpCity === "DELHI") ? true : false,
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:277:hardcoded string:            label: 'Select Batch',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:279:hardcoded string:            required: productCombination === "byjus_classes" && crpCity == "DELHI" ? false : true,
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:280:hardcoded string:            message: "Please select Batch"
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:282:hardcoded string:            type: 'select',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:283:hardcoded string:            options: getFormattedValidity({ validity, user, productType: "crpCompetitive" }),
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:284:hardcoded string:            name: 'validity',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:285:hardcoded string:            label: 'Select Initial Validity',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:288:hardcoded string:            message: "Please Select Initial Validity"
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:290:hardcoded string:            type: 'select',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:291:hardcoded string:            options: checkPrivTabletAccess(leadDetails, user) ? getAllAvailableTablets : getTablets({ tablets, user, productType: "crpCompetitive", leadDetails, MeTablets }),
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:292:hardcoded string:            name: 'tablet',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:293:hardcoded string:            disabled: (productCombination == "byjus_classes" && type == "Optional") ? true : false,
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:294:hardcoded string:            label: 'Select Tablet',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:296:hardcoded string:            message: "Please select Tablet"
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:298:hardcoded string:            type: (showProfileSelectionOption && existingProfiles.length > 0 ? 'radio' : 'hidden'),
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:300:hardcoded string:            name: 'userProfile',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:301:hardcoded string:            label: 'Choose Profile Type',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:303:hardcoded string:            message: "Please Choose Profile Type",
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:305:hardcoded string:                display: 'block',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:306:hardcoded string:                height: '30px',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:307:hardcoded string:                lineHeight: '30px',
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:309:hardcoded number:            required: (showProfileSelectionOption && existingProfiles.length > 0 ? true : false)
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:316:hardcoded object:        const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:317:hardcoded variable:        const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:321:hardcoded array:            [name]: checked,
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:326:hardcoded object:        const { productDetailsForm } = this.refs;
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:327:hardcoded variable:        const detailsForm = productDetailsForm && productDetailsForm.getProductForm();
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:328:hardcoded string:        if (name === "crpCity") {
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:329:hardcoded string:            detailsForm && detailsForm.setFieldsValue({ course: "", language: "", type: "", workshops: "", validity: "", isCrpFlowReq: false  });
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:330:hardcoded object:            this.setState({ isCrpFlowReq: false })
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:332:hardcoded string:        if(name==="type"){
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:333:hardcoded object:            this.setState({ isCrpFlowReq: true })
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:335:hardcoded string:        if(name==="isCrpFlowReq"){
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:337:hardcoded object:            this.setState({ isCrpFlowReq: true })
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:341:hardcoded array:            [name]: value,
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:347:hardcoded object:        this.setState({ error });
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:353:hardcoded object:            this.setState({ productConfig: nextProps.productConfig }, async () => {
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:361:hardcoded object:        const { productDetails, productConfig, productType } = this.props;
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:363:hardcoded string:        if (productType === get(productDetails, 'productType')) {
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:364:hardcoded string:            const formValues = get(productDetails, 'students[0].formValues');
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:368:hardcoded string:                course: get(formValues, 'course')
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:374:hardcoded object:        this.setState({ productConfig });
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:378:hardcoded object:        const { error, productConfig, productDetails } = this.state;
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:379:hardcoded object:        const { changeNextBtnMode, productType, productCombination } = this.props;
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:381:hardcoded array:        const fields = productConfig ? this.getFields() : [];
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:384:hardcoded object:                <ErrorWrapper error={error} />
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:386:hardcoded string:                    ref="productDetailsForm"
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:387:hardcoded object:                    productType={productType}
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:388:hardcoded object:                    fields={fields}
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:389:hardcoded object:                    initialValues={getProductFormInitialValue(productDetails)}
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:392:hardcoded string:                    ref='fetchComp'
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:393:hardcoded object:                    onClickFetchPrices={this.onClickFetchPrices}
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:394:hardcoded object:                    getProductDetails={this.getProductDetails}
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:395:hardcoded object:                    changeNextBtnMode={changeNextBtnMode}
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:396:hardcoded object:                    productType={productType}
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:397:hardcoded object:                    productCombination={productCombination}
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:398:hardcoded object:                    setError={this.setError}
microservices-middleware/client/src/modules/product/components/types/CRPCompetitiveProduct.js:406:hardcoded object:export default connect(mapStateToProps, mapDispatchToProps, null, { forwardRef: true })(CRPCompetitiveProduct);
