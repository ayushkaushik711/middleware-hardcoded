microservices-middleware/client/src/modules/inventory/QrCode.js:1:hardcoded object:import React, { Component } from 'react';
microservices-middleware/client/src/modules/inventory/QrCode.js:2:hardcoded object:import { get, isEmpty, isEqual, flattenDeep, find } from 'lodash';
microservices-middleware/client/src/modules/inventory/QrCode.js:4:hardcoded file path:import CallApi from '../../api/callApi';
microservices-middleware/client/src/modules/inventory/QrCode.js:5:hardcoded object:import { Layout, Alert, Select, Divider, Table, message, Button} from 'antd';
microservices-middleware/client/src/modules/inventory/QrCode.js:6:hardcoded file path:import AppLayout from '../../modules/applayout/AppLayout';
microservices-middleware/client/src/modules/inventory/QrCode.js:7:hardcoded file path:import InfoWrapper from '../../components/InfoWrapper';
microservices-middleware/client/src/modules/inventory/QrCode.js:8:hardcoded file path:import AntDformBuilder from '../../components/form/AntDFormBuilder'
microservices-middleware/client/src/modules/inventory/QrCode.js:18:hardcoded array:            orderDetails: [],
microservices-middleware/client/src/modules/inventory/QrCode.js:24:hardcoded object:        const { createdOrders } = this.props;
microservices-middleware/client/src/modules/inventory/QrCode.js:25:hardcoded array:        const orderDetails = []
microservices-middleware/client/src/modules/inventory/QrCode.js:28:hardcoded string:                const orderId = get(order,'orderId','')
microservices-middleware/client/src/modules/inventory/QrCode.js:29:hardcoded string:                const isImmediatedDeliveryPossible = get(order,'isImmediateDeliveryPossible',false);
microservices-middleware/client/src/modules/inventory/QrCode.js:30:hardcoded object:                orderDetails.push({orderId,isImmediatedDeliveryPossible})
microservices-middleware/client/src/modules/inventory/QrCode.js:32:hardcoded number:            if (orderDetails.length > 0) {
microservices-middleware/client/src/modules/inventory/QrCode.js:33:hardcoded string:                if (!isEmpty(find(orderDetails, ['isImmediatedDeliveryPossible', true]))){
microservices-middleware/client/src/modules/inventory/QrCode.js:34:hardcoded object:                    this.setState({isOnSpotDelivery: true})
microservices-middleware/client/src/modules/inventory/QrCode.js:37:hardcoded object:            this.setState({ orderDetails: orderDetails });
microservices-middleware/client/src/modules/inventory/QrCode.js:42:hardcoded object:        const { orderDetails } = this.state;
microservices-middleware/client/src/modules/inventory/QrCode.js:43:hardcoded object:        this.setState({loading: true})
microservices-middleware/client/src/modules/inventory/QrCode.js:45:hardcoded object:            const { orderId } = order
microservices-middleware/client/src/modules/inventory/QrCode.js:46:hardcoded array:            const qrCodeDetails = []
microservices-middleware/client/src/modules/inventory/QrCode.js:47:hardcoded object:            this.setState({ loading: true });
microservices-middleware/client/src/modules/inventory/QrCode.js:50:hardcoded string:                method: "POST",
microservices-middleware/client/src/modules/inventory/QrCode.js:51:hardcoded object:                body: {orderId}
microservices-middleware/client/src/modules/inventory/QrCode.js:53:hardcoded variable:                const qrCodeInfo = response.data.qrCodeInfo
microservices-middleware/client/src/modules/inventory/QrCode.js:54:hardcoded object:                const { details } = qrCodeInfo
microservices-middleware/client/src/modules/inventory/QrCode.js:56:hardcoded object:                    const qrDetail = {}
microservices-middleware/client/src/modules/inventory/QrCode.js:57:hardcoded string:                    qrDetail.qrCode = get(dt, "qrCode", "");
microservices-middleware/client/src/modules/inventory/QrCode.js:58:hardcoded string:                    qrDetail.mobileNumber = get(dt, "mobileNumber", "");
microservices-middleware/client/src/modules/inventory/QrCode.js:59:hardcoded string:                    qrDetail.subscriptions = get(dt, "subscriptions", []);
microservices-middleware/client/src/modules/inventory/QrCode.js:62:hardcoded number:                if (qrCodeDetails && qrCodeDetails.length > 0) {
microservices-middleware/client/src/modules/inventory/QrCode.js:63:hardcoded string:                    message.success("QR Code fetched successfully.");
microservices-middleware/client/src/modules/inventory/QrCode.js:64:hardcoded object:                    this.setState({ qrCode: qrCodeDetails, loading: false });
microservices-middleware/client/src/modules/inventory/QrCode.js:67:hardcoded string:                message.warning("QR Code not yet generated. Please try in sometime.");
microservices-middleware/client/src/modules/inventory/QrCode.js:68:hardcoded object:                this.setState({loading: false})
microservices-middleware/client/src/modules/inventory/QrCode.js:74:hardcoded variable:        const columns = [{
microservices-middleware/client/src/modules/inventory/QrCode.js:75:hardcoded string:            title: 'Grade',
microservices-middleware/client/src/modules/inventory/QrCode.js:76:hardcoded string:            dataIndex: 'grade',
microservices-middleware/client/src/modules/inventory/QrCode.js:78:hardcoded string:            title: 'Expiry',
microservices-middleware/client/src/modules/inventory/QrCode.js:79:hardcoded string:            dataIndex: 'max_valid_till',
microservices-middleware/client/src/modules/inventory/QrCode.js:81:hardcoded string:            title: 'Code',
microservices-middleware/client/src/modules/inventory/QrCode.js:82:hardcoded string:            dataIndex: 'code',
microservices-middleware/client/src/modules/inventory/QrCode.js:87:hardcoded string:                const div = document.body.appendChild(document.createElement('div'));
microservices-middleware/client/src/modules/inventory/QrCode.js:88:hardcoded string:                div.setAttribute("id", index);
microservices-middleware/client/src/modules/inventory/QrCode.js:89:hardcoded variable:                let qrCodeContainer = document.getElementById(index);
microservices-middleware/client/src/modules/inventory/QrCode.js:90:hardcoded string:                qrCodeContainer.innerHTML = get(dt, "qrCode", "");
microservices-middleware/client/src/modules/inventory/QrCode.js:92:hardcoded string:                const subscriptions = get(dt, "subscriptions", [])
microservices-middleware/client/src/modules/inventory/QrCode.js:96:hardcoded string:                        <div><strong>Student MobileNo :</strong>{dt.mobileNumber || '-'}</div>
microservices-middleware/client/src/modules/inventory/QrCode.js:97:hardcoded string:                        <Table columns={columns} dataSource={subscriptions} size="small" />
microservices-middleware/client/src/modules/inventory/QrCode.js:98:hardcoded object:                        <div id={index}></div>
microservices-middleware/client/src/modules/inventory/QrCode.js:110:hardcoded object:        const {isOnSpotDelivery, qrCode, loading} = this.state;
microservices-middleware/client/src/modules/inventory/QrCode.js:115:hardcoded string:                {isOnSpotDelivery && <Button type="primary" className="order-status-btn" onClick={this.fetchQRCode} loading={loading}>Fetch QR Code</Button>}
microservices-middleware/client/src/modules/inventory/Inventory.js:1:hardcoded object:import React, { Component } from 'react';
microservices-middleware/client/src/modules/inventory/Inventory.js:2:hardcoded object:import { get, isEmpty, isEqual, flattenDeep } from 'lodash';
microservices-middleware/client/src/modules/inventory/Inventory.js:4:hardcoded object:import { Layout, Alert, Select, Divider, Table} from 'antd';
microservices-middleware/client/src/modules/inventory/Inventory.js:5:hardcoded file path:import AppLayout from '../../modules/applayout/AppLayout';
microservices-middleware/client/src/modules/inventory/Inventory.js:6:hardcoded file path:import InfoWrapper from '../../components/InfoWrapper';
microservices-middleware/client/src/modules/inventory/Inventory.js:7:hardcoded file path:import AntDformBuilder from '../../components/form/AntDFormBuilder'
microservices-middleware/client/src/modules/inventory/Inventory.js:9:hardcoded object:import { isImmediateDeliverable } from './inventoryHelper';
microservices-middleware/client/src/modules/inventory/Inventory.js:15:hardcoded array:            inventory: [],
microservices-middleware/client/src/modules/inventory/Inventory.js:17:hardcoded array:            selectedCard: [],
microservices-middleware/client/src/modules/inventory/Inventory.js:18:hardcoded array:            tablets: [],
microservices-middleware/client/src/modules/inventory/Inventory.js:19:hardcoded array:            selectedTablet: [],
microservices-middleware/client/src/modules/inventory/Inventory.js:22:hardcoded object:            immediateDeliveryDetails: {},
microservices-middleware/client/src/modules/inventory/Inventory.js:24:hardcoded number:            minimumDP: 0
microservices-middleware/client/src/modules/inventory/Inventory.js:29:hardcoded array:        const item = []
microservices-middleware/client/src/modules/inventory/Inventory.js:30:hardcoded variable:        let result = {
microservices-middleware/client/src/modules/inventory/Inventory.js:31:hardcoded array:            formValues: [],
microservices-middleware/client/src/modules/inventory/Inventory.js:33:hardcoded number:            minimumDP: 0
microservices-middleware/client/src/modules/inventory/Inventory.js:36:hardcoded variable:            const inventoryList = await this.inventoryList.getFormValues();
microservices-middleware/client/src/modules/inventory/Inventory.js:37:hardcoded object:            const { minimumDP }  = this.state;
microservices-middleware/client/src/modules/inventory/Inventory.js:42:hardcoded variable:                        const itemlist = optn.map((ls) => {
microservices-middleware/client/src/modules/inventory/Inventory.js:43:hardcoded variable:                            const itmeId = ls
microservices-middleware/client/src/modules/inventory/Inventory.js:60:hardcoded object:        this.setState({selectedCard})
microservices-middleware/client/src/modules/inventory/Inventory.js:64:hardcoded object:        this.setState({selectedTablet})
microservices-middleware/client/src/modules/inventory/Inventory.js:68:hardcoded object:        const { immediateDeliveryDetails } = this.state
microservices-middleware/client/src/modules/inventory/Inventory.js:71:hardcoded string:            mode:"multiple",
microservices-middleware/client/src/modules/inventory/Inventory.js:72:hardcoded string:            type: 'select',
microservices-middleware/client/src/modules/inventory/Inventory.js:73:hardcoded string:            name: 'selectedSdcard',
microservices-middleware/client/src/modules/inventory/Inventory.js:74:hardcoded string:            label: 'SD Cards',
microservices-middleware/client/src/modules/inventory/Inventory.js:75:hardcoded string:            options: get(immediateDeliveryDetails,"sdCard",[]),
microservices-middleware/client/src/modules/inventory/Inventory.js:78:hardcoded string:            mode:"multiple",
microservices-middleware/client/src/modules/inventory/Inventory.js:79:hardcoded string:            type: 'select',
microservices-middleware/client/src/modules/inventory/Inventory.js:80:hardcoded string:            name: 'selectedTablet',
microservices-middleware/client/src/modules/inventory/Inventory.js:81:hardcoded string:            label: 'Tablets',
microservices-middleware/client/src/modules/inventory/Inventory.js:82:hardcoded string:            options: get(immediateDeliveryDetails,"tablet",[]),
microservices-middleware/client/src/modules/inventory/Inventory.js:88:hardcoded variable:        const inventoryFields = this.getInventoryFormFields();
microservices-middleware/client/src/modules/inventory/Inventory.js:92:hardcoded string:                heading="Immediate Delivery"
microservices-middleware/client/src/modules/inventory/Inventory.js:93:hardcoded object:                wrappedComponentRef={(inst) => this.inventoryList = inst}
microservices-middleware/client/src/modules/inventory/Inventory.js:94:hardcoded object:                fields={inventoryFields}
microservices-middleware/client/src/modules/inventory/Inventory.js:102:hardcoded string:                type="error"
microservices-middleware/client/src/modules/inventory/Inventory.js:103:hardcoded string:                message=""
microservices-middleware/client/src/modules/inventory/Inventory.js:117:hardcoded object:        const { selectedCard, selectedTablet } = this.state;
microservices-middleware/client/src/modules/inventory/Inventory.js:118:hardcoded array:        let inventoryList = [] 
microservices-middleware/client/src/modules/inventory/Inventory.js:122:hardcoded variable:        const columns = [{
microservices-middleware/client/src/modules/inventory/Inventory.js:123:hardcoded string:            title: 'Selected Inventory',
microservices-middleware/client/src/modules/inventory/Inventory.js:124:hardcoded string:            dataIndex: 'inventoryList',
microservices-middleware/client/src/modules/inventory/Inventory.js:127:hardcoded array:        const sdCardList = []
microservices-middleware/client/src/modules/inventory/Inventory.js:129:hardcoded object:            const card = {}
microservices-middleware/client/src/modules/inventory/Inventory.js:136:hardcoded string:                type="success"
microservices-middleware/client/src/modules/inventory/Inventory.js:137:hardcoded string:                message=""
microservices-middleware/client/src/modules/inventory/Inventory.js:140:hardcoded string:                    <Table columns={columns} dataSource={sdCardList} size="small" />
microservices-middleware/client/src/modules/inventory/Inventory.js:148:hardcoded object:        const  { identifier } = this.props;
microservices-middleware/client/src/modules/inventory/Inventory.js:152:hardcoded number:            const { status = false, minimumDP = 0, items = [] } = onSpotDelivery
microservices-middleware/client/src/modules/inventory/Inventory.js:153:hardcoded object:            this.setState({ isImmediatedDeliveryPossible: status, immediateDeliveryDetails: items, loading:false, minimumDP: minimumDP })
microservices-middleware/client/src/modules/inventory/Inventory.js:158:hardcoded object:        const { errorMessage, loading, rules, isImmediateDelivery, isImmediatedDeliveryPossible, selectedCard, selectedTablet } = this.state;
microservices-middleware/client/src/modules/inventory/Inventory.js:159:hardcoded variable:        const inventoryFields = this.getInventoryFormFields();
microservices-middleware/client/src/modules/inventory/Inventory.js:164:hardcoded object:                {isImmediatedDeliveryPossible ? this.getInventoryComponent() : this.getInventoryErrorComponent() } 
microservices-middleware/client/src/modules/inventory/Inventory.js:165:hardcoded object:                {this.showSelectedInventoryList()}
microservices-middleware/client/src/modules/inventory/inventoryHelper.js:1:hardcoded object:import {get} from 'lodash';
microservices-middleware/client/src/modules/inventory/inventoryHelper.js:3:hardcoded file path:import makeApiCall from '../../api/callApi';
microservices-middleware/client/src/modules/inventory/inventoryHelper.js:5:hardcoded variable:const isImmediateDeliverable = async (payload) => {
microservices-middleware/client/src/modules/inventory/inventoryHelper.js:6:hardcoded variable:    const options = {
microservices-middleware/client/src/modules/inventory/inventoryHelper.js:7:hardcoded string:        url: '/api/inventory/onSpot',
microservices-middleware/client/src/modules/inventory/inventoryHelper.js:8:hardcoded string:        method: 'POST',
microservices-middleware/client/src/modules/inventory/inventoryHelper.js:13:hardcoded variable:    const response = await makeApiCall(options);
