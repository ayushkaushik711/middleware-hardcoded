microservices-middleware/client/src/utility/paymentPermission.js:1:hardcoded variable:export const permissionValidation = (user, permissionName) => {
microservices-middleware/client/src/utility/paymentPermission.js:2:hardcoded array:    const mergedPermissions = user.permissions || []
microservices-middleware/client/src/utility/screenPermission.js:1:hardcoded variable:export const paymentPermissions = {
microservices-middleware/client/src/utility/screenPermission.js:2:hardcoded string:    ignoreDownPaymentCheck: "PAYMENT_DOWN_PAYMENT_IGNORE_CHECK",
microservices-middleware/client/src/utility/screenPermission.js:3:hardcoded string:    allowCFPayment: "PAYMENT_CF_ALLOW",
microservices-middleware/client/src/utility/screenPermission.js:4:hardcoded string:    allowTicketSwap: "PAYMENT_TICKET_SWAP_ALLOW",
microservices-middleware/client/src/utility/screenPermission.js:5:hardcoded string:    allowRepunch: "PAYMENT_REPUNCH_ALLOW"
microservices-middleware/client/src/utility/screenPermission.js:7:hardcoded variable:export const orderPermissions = {
microservices-middleware/client/src/utility/screenPermission.js:8:hardcoded string:    ignoreOtpCheck: "ORDER_OTP_IGNORE_CHECK"
microservices-middleware/client/src/utility/screenPermission.js:10:hardcoded variable:export const productPermissions = {
microservices-middleware/client/src/utility/screenPermission.js:11:hardcoded string:    ignorePriceRangeCheck: "PRODUCT_PRICE_RANGE_IGNORE_CHECK",
microservices-middleware/client/src/utility/screenPermission.js:12:hardcoded string:    ignoreSiblingCountCheck: "PRODUCT_SIBLING_COUNT_IGNORE_CHECK",
microservices-middleware/client/src/utility/screenPermission.js:13:hardcoded string:    ignoreValidityCheck: "PRODUCT_VALIDITY_ALLOW_EXTENDED",
microservices-middleware/client/src/utility/screenPermission.js:14:hardcoded string:    acceptK3Check: "PRODUCT_K3_ALLOW",
microservices-middleware/client/src/utility/screenPermission.js:15:hardcoded string:    allowD4Check: "PRODUCT_D4_ALLOW",
microservices-middleware/client/src/utility/screenPermission.js:16:hardcoded string:    allowProductCombinationSelection: "PRODUCT_COMBINATION_SELECTION_ALLOW",
microservices-middleware/client/src/utility/screenPermission.js:17:hardcoded string:    allowSeperateProductSelection: "PRODUCT_SEPERATE_SELECTION_ALLOW",
microservices-middleware/client/src/utility/screenPermission.js:18:hardcoded string:    allowProductHLP: "PRODUCT_HOME_LEARNING_PROGRAM_ALLOW",
microservices-middleware/client/src/utility/screenPermission.js:19:hardcoded string:    allowOneToMany: "PRODUCT_ONE_TO_MANY_ALLOW",
microservices-middleware/client/src/utility/screenPermission.js:20:hardcoded string:    allowHLPCompetitive: "PRODUCT_HOME_LEARNING_PROGRAM_COMPETITIVE_ALLOW",
microservices-middleware/client/src/utility/screenPermission.js:21:hardcoded string:    allowFinalGradeRestriction: "PRODUCT_FINAL_GRADE_RESTRICTION"
microservices-middleware/client/src/utility/screenPermission.js:23:hardcoded variable:export const detailsPermissions = {
microservices-middleware/client/src/utility/screenPermission.js:24:hardcoded string:    ignorePhoneDuplicityCheck: "DETAILS_PHONE_IGNORE_CHECK",
microservices-middleware/client/src/utility/screenPermission.js:25:hardcoded string:    ignoreEmailDuplicityCheck: "DETAILS_EMAIL_IGNORE_CHECK"
microservices-middleware/client/src/utility/screenPermission.js:27:hardcoded variable:export const leadquaredRelatedPermissions = {
microservices-middleware/client/src/utility/screenPermission.js:28:hardcoded string:    allownMultipleOrderOnSameProspectId: "LS_PROSPECT_ID_IGNORE_CHECK",
microservices-middleware/client/src/utility/screenPermission.js:29:hardcoded string:    allownTrialPackUpgrade: "LS_HOME_ALLOW_TRIAL_PACK_UPGRADE",
microservices-middleware/client/src/utility/screenPermission.js:30:hardcoded string:    allowRenewalOrder: "LS_HOME_ALLOW_RENEWAL_ORDER"
microservices-middleware/client/src/utility/campaignVerticalValidation.js:1:hardcoded object:import { isEmpty, map } from "lodash";
microservices-middleware/client/src/utility/campaignVerticalValidation.js:2:hardcoded object:import { getPaymentCampaign, getPaymentVertical, getPaymentLocation, getPaymentToManagerMapping } from './campaignVerticalPaymentList';
microservices-middleware/client/src/utility/campaignVerticalValidation.js:7:hardcoded object: * @param {*} user - loggedIn User
microservices-middleware/client/src/utility/campaignVerticalValidation.js:8:hardcoded object: * @param {*} paymentType  - payment Type
microservices-middleware/client/src/utility/campaignVerticalValidation.js:10:hardcoded variable:export const validateCampaign = (user, paymentType) => {
microservices-middleware/client/src/utility/campaignVerticalValidation.js:11:hardcoded variable:    let isAllowed = false;
microservices-middleware/client/src/utility/campaignVerticalValidation.js:14:hardcoded variable:        const userCampain = user.campaign && user.campaign.toLowerCase();
microservices-middleware/client/src/utility/campaignVerticalValidation.js:15:hardcoded variable:        const paymentConfig = getPaymentCampaign(paymentType);
microservices-middleware/client/src/utility/campaignVerticalValidation.js:19:hardcoded object:            const { campaigns: campaignList, type } = paymentConfig;
microservices-middleware/client/src/utility/campaignVerticalValidation.js:20:hardcoded array:            let formattedCampaigns = campaignList || [];
microservices-middleware/client/src/utility/campaignVerticalValidation.js:23:hardcoded string:            if (type === "allowed") {
microservices-middleware/client/src/utility/campaignVerticalValidation.js:26:hardcoded string:            else if (type === "restricted") {
microservices-middleware/client/src/utility/campaignVerticalValidation.js:38:hardcoded variable:export const validateVertical = (user, paymentType) => {
microservices-middleware/client/src/utility/campaignVerticalValidation.js:39:hardcoded variable:    let isAllowed = false;
microservices-middleware/client/src/utility/campaignVerticalValidation.js:42:hardcoded variable:        const userVertical = user.vertical && user.vertical.toLowerCase();
microservices-middleware/client/src/utility/campaignVerticalValidation.js:43:hardcoded variable:        const paymentConfig = getPaymentVertical(paymentType);
microservices-middleware/client/src/utility/campaignVerticalValidation.js:47:hardcoded object:            const { verticals: verticalList, type } = paymentConfig;
microservices-middleware/client/src/utility/campaignVerticalValidation.js:48:hardcoded array:            let formattedVerticals = verticalList || [];
microservices-middleware/client/src/utility/campaignVerticalValidation.js:51:hardcoded string:            if (type === "allowed") {
microservices-middleware/client/src/utility/campaignVerticalValidation.js:54:hardcoded string:            else if (type === "restricted") {
microservices-middleware/client/src/utility/campaignVerticalValidation.js:67:hardcoded variable:export const validateLocation = (user, paymentType) => {
microservices-middleware/client/src/utility/campaignVerticalValidation.js:68:hardcoded variable:    let isAllowed = false;
microservices-middleware/client/src/utility/campaignVerticalValidation.js:71:hardcoded variable:        const userLocation = user.location && user.location.toLowerCase();
microservices-middleware/client/src/utility/campaignVerticalValidation.js:72:hardcoded variable:        const paymentConfig = getPaymentLocation(paymentType);
microservices-middleware/client/src/utility/campaignVerticalValidation.js:76:hardcoded object:            const { locations: locationList, type } = paymentConfig;
microservices-middleware/client/src/utility/campaignVerticalValidation.js:77:hardcoded array:            let formattedLocations = locationList || [];
microservices-middleware/client/src/utility/campaignVerticalValidation.js:80:hardcoded string:            if (type === "allowed") {
microservices-middleware/client/src/utility/campaignVerticalValidation.js:83:hardcoded string:            else if (type === "restricted") {
microservices-middleware/client/src/utility/campaignVerticalValidation.js:97:hardcoded object: * @param {String} email 
microservices-middleware/client/src/utility/campaignVerticalValidation.js:98:hardcoded object: * @param {Object} reportingTo 
microservices-middleware/client/src/utility/campaignVerticalValidation.js:99:hardcoded object: * @param {String} roles 
microservices-middleware/client/src/utility/campaignVerticalValidation.js:100:hardcoded object: * @param {String} paymentType 
microservices-middleware/client/src/utility/campaignVerticalValidation.js:102:hardcoded variable:export const validateReportingTo = (data) => {
microservices-middleware/client/src/utility/campaignVerticalValidation.js:103:hardcoded variable:    let isAllowed = false;
microservices-middleware/client/src/utility/campaignVerticalValidation.js:105:hardcoded object:    const { userEmail, reportingTo, roleType, method } = data
microservices-middleware/client/src/utility/campaignVerticalValidation.js:106:hardcoded variable:    const reportingToEmails = getReportingToEmails(reportingTo, roleType)
microservices-middleware/client/src/utility/campaignVerticalValidation.js:108:hardcoded variable:        const paymentConfig = getPaymentToManagerMapping(roleType, method);
microservices-middleware/client/src/utility/campaignVerticalValidation.js:112:hardcoded object:            const { emailList, type } = paymentConfig;
microservices-middleware/client/src/utility/campaignVerticalValidation.js:114:hardcoded array:            let configEmails = emailList || [];
microservices-middleware/client/src/utility/campaignVerticalValidation.js:117:hardcoded string:            if (type === "allowed") {
microservices-middleware/client/src/utility/campaignVerticalValidation.js:137:hardcoded object: * @param {Object} roles 
microservices-middleware/client/src/utility/campaignVerticalValidation.js:139:hardcoded variable:export const getReportingToEmails = (reportingTo, roleType) => {
microservices-middleware/client/src/utility/campaignVerticalValidation.js:141:hardcoded array:        const roleBasedUsers = reportingTo[roleType] || [];
microservices-middleware/client/src/utility/campaignVerticalValidation.js:142:hardcoded string:        const emails = map(roleBasedUsers, 'userEmail');
microservices-middleware/client/src/utility/campaignVerticalValidation.js:145:hardcoded array:    return []
microservices-middleware/client/src/utility/statusDescription.js:4:hardcoded string:        details_saved: "Sales and customer details saved. Click on resume to start order punching from Address details page",
microservices-middleware/client/src/utility/statusDescription.js:5:hardcoded string:        address_saved: "Address details saved. Click on resume to start order punching from Product details page",
microservices-middleware/client/src/utility/statusDescription.js:6:hardcoded string:        product_saved: "Product details saved. Click on resume to start order punching from Payment details page",
microservices-middleware/client/src/utility/statusDescription.js:7:hardcoded string:        payment_saved: "Payment details saved. Otp verification is required",
microservices-middleware/client/src/utility/statusDescription.js:8:hardcoded string:        otp_saved: "Otp is generated for the customer. Awaiting for the verification of order.",
microservices-middleware/client/src/utility/statusDescription.js:9:hardcoded string:        repunch_saved: "Repunch reason saved. Click on resume to start order punching from Address details page"
microservices-middleware/client/src/utility/enumUtility.js:1:hardcoded file path:import CallApi from 'api/callApi';
microservices-middleware/client/src/utility/enumUtility.js:3:hardcoded variable:export const getEnumOptions = async (enumId) => {
microservices-middleware/client/src/utility/enumUtility.js:4:hardcoded variable:    const response = await CallApi({
microservices-middleware/client/src/utility/enumUtility.js:5:hardcoded object:        url: `/api/config/getEnumOptions/${enumId}`,
microservices-middleware/client/src/utility/enumUtility.js:6:hardcoded string:        method: 'GET',
microservices-middleware/client/src/utility/enumUtility.js:8:hardcoded object:    const { enums } = response.data;
microservices-middleware/client/src/utility/enumUtility.js:9:hardcoded variable:    const filteredEnums = enums.filter(e => !e.disabled && !e.hidden);
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:4:hardcoded object: * @param {type} type : Payment Type
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:7:hardcoded variable:const getPaymentCampaign = (type) => {
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:9:hardcoded variable:    const paymentBasedCampaignMap = {
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:10:hardcoded string:        "cashback": {
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:11:hardcoded string:            "campaigns": ["Livechat Calling"],
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:12:hardcoded string:            "type": "restricted"
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:14:hardcoded string:        "cheque": {
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:15:hardcoded string:            "campaigns": [],
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:16:hardcoded string:            "type": "restricted"
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:18:hardcoded string:        "shopse": {
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:19:hardcoded string:            "campaigns": ['chennai', 'mumbai', 'gujarat'],
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:20:hardcoded string:            "type": "allowed"
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:24:hardcoded array:    return paymentBasedCampaignMap[type] || null;
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:27:hardcoded variable:const getPaymentVertical = (type) => {
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:29:hardcoded variable:    const paymentBasedVerticalMap = {
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:30:hardcoded string:        "cashback": {
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:31:hardcoded string:            "verticals": ["Livechat Calling", "Post Sales UPSC", "Inbound DS Booking"],
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:32:hardcoded string:            "type": "restricted"
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:36:hardcoded array:    return paymentBasedVerticalMap[type] || null;
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:39:hardcoded variable:const getPaymentLocation = (type) => {
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:41:hardcoded variable:    const paymentBasedLocationMap = {
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:42:hardcoded string:        "avanse": {
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:43:hardcoded string:            "locations": ["Agra", "Ahmedabad", "Aurangabad", "Bangalore", "Bareilly", "Belgaum", "Bhavnagar",
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:44:hardcoded string:                "Bhopal", "Bikaner", "Calicut", "Chandigarh", "Coimbatore", "Davanagere", "Dehradun", "DS Karnataka",
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:45:hardcoded string:                "Gulbarga", "Gwalior", "Hisar", "Hubli", "Indore", "Jabalpur", "Jaipur", "Jalandhar", "Jammu", "Jodhpur",
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:46:hardcoded string:                "Kannur", "Kanpur", "kasargod", "Kochi", "Kolhapur", "Kollam", "Kota", "Kottayam", "Lucknow", "Ludhiana",
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:47:hardcoded string:                "Madurai", "Mangalore", "Meerut", "Mumbai", "Andheri", "Thane", "Vashi", "Mysore", "Nagercoil", "Nagpur",
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:48:hardcoded string:                "Nashik", "Palakkad", "Pune", "Raipur", "Rajkot", "Salem", "Solapur", "Surat", "Thrissur", "Trichy",
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:49:hardcoded string:                "Trivandrum", "Udaipur", "Vadodara"],
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:50:hardcoded string:            "type": "allowed"
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:52:hardcoded string:        "iifl": {
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:53:hardcoded string:            "locations": ["Anantapur", "Bhubaneswar", "Chennai", "Delhi", "Guwahati", "Hyderabad", "Kolkata", "Nellore", "Patna",
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:54:hardcoded string:                "Pondicherry", "Rajahmundry", "Ranchi", "Rourkela", "Tirupati", "Varanasi", "Vijayawada", "Vizag", "Warangal", "Gurgaon"],
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:55:hardcoded string:            "type": "allowed"
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:57:hardcoded string:        "fullertonv3": {
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:58:hardcoded string:            "locations": ["Delhi", "Noida", "Gurgaon", "Dehradun", "Chandigarh", "Ludhiana", "Jalandhar", "Hisar",
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:59:hardcoded string:                "Anantapur", "Chennai", "Hyderabad", "Nellore", "Pondicherry",
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:60:hardcoded string:                "Rajahmundry", "Tirupati", "Vijayawada", "Vizag", "Warangal", "Gurgaon"],
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:61:hardcoded string:            "type": "allowed"
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:63:hardcoded string:        "icici": {
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:64:hardcoded string:            "locations": ["Bangalore", "Kolkata", "Patna", "Ranchi", "Varanasi", "Rourkela", "Bhubaneswar", "Guwahati"],
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:65:hardcoded string:            "type": "allowed"
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:67:hardcoded string:        "kotak": {
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:68:hardcoded string:            "locations": ["Mumbai", "Navi Mumbai", "Thane", "Andheri", "Pune", "Nagpur", "Aurangabad", "Kolhapur", "Solapur", "Nashik", "Raipur", "Hyderabad", "Warangal",
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:69:hardcoded string:                "Nellore", "Vijayawada", "Vizag", "Anantapur", "Rajahmundry", "Kochi", "Calicut", "Trivandrum", "Palakkad", "Thrissur", "Kottayam", "Kannur", "Kollam"],
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:70:hardcoded string:            "type": "allowed"
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:72:hardcoded string:        "abfl": {
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:73:hardcoded string:            "locations": ["Chennai", "Pondicherry", "Tirupati", "Coimbatore", "Madurai", "Trichy", "Salem", "Nagercoil",
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:74:hardcoded string:                "Ahmedabad", "Bhopal", "Indore", "Jabalpur", "Gwalior", "Kolkata", "Guwahati", "Orrisa", "Patna", "Varanasi", "Ranchi", "Rourkela"],
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:75:hardcoded string:            "type": "allowed"
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:79:hardcoded array:    return paymentBasedLocationMap[type] || null;
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:82:hardcoded variable:const getPaymentToManagerMapping = (roleType, paymentType) => {
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:84:hardcoded variable:    const paymentBasedMap = {
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:85:hardcoded string:        "avp": {
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:86:hardcoded string:            "shopse": {
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:87:hardcoded string:                "emailList": ["pranav.jajodia@byjus.com", "adesh@Byjus.com"],
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:88:hardcoded string:                "type": "allowed"
microservices-middleware/client/src/utility/campaignVerticalPaymentList.js:92:hardcoded array:    return paymentBasedMap[roleType] ? paymentBasedMap[roleType][paymentType] : {}
microservices-middleware/client/src/utility/orderPunchingType.js:3:hardcoded string:    normalOrderType: "NORMAL_ORDER",
microservices-middleware/client/src/utility/orderPunchingType.js:4:hardcoded string:    tlpToHlpOrderType: "TLP_TO_HLP_ORDER",
microservices-middleware/client/src/utility/orderPunchingType.js:5:hardcoded string:    repunchOrderType: "REPUNCH_ORDER_TYPE",
microservices-middleware/client/src/utility/orderPunchingType.js:6:hardcoded string:    trialPackToByjusClassOrderType: "TRIAL_PACK_TO_BYJUS_CLASSES",
microservices-middleware/client/src/utility/orderPunchingType.js:7:hardcoded string:    renewalOrderType: "RENEWAL_ORDER",
microservices-middleware/client/src/utility/orderPunchingType.js:8:hardcoded string:    middleeastOrderType: "MIDDLEEAST_ORDER",
microservices-middleware/client/src/utility/orderPunchingType.js:9:hardcoded string:    aakashCrpOrderType: "AAKASH_CRP_ORDER"
microservices-middleware/client/src/utility/currencyFormatter.js:2:hardcoded string:const currencyFormatter = (amount, currency = "INR") => {
microservices-middleware/client/src/utility/currencyFormatter.js:4:hardcoded string:    if (isNaN(amount) || !currency) return '₹0.00';
microservices-middleware/client/src/utility/currencyFormatter.js:5:hardcoded string:    const formatter = new Intl.NumberFormat('en-IN', {
microservices-middleware/client/src/utility/currencyFormatter.js:6:hardcoded string:        style: 'currency',
microservices-middleware/client/src/utility/currencyFormatter.js:8:hardcoded number:        minimumFractionDigits: 0
