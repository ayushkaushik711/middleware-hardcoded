microservices-middleware/client/cypress/integration/crpOrder.spec.js:1:hardcoded string:/// <reference types='cypress'/>
microservices-middleware/client/cypress/integration/crpOrder.spec.js:3:hardcoded file path:const faker = require('faker');
microservices-middleware/client/cypress/integration/crpOrder.spec.js:5:hardcoded file path:const config = require('../utils/config');
microservices-middleware/client/cypress/integration/crpOrder.spec.js:6:hardcoded file path:const detailsPage = require('../utils/detailsPage');
microservices-middleware/client/cypress/integration/crpOrder.spec.js:7:hardcoded file path:const addressPage = require('../utils/addressPage');
microservices-middleware/client/cypress/integration/crpOrder.spec.js:8:hardcoded file path:const productPage = require('../utils/productPage');
microservices-middleware/client/cypress/integration/crpOrder.spec.js:9:hardcoded file path:const paymentPage = require('../utils/paymentPage');
microservices-middleware/client/cypress/integration/crpOrder.spec.js:10:hardcoded file path:const otpPage = require('../utils/otpPage');
microservices-middleware/client/cypress/integration/crpOrder.spec.js:12:hardcoded string:context('Streaming Order Punching', () => {
microservices-middleware/client/cypress/integration/crpOrder.spec.js:13:hardcoded string:    it('Enter sales person information', () => {
microservices-middleware/client/cypress/integration/crpOrder.spec.js:15:hardcoded number:        const mobile = faker.random.number({ min: 1000000000, max: 9999999999 })
microservices-middleware/client/cypress/integration/crpOrder.spec.js:16:hardcoded variable:        const email = faker.internet.email()
microservices-middleware/client/cypress/integration/crpOrder.spec.js:20:hardcoded string:    it('Enter address information', () => {
microservices-middleware/client/cypress/integration/crpOrder.spec.js:25:hardcoded string:    it('Enter product information', () => {
microservices-middleware/client/cypress/integration/crpOrder.spec.js:27:hardcoded string:        productPage.selectProductType('CRP')
microservices-middleware/client/cypress/integration/crpOrder.spec.js:28:hardcoded string:        productPage.selectSearchableDropDown('crpCity', 'Bangalore')
microservices-middleware/client/cypress/integration/crpOrder.spec.js:29:hardcoded string:        productPage.selectSearchableDropDown('crpBoard', 'CBSE')
microservices-middleware/client/cypress/integration/crpOrder.spec.js:30:hardcoded string:        productPage.selectSearchableDropDown('crpClass', '10')
microservices-middleware/client/cypress/integration/crpOrder.spec.js:31:hardcoded string:        productPage.selectSearchableDropDown('crpValidity', '2020')
microservices-middleware/client/cypress/integration/crpOrder.spec.js:32:hardcoded string:        productPage.validatePrices('NON_EMI')
microservices-middleware/client/cypress/integration/crpOrder.spec.js:36:hardcoded string:    it("Enter payment information", () => {
microservices-middleware/client/cypress/integration/crpOrder.spec.js:38:hardcoded string:        paymentPage.selectPaymentDetails('IMPS', "70000")
microservices-middleware/client/cypress/integration/productSrceen.spec.js:1:hardcoded string:/// <reference types='cypress'/>
microservices-middleware/client/cypress/integration/productSrceen.spec.js:3:hardcoded file path:const faker = require('faker');
microservices-middleware/client/cypress/integration/productSrceen.spec.js:5:hardcoded file path:const config = require('../utils/config');
microservices-middleware/client/cypress/integration/productSrceen.spec.js:6:hardcoded file path:const detailsPage = require('../utils/detailsPage');
microservices-middleware/client/cypress/integration/productSrceen.spec.js:7:hardcoded file path:const addressPage = require('../utils/addressPage');
microservices-middleware/client/cypress/integration/productSrceen.spec.js:8:hardcoded file path:const productPage = require('../utils/productPage');
microservices-middleware/client/cypress/integration/productSrceen.spec.js:9:hardcoded file path:const paymentPage = require('../utils/paymentPage');
microservices-middleware/client/cypress/integration/productSrceen.spec.js:10:hardcoded file path:const otpPage = require('../utils/otpPage');
microservices-middleware/client/cypress/integration/productSrceen.spec.js:12:hardcoded string:context('e2e validations in ProductScreen', () => {
microservices-middleware/client/cypress/integration/productSrceen.spec.js:13:hardcoded string:    it('Enter sales person information', () => {
microservices-middleware/client/cypress/integration/productSrceen.spec.js:15:hardcoded number:        const mobile = faker.random.number({ min: 1000000000, max: 9999999999 })
microservices-middleware/client/cypress/integration/productSrceen.spec.js:16:hardcoded variable:        const email = faker.internet.email()
microservices-middleware/client/cypress/integration/productSrceen.spec.js:21:hardcoded string:    it('Enter address information', () => {
microservices-middleware/client/cypress/integration/productSrceen.spec.js:27:hardcoded variable:    const verifyElementsInnerText = ($actualEl, expectedValue) => {
microservices-middleware/client/cypress/integration/productSrceen.spec.js:31:hardcoded string:    it('Verify all product types', () => {
microservices-middleware/client/cypress/integration/productSrceen.spec.js:32:hardcoded string:        cy.get('label > span:nth-child(2)').then(($el) => {
microservices-middleware/client/cypress/integration/productSrceen.spec.js:33:hardcoded string:            const productTypeArray = ["Single", "Combo", "Sibling", "Streaming", "Competitive", "CRP", "CRP Competitive"];
microservices-middleware/client/cypress/integration/productSrceen.spec.js:40:hardcoded string:    it('Verify all available syllabus', () => {
microservices-middleware/client/cypress/integration/productSrceen.spec.js:41:hardcoded string:        cy.get('.ant-select-search.ant-select-search--inline')
microservices-middleware/client/cypress/integration/productSrceen.spec.js:42:hardcoded string:            .invoke('show')
microservices-middleware/client/cypress/integration/productSrceen.spec.js:43:hardcoded string:            .get('input#board')
microservices-middleware/client/cypress/integration/productSrceen.spec.js:45:hardcoded string:        cy.get('ul > li[role="option"]').then(($el) => {
microservices-middleware/client/cypress/integration/productSrceen.spec.js:46:hardcoded string:            const productTypeArray = ["CBSE", "ICSE", "STATE"];
microservices-middleware/client/cypress/integration/productSrceen.spec.js:53:hardcoded string:    it('Verify all available state syllabus names', () => {
microservices-middleware/client/cypress/integration/productSrceen.spec.js:54:hardcoded string:        // cy.fixture('productsPageData').as('productData')
microservices-middleware/client/cypress/integration/productSrceen.spec.js:55:hardcoded string:        cy.get('.ant-select-search.ant-select-search--inline')
microservices-middleware/client/cypress/integration/productSrceen.spec.js:56:hardcoded string:            .invoke('show')
microservices-middleware/client/cypress/integration/productSrceen.spec.js:57:hardcoded string:            .get('input#board')
microservices-middleware/client/cypress/integration/productSrceen.spec.js:58:hardcoded string:            .last().type('STATE')
microservices-middleware/client/cypress/integration/productSrceen.spec.js:59:hardcoded string:            .get('.ant-select-dropdown-menu-item-active')
microservices-middleware/client/cypress/integration/productSrceen.spec.js:61:hardcoded string:        cy.get('.ant-select-search.ant-select-search--inline')
microservices-middleware/client/cypress/integration/productSrceen.spec.js:62:hardcoded string:            .invoke('show')
microservices-middleware/client/cypress/integration/productSrceen.spec.js:63:hardcoded string:            .get('input#state')
microservices-middleware/client/cypress/integration/productSrceen.spec.js:65:hardcoded string:        cy.get('ul[role="listbox"] > li').then(($el) => {
microservices-middleware/client/cypress/integration/productSrceen.spec.js:66:hardcoded string:            const productTypeArray = ["STATE", "Kerala", "Maharashtra", "Karnataka", "Tamil Nadu",
microservices-middleware/client/cypress/integration/productSrceen.spec.js:67:hardcoded string:                "Andhra Pradesh", "Telangana", "West Bengal", "Punjab"];
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:1:hardcoded string:/// <reference types='cypress'/>
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:3:hardcoded file path:const faker = require('faker');
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:5:hardcoded file path:const config = require('../utils/config');
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:6:hardcoded file path:const detailsPage = require('../utils/detailsPage');
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:7:hardcoded file path:const addressPage = require('../utils/addressPage');
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:8:hardcoded file path:const productPage = require('../utils/productPage');
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:9:hardcoded file path:const paymentPage = require('../utils/paymentPage');
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:10:hardcoded file path:const otpPage = require('../utils/otpPage');
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:11:hardcoded number:const mobile = faker.random.number({ min: 1000000000, max: 9999999999 })
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:12:hardcoded variable:const email = faker.internet.email()
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:14:hardcoded string:context('Sibling Order Punching', () => {
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:15:hardcoded string:    it('Enter sales person information', () => {
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:17:hardcoded number:        const mobile = faker.random.number({ min: 1000000000, max: 9999999999 })
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:18:hardcoded variable:        const email = faker.internet.email()
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:22:hardcoded string:    it('Enter address information', () => {
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:27:hardcoded string:    it('Enter product information', () => {
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:29:hardcoded string:        productPage.selectProductType('Sibling')
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:30:hardcoded string:        productPage.addSiblingDetails('s1', 1234567890)
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:31:hardcoded string:        productPage.selectBoard('cbse')
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:32:hardcoded string:        productPage.selectInitialClass('4')
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:33:hardcoded string:        productPage.selectFinalClass('8')
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:34:hardcoded string:        productPage.selectValidity('2020')
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:35:hardcoded string:        productPage.selectTablet('Lenovo Calling')
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:38:hardcoded string:        productPage.addSiblingDetails('s2', 1234567890)
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:39:hardcoded string:        productPage.selectBoard('cbse')
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:40:hardcoded string:        productPage.selectInitialClass('8')
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:41:hardcoded string:        productPage.selectFinalClass('8')
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:42:hardcoded string:        productPage.selectValidity('2020')
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:43:hardcoded string:        productPage.selectTablet('Lenovo Calling')
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:44:hardcoded string:        productPage.validatePrices('NON_EMI')
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:48:hardcoded string:    it("Enter payment information", () => {
microservices-middleware/client/cypress/integration/siblingOrder.spec.js:50:hardcoded string:        paymentPage.selectPaymentDetails('IMPS', "98000")
microservices-middleware/client/cypress/integration/codPayment.spec.js:1:hardcoded string:/// <reference types='cypress'/>
microservices-middleware/client/cypress/integration/codPayment.spec.js:3:hardcoded file path:const faker = require('faker');
microservices-middleware/client/cypress/integration/codPayment.spec.js:5:hardcoded file path:const config = require('../utils/config');
microservices-middleware/client/cypress/integration/codPayment.spec.js:6:hardcoded file path:const detailsPage = require('../utils/detailsPage');
microservices-middleware/client/cypress/integration/codPayment.spec.js:7:hardcoded file path:const addressPage = require('../utils/addressPage');
microservices-middleware/client/cypress/integration/codPayment.spec.js:8:hardcoded file path:const productPage = require('../utils/productPage');
microservices-middleware/client/cypress/integration/codPayment.spec.js:9:hardcoded file path:const paymentPage = require('../utils/paymentPage');
microservices-middleware/client/cypress/integration/codPayment.spec.js:10:hardcoded file path:const otpPage = require('../utils/otpPage');
microservices-middleware/client/cypress/integration/codPayment.spec.js:12:hardcoded string:context('COD payment validation', () => {
microservices-middleware/client/cypress/integration/codPayment.spec.js:13:hardcoded string:    it('Enter sales person information', () => {
microservices-middleware/client/cypress/integration/codPayment.spec.js:15:hardcoded number:        const mobile = faker.random.number({ min: 1000000000, max: 9999999999 })
microservices-middleware/client/cypress/integration/codPayment.spec.js:16:hardcoded variable:        const email = faker.internet.email()
microservices-middleware/client/cypress/integration/codPayment.spec.js:20:hardcoded string:    it('Enter address information', () => {
microservices-middleware/client/cypress/integration/codPayment.spec.js:25:hardcoded string:    it('Enter product information', () => {
microservices-middleware/client/cypress/integration/codPayment.spec.js:27:hardcoded string:        productPage.selectProductType('Combo')
microservices-middleware/client/cypress/integration/codPayment.spec.js:28:hardcoded string:        productPage.selectBoard('cbse')
microservices-middleware/client/cypress/integration/codPayment.spec.js:29:hardcoded string:        productPage.selectInitialClass('4')
microservices-middleware/client/cypress/integration/codPayment.spec.js:30:hardcoded string:        productPage.selectFinalClass('8')
microservices-middleware/client/cypress/integration/codPayment.spec.js:31:hardcoded string:        productPage.selectValidity('2020')
microservices-middleware/client/cypress/integration/codPayment.spec.js:32:hardcoded string:        productPage.selectTablet('Lenovo Calling')
microservices-middleware/client/cypress/integration/codPayment.spec.js:33:hardcoded string:        productPage.validatePrices('NON_EMI')
microservices-middleware/client/cypress/integration/codPayment.spec.js:37:hardcoded string:    it("Enter payment information", () => {
microservices-middleware/client/cypress/integration/codPayment.spec.js:39:hardcoded number:        const totalAmount = 87000
microservices-middleware/client/cypress/integration/codPayment.spec.js:40:hardcoded number:        const codAmount = totalAmount - (0.1 * 87000)
microservices-middleware/client/cypress/integration/codPayment.spec.js:41:hardcoded variable:        const dpAmount = totalAmount - codAmount
microservices-middleware/client/cypress/integration/codPayment.spec.js:42:hardcoded string:        cy.get('.ant-drawer-content .ant-btn-primary').click()
microservices-middleware/client/cypress/integration/codPayment.spec.js:43:hardcoded string:        cy.get('.ant-select-search.ant-select-search--inline')
microservices-middleware/client/cypress/integration/codPayment.spec.js:44:hardcoded string:            .invoke('show')
microservices-middleware/client/cypress/integration/codPayment.spec.js:45:hardcoded string:            .get('input#provider')
microservices-middleware/client/cypress/integration/codPayment.spec.js:46:hardcoded string:            .last().type('Cash On Delivery')
microservices-middleware/client/cypress/integration/codPayment.spec.js:47:hardcoded string:            .get('.ant-select-dropdown-menu-item-active')
microservices-middleware/client/cypress/integration/codPayment.spec.js:49:hardcoded string:        cy.get('input[name="amount"]').type(codAmount)
microservices-middleware/client/cypress/integration/codPayment.spec.js:50:hardcoded string:        cy.get('.btn-success')
microservices-middleware/client/cypress/integration/codPayment.spec.js:52:hardcoded string:        cy.get('.ant-select-search.ant-select-search--inline')
microservices-middleware/client/cypress/integration/codPayment.spec.js:53:hardcoded string:            .invoke('show')
microservices-middleware/client/cypress/integration/codPayment.spec.js:54:hardcoded string:            .get('input#provider')
microservices-middleware/client/cypress/integration/codPayment.spec.js:55:hardcoded string:            .last().type('IMPS')
microservices-middleware/client/cypress/integration/codPayment.spec.js:56:hardcoded string:            .get('.ant-select-dropdown-menu-item-active')
microservices-middleware/client/cypress/integration/codPayment.spec.js:58:hardcoded string:        cy.get('input[name="referenceId"]').last()
microservices-middleware/client/cypress/integration/codPayment.spec.js:59:hardcoded number:            .type(faker.random.alphaNumeric(18))
microservices-middleware/client/cypress/integration/codPayment.spec.js:60:hardcoded string:        const dpAmountTextBox = ':nth-child(3) > .card-body > .ant-form > :nth-child(3) > .ant-form-item-control-wrapper > .ant-form-item-control > .ant-form-item-children > .ant-input-number > .ant-input-number-input-wrap > #amount'
microservices-middleware/client/cypress/integration/codPayment.spec.js:61:hardcoded string:        cy.get('input[name="amount"]').last()
microservices-middleware/client/cypress/integration/codPayment.spec.js:63:hardcoded string:        cy.get('textarea[name="comments"]').type('Test Order')
microservices-middleware/client/cypress/integration/codPayment.spec.js:64:hardcoded string:        cy.get('.next-btn').click()
microservices-middleware/client/cypress/integration/impsPayment.spec.js:1:hardcoded string:/// <reference types='cypress'/>
microservices-middleware/client/cypress/integration/impsPayment.spec.js:3:hardcoded file path:const faker = require('faker');
microservices-middleware/client/cypress/integration/impsPayment.spec.js:5:hardcoded file path:const config = require('../utils/config');
microservices-middleware/client/cypress/integration/impsPayment.spec.js:6:hardcoded file path:const detailsPage = require('../utils/detailsPage');
microservices-middleware/client/cypress/integration/impsPayment.spec.js:7:hardcoded file path:const addressPage = require('../utils/addressPage');
microservices-middleware/client/cypress/integration/impsPayment.spec.js:8:hardcoded file path:const productPage = require('../utils/productPage');
microservices-middleware/client/cypress/integration/impsPayment.spec.js:9:hardcoded file path:const paymentPage = require('../utils/paymentPage');
microservices-middleware/client/cypress/integration/impsPayment.spec.js:10:hardcoded file path:const otpPage = require('../utils/otpPage');
microservices-middleware/client/cypress/integration/impsPayment.spec.js:12:hardcoded string:context('IMPS payment validation', () => {
microservices-middleware/client/cypress/integration/impsPayment.spec.js:13:hardcoded string:    it('Enter sales person information', () => {
microservices-middleware/client/cypress/integration/impsPayment.spec.js:15:hardcoded number:        const mobile = faker.random.number({ min: 1000000000, max: 9999999999 })
microservices-middleware/client/cypress/integration/impsPayment.spec.js:16:hardcoded variable:        const email = faker.internet.email()
microservices-middleware/client/cypress/integration/impsPayment.spec.js:20:hardcoded string:    it('Enter address information', () => {
microservices-middleware/client/cypress/integration/impsPayment.spec.js:25:hardcoded string:    it('Enter product information', () => {
microservices-middleware/client/cypress/integration/impsPayment.spec.js:27:hardcoded string:        productPage.selectProductType('Combo')
microservices-middleware/client/cypress/integration/impsPayment.spec.js:28:hardcoded string:        productPage.selectBoard('cbse')
microservices-middleware/client/cypress/integration/impsPayment.spec.js:29:hardcoded string:        productPage.selectInitialClass('4')
microservices-middleware/client/cypress/integration/impsPayment.spec.js:30:hardcoded string:        productPage.selectFinalClass('8')
microservices-middleware/client/cypress/integration/impsPayment.spec.js:31:hardcoded string:        productPage.selectValidity('2020')
microservices-middleware/client/cypress/integration/impsPayment.spec.js:32:hardcoded string:        productPage.selectTablet('Lenovo Calling')
microservices-middleware/client/cypress/integration/impsPayment.spec.js:33:hardcoded string:        productPage.validatePrices('NON_EMI')
microservices-middleware/client/cypress/integration/impsPayment.spec.js:37:hardcoded string:    it("Enter payment information", () => {
microservices-middleware/client/cypress/integration/impsPayment.spec.js:39:hardcoded string:        paymentPage.selectPaymentDetails('IMPS', "87000")
microservices-middleware/client/cypress/integration/neftPayment.spec.js:1:hardcoded string:/// <reference types='cypress'/>
microservices-middleware/client/cypress/integration/neftPayment.spec.js:3:hardcoded file path:const faker = require('faker');
microservices-middleware/client/cypress/integration/neftPayment.spec.js:5:hardcoded file path:const config = require('../utils/config');
microservices-middleware/client/cypress/integration/neftPayment.spec.js:6:hardcoded file path:const detailsPage = require('../utils/detailsPage');
microservices-middleware/client/cypress/integration/neftPayment.spec.js:7:hardcoded file path:const addressPage = require('../utils/addressPage');
microservices-middleware/client/cypress/integration/neftPayment.spec.js:8:hardcoded file path:const productPage = require('../utils/productPage');
microservices-middleware/client/cypress/integration/neftPayment.spec.js:9:hardcoded file path:const paymentPage = require('../utils/paymentPage');
microservices-middleware/client/cypress/integration/neftPayment.spec.js:10:hardcoded file path:const otpPage = require('../utils/otpPage');
microservices-middleware/client/cypress/integration/neftPayment.spec.js:12:hardcoded string:context('NEFT payment validation', () => {
microservices-middleware/client/cypress/integration/neftPayment.spec.js:13:hardcoded string:    it('Enter sales person information', () => {
microservices-middleware/client/cypress/integration/neftPayment.spec.js:15:hardcoded number:        const mobile = faker.random.number({ min: 1000000000, max: 9999999999 })
microservices-middleware/client/cypress/integration/neftPayment.spec.js:16:hardcoded variable:        const email = faker.internet.email()
microservices-middleware/client/cypress/integration/neftPayment.spec.js:20:hardcoded string:    it('Enter address information', () => {
microservices-middleware/client/cypress/integration/neftPayment.spec.js:25:hardcoded string:    it('Enter product information', () => {
microservices-middleware/client/cypress/integration/neftPayment.spec.js:27:hardcoded string:        productPage.selectProductType('Combo')
microservices-middleware/client/cypress/integration/neftPayment.spec.js:28:hardcoded string:        productPage.selectBoard('cbse')
microservices-middleware/client/cypress/integration/neftPayment.spec.js:29:hardcoded string:        productPage.selectInitialClass('4')
microservices-middleware/client/cypress/integration/neftPayment.spec.js:30:hardcoded string:        productPage.selectFinalClass('8')
microservices-middleware/client/cypress/integration/neftPayment.spec.js:31:hardcoded string:        productPage.selectValidity('2020')
microservices-middleware/client/cypress/integration/neftPayment.spec.js:32:hardcoded string:        productPage.selectTablet('Lenovo Calling')
microservices-middleware/client/cypress/integration/neftPayment.spec.js:33:hardcoded string:        productPage.validatePrices('NON_EMI')
microservices-middleware/client/cypress/integration/neftPayment.spec.js:37:hardcoded string:    it("Enter payment information", () => {
microservices-middleware/client/cypress/integration/neftPayment.spec.js:39:hardcoded string:        paymentPage.selectPaymentDetails('NEFT', "87000")
microservices-middleware/client/cypress/integration/comboOrder.spec.js:1:hardcoded string:/// <reference types='cypress'/>
microservices-middleware/client/cypress/integration/comboOrder.spec.js:3:hardcoded file path:const faker = require('faker');
microservices-middleware/client/cypress/integration/comboOrder.spec.js:5:hardcoded file path:const config = require('../utils/config');
microservices-middleware/client/cypress/integration/comboOrder.spec.js:6:hardcoded file path:const detailsPage = require('../utils/detailsPage');
microservices-middleware/client/cypress/integration/comboOrder.spec.js:7:hardcoded file path:const addressPage = require('../utils/addressPage');
microservices-middleware/client/cypress/integration/comboOrder.spec.js:8:hardcoded file path:const productPage = require('../utils/productPage');
microservices-middleware/client/cypress/integration/comboOrder.spec.js:9:hardcoded file path:const paymentPage = require('../utils/paymentPage');
microservices-middleware/client/cypress/integration/comboOrder.spec.js:10:hardcoded file path:const otpPage = require('../utils/otpPage');
microservices-middleware/client/cypress/integration/comboOrder.spec.js:12:hardcoded string:context('Combo Order Punching', () => {
microservices-middleware/client/cypress/integration/comboOrder.spec.js:13:hardcoded string:    it('Enter sales person information', () => {
microservices-middleware/client/cypress/integration/comboOrder.spec.js:15:hardcoded number:        const mobile = faker.random.number({ min: 1000000000, max: 9999999999 })
microservices-middleware/client/cypress/integration/comboOrder.spec.js:16:hardcoded variable:        const email = faker.internet.email()
microservices-middleware/client/cypress/integration/comboOrder.spec.js:20:hardcoded string:    it('Enter address information', () => {
microservices-middleware/client/cypress/integration/comboOrder.spec.js:25:hardcoded string:    it('Enter product information', () => {
microservices-middleware/client/cypress/integration/comboOrder.spec.js:27:hardcoded string:        productPage.selectProductType('Combo')
microservices-middleware/client/cypress/integration/comboOrder.spec.js:28:hardcoded string:        productPage.selectBoard('cbse')
microservices-middleware/client/cypress/integration/comboOrder.spec.js:29:hardcoded string:        productPage.selectInitialClass('4')
microservices-middleware/client/cypress/integration/comboOrder.spec.js:30:hardcoded string:        productPage.selectFinalClass('8')
microservices-middleware/client/cypress/integration/comboOrder.spec.js:31:hardcoded string:        productPage.selectValidity('2020')
microservices-middleware/client/cypress/integration/comboOrder.spec.js:32:hardcoded string:        productPage.selectTablet('Lenovo Calling')
microservices-middleware/client/cypress/integration/comboOrder.spec.js:33:hardcoded string:        productPage.validatePrices('NON_EMI')
microservices-middleware/client/cypress/integration/comboOrder.spec.js:37:hardcoded string:    it("Enter payment information", () => {
microservices-middleware/client/cypress/integration/comboOrder.spec.js:39:hardcoded string:        paymentPage.selectPaymentDetails('IMPS', "87000")
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:1:hardcoded string:/// <reference types='cypress'/>
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:3:hardcoded file path:const config = require('../utils/config');
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:5:hardcoded string:context('Checking used mobile numbers', () => {
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:6:hardcoded string:    it('Enter used mobile numbers', () => {
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:9:hardcoded string:        //cy.fixture('salesPersonDetails').as('salesPersonDetails')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:10:hardcoded string:        cy.route('POST', '/api/details/getSalesPersonDetails').as('salesInfoLoad')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:11:hardcoded string:        cy.route('POST', '/api/details/saveSalesAndCustomerDetails').as('saveSalesAndCustomerDetails')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:12:hardcoded object:        cy.visit(`/details${config.extendedUrl}`, {
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:17:hardcoded string:        cy.wait('@salesInfoLoad').then((xhr) => {
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:18:hardcoded string:            cy.wrap(xhr.response.body.docs).should('have.length', 50);
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:20:hardcoded string:        cy.get('.ant-select-search.ant-select-search--inline')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:21:hardcoded string:            .invoke('show')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:22:hardcoded string:            .get('input#directSalesBy')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:24:hardcoded string:            .get('.ant-select-dropdown-menu-item-active')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:26:hardcoded string:        cy.get('.ant-select-search.ant-select-search--inline')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:27:hardcoded string:            .invoke('show')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:28:hardcoded string:            .get('input#salesAppointmentBy')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:30:hardcoded string:            .get('.ant-select-dropdown-menu-item-active')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:32:hardcoded string:        cy.get('input[name="studentName"]')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:34:hardcoded string:            .type('Test Student Name')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:35:hardcoded string:        cy.get('.ant-select-search.ant-select-search--inline')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:36:hardcoded string:            .invoke('show')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:37:hardcoded string:            .get('input#studentCountryCode')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:38:hardcoded string:            .last().type('7840')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:39:hardcoded string:            .get('.ant-select-dropdown-menu-item-active')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:41:hardcoded string:        cy.get('input[name="studentMobileNo"]')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:43:hardcoded string:            .type('1234567890')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:44:hardcoded string:        cy.get('input[name="parentName"]')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:46:hardcoded string:            .type('Test Parent Name')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:47:hardcoded string:        cy.get('.ant-select-search.ant-select-search--inline')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:48:hardcoded string:            .invoke('show')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:49:hardcoded string:            .get('input#parentCountryCode')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:50:hardcoded string:            .last().type('7840')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:51:hardcoded string:            .get('.ant-select-dropdown-menu-item-active')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:53:hardcoded string:        cy.get('input[name="parentMobileNo"]')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:55:hardcoded string:            .type('1234567890')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:56:hardcoded string:        cy.get('input[name="email"]')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:58:hardcoded string:            .type('testemail@byjus.com')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:59:hardcoded string:        cy.get('.next-btn')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:61:hardcoded string:        cy.wait('@saveSalesAndCustomerDetails').then((xhr) => {
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:62:hardcoded variable:            const response = xhr.response.body;
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:63:hardcoded object:            const errorMessages = Object.values(response.errors || {});
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:64:hardcoded number:            expect(xhr.status).to.equal(400)
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:66:hardcoded number:            expect(errorMessages).to.have.lengthOf(2)
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:67:hardcoded string:            expect(errorMessages[0]).to.equal("Student mobile number already exists");
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:68:hardcoded string:            expect(errorMessages[1]).to.equal("Parent mobile number already exists");
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:71:hardcoded string:    it('Reusing mobile numbers with reason as Privileged User', () => {
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:72:hardcoded number:        // Verify the duplicate mobile numbers should allow with 70 Char reason for a Privileged User
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:73:hardcoded string:        const duplicateReason = 'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ123456781234567890';
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:75:hardcoded string:        cy.route('POST', '/api/details/saveSalesAndCustomerDetails').as('saveSalesAndCustomerDetails')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:76:hardcoded string:        cy.get('input[name="email"]')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:78:hardcoded string:            .type('sonuthegreatest298989898875@gmail.com')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:79:hardcoded string:        cy.get('#duplicateReason')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:82:hardcoded string:        cy.get('.next-btn')
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:84:hardcoded string:        cy.wait('@saveSalesAndCustomerDetails').then((xhr) => {
microservices-middleware/client/cypress/integration/usedMobileAndEmail.spec.js:85:hardcoded number:            expect(xhr.status).to.equal(200)
microservices-middleware/client/cypress/integration/streamingOrder.spec.js:1:hardcoded string:/// <reference types='cypress'/>
microservices-middleware/client/cypress/integration/streamingOrder.spec.js:3:hardcoded file path:const faker = require('faker');
microservices-middleware/client/cypress/integration/streamingOrder.spec.js:5:hardcoded file path:const config = require('../utils/config');
microservices-middleware/client/cypress/integration/streamingOrder.spec.js:6:hardcoded file path:const detailsPage = require('../utils/detailsPage');
microservices-middleware/client/cypress/integration/streamingOrder.spec.js:7:hardcoded file path:const addressPage = require('../utils/addressPage');
microservices-middleware/client/cypress/integration/streamingOrder.spec.js:8:hardcoded file path:const productPage = require('../utils/productPage');
microservices-middleware/client/cypress/integration/streamingOrder.spec.js:9:hardcoded file path:const paymentPage = require('../utils/paymentPage');
microservices-middleware/client/cypress/integration/streamingOrder.spec.js:10:hardcoded file path:const otpPage = require('../utils/otpPage');
microservices-middleware/client/cypress/integration/streamingOrder.spec.js:12:hardcoded string:context('Streaming Order Punching', () => {
microservices-middleware/client/cypress/integration/streamingOrder.spec.js:13:hardcoded string:    it('Enter sales person information', () => {
microservices-middleware/client/cypress/integration/streamingOrder.spec.js:15:hardcoded number:        const mobile = faker.random.number({ min: 1000000000, max: 9999999999 })
microservices-middleware/client/cypress/integration/streamingOrder.spec.js:16:hardcoded variable:        const email = faker.internet.email()
microservices-middleware/client/cypress/integration/streamingOrder.spec.js:20:hardcoded string:    it('Enter address information', () => {
microservices-middleware/client/cypress/integration/streamingOrder.spec.js:25:hardcoded string:    it('Enter product information', () => {
microservices-middleware/client/cypress/integration/streamingOrder.spec.js:27:hardcoded string:        productPage.selectProductType('Streaming')
microservices-middleware/client/cypress/integration/streamingOrder.spec.js:28:hardcoded string:        productPage.selectInitialClass('4')
microservices-middleware/client/cypress/integration/streamingOrder.spec.js:29:hardcoded string:        productPage.selectFinalClass('8')
microservices-middleware/client/cypress/integration/streamingOrder.spec.js:30:hardcoded string:        productPage.selectValidity('2020')
microservices-middleware/client/cypress/integration/streamingOrder.spec.js:31:hardcoded string:        productPage.selectTablet('Lenovo Calling')
microservices-middleware/client/cypress/integration/streamingOrder.spec.js:32:hardcoded string:        productPage.addMentoring('1')
microservices-middleware/client/cypress/integration/streamingOrder.spec.js:33:hardcoded string:        productPage.validatePrices('NON_EMI')
microservices-middleware/client/cypress/integration/streamingOrder.spec.js:37:hardcoded string:    it("Enter payment information", () => {
microservices-middleware/client/cypress/integration/streamingOrder.spec.js:39:hardcoded string:        paymentPage.selectPaymentDetails('IMPS', "107000")
microservices-middleware/client/cypress/integration/singleOrder.spec.js:1:hardcoded string:/// <reference types='cypress'/>
microservices-middleware/client/cypress/integration/singleOrder.spec.js:3:hardcoded file path:const faker = require('faker');
microservices-middleware/client/cypress/integration/singleOrder.spec.js:5:hardcoded file path:const config = require('../utils/config');
microservices-middleware/client/cypress/integration/singleOrder.spec.js:6:hardcoded file path:const detailsPage = require('../utils/detailsPage');
microservices-middleware/client/cypress/integration/singleOrder.spec.js:7:hardcoded file path:const addressPage = require('../utils/addressPage');
microservices-middleware/client/cypress/integration/singleOrder.spec.js:8:hardcoded file path:const productPage = require('../utils/productPage');
microservices-middleware/client/cypress/integration/singleOrder.spec.js:9:hardcoded file path:const paymentPage = require('../utils/paymentPage');
microservices-middleware/client/cypress/integration/singleOrder.spec.js:10:hardcoded file path:const otpPage = require('../utils/otpPage');
microservices-middleware/client/cypress/integration/singleOrder.spec.js:12:hardcoded string:context('Single Order Punching', () => {
microservices-middleware/client/cypress/integration/singleOrder.spec.js:13:hardcoded string:    it('Enter sales person information', () => {
microservices-middleware/client/cypress/integration/singleOrder.spec.js:15:hardcoded number:        const mobile = faker.random.number({ min: 1000000000, max: 9999999999 })
microservices-middleware/client/cypress/integration/singleOrder.spec.js:16:hardcoded variable:        const email = faker.internet.email()
microservices-middleware/client/cypress/integration/singleOrder.spec.js:20:hardcoded string:    it('Enter address information', () => {
microservices-middleware/client/cypress/integration/singleOrder.spec.js:25:hardcoded string:    it('Enter product information', () => {
microservices-middleware/client/cypress/integration/singleOrder.spec.js:28:hardcoded string:        productPage.selectProductType('Single')
microservices-middleware/client/cypress/integration/singleOrder.spec.js:29:hardcoded string:        productPage.selectBoard('cbse')
microservices-middleware/client/cypress/integration/singleOrder.spec.js:30:hardcoded string:        productPage.selectInitialClass('6')
microservices-middleware/client/cypress/integration/singleOrder.spec.js:31:hardcoded string:        productPage.selectValidity('2020')
microservices-middleware/client/cypress/integration/singleOrder.spec.js:32:hardcoded string:        productPage.selectTablet('Lenovo Calling')
microservices-middleware/client/cypress/integration/singleOrder.spec.js:33:hardcoded string:        productPage.validatePrices('NON_EMI')
microservices-middleware/client/cypress/integration/singleOrder.spec.js:37:hardcoded string:    it("Enter payment information", () => {
microservices-middleware/client/cypress/integration/singleOrder.spec.js:39:hardcoded string:        paymentPage.selectPaymentDetails('IMPS', 27000)
microservices-middleware/client/cypress/integration/crpCompetitiveOrder.spec.js:1:hardcoded string:/// <reference types='cypress'/>
microservices-middleware/client/cypress/integration/crpCompetitiveOrder.spec.js:3:hardcoded file path:const faker = require('faker');
microservices-middleware/client/cypress/integration/crpCompetitiveOrder.spec.js:5:hardcoded file path:const config = require('../utils/config');
microservices-middleware/client/cypress/integration/crpCompetitiveOrder.spec.js:6:hardcoded file path:const detailsPage = require('../utils/detailsPage');
microservices-middleware/client/cypress/integration/crpCompetitiveOrder.spec.js:7:hardcoded file path:const addressPage = require('../utils/addressPage');
microservices-middleware/client/cypress/integration/crpCompetitiveOrder.spec.js:8:hardcoded file path:const productPage = require('../utils/productPage');
microservices-middleware/client/cypress/integration/crpCompetitiveOrder.spec.js:9:hardcoded file path:const paymentPage = require('../utils/paymentPage');
microservices-middleware/client/cypress/integration/crpCompetitiveOrder.spec.js:10:hardcoded file path:const otpPage = require('../utils/otpPage');
microservices-middleware/client/cypress/integration/crpCompetitiveOrder.spec.js:12:hardcoded string:context('Streaming Order Punching', () => {
microservices-middleware/client/cypress/integration/crpCompetitiveOrder.spec.js:13:hardcoded string:    it('Enter sales person information', () => {
microservices-middleware/client/cypress/integration/crpCompetitiveOrder.spec.js:15:hardcoded number:        const mobile = faker.random.number({ min: 1000000000, max: 9999999999 })
microservices-middleware/client/cypress/integration/crpCompetitiveOrder.spec.js:16:hardcoded variable:        const email = faker.internet.email()
microservices-middleware/client/cypress/integration/crpCompetitiveOrder.spec.js:20:hardcoded string:    it('Enter address information', () => {
microservices-middleware/client/cypress/integration/crpCompetitiveOrder.spec.js:25:hardcoded string:    it('Enter product information', () => {
microservices-middleware/client/cypress/integration/crpCompetitiveOrder.spec.js:27:hardcoded string:        productPage.selectProductType('CRP Competitive')
microservices-middleware/client/cypress/integration/crpCompetitiveOrder.spec.js:28:hardcoded string:        productPage.selectSearchableDropDown('crpCity', 'Bangalore')
microservices-middleware/client/cypress/integration/crpCompetitiveOrder.spec.js:29:hardcoded string:        productPage.selectSearchableDropDown('course', 'IAS')
microservices-middleware/client/cypress/integration/crpCompetitiveOrder.spec.js:30:hardcoded string:        productPage.selectValidity('2020')
microservices-middleware/client/cypress/integration/crpCompetitiveOrder.spec.js:31:hardcoded string:        productPage.selectTablet('IAS')
microservices-middleware/client/cypress/integration/crpCompetitiveOrder.spec.js:32:hardcoded string:        productPage.validatePrices('NON_EMI')
microservices-middleware/client/cypress/integration/crpCompetitiveOrder.spec.js:36:hardcoded string:    it("Enter payment information", () => {
microservices-middleware/client/cypress/integration/crpCompetitiveOrder.spec.js:38:hardcoded string:        paymentPage.selectPaymentDetails('IMPS', "120750")
microservices-middleware/client/cypress/integration/competitiveOrder.spec.js:1:hardcoded string:/// <reference types='cypress'/>
microservices-middleware/client/cypress/integration/competitiveOrder.spec.js:3:hardcoded file path:const faker = require('faker');
microservices-middleware/client/cypress/integration/competitiveOrder.spec.js:5:hardcoded file path:const config = require('../utils/config');
microservices-middleware/client/cypress/integration/competitiveOrder.spec.js:6:hardcoded file path:const detailsPage = require('../utils/detailsPage');
microservices-middleware/client/cypress/integration/competitiveOrder.spec.js:7:hardcoded file path:const addressPage = require('../utils/addressPage');
microservices-middleware/client/cypress/integration/competitiveOrder.spec.js:8:hardcoded file path:const productPage = require('../utils/productPage');
microservices-middleware/client/cypress/integration/competitiveOrder.spec.js:9:hardcoded file path:const paymentPage = require('../utils/paymentPage');
microservices-middleware/client/cypress/integration/competitiveOrder.spec.js:10:hardcoded file path:const otpPage = require('../utils/otpPage');
microservices-middleware/client/cypress/integration/competitiveOrder.spec.js:12:hardcoded string:context('Streaming Order Punching', () => {
microservices-middleware/client/cypress/integration/competitiveOrder.spec.js:13:hardcoded string:    it('Enter sales person information', () => {
microservices-middleware/client/cypress/integration/competitiveOrder.spec.js:15:hardcoded number:        const mobile = faker.random.number({ min: 1000000000, max: 9999999999 })
microservices-middleware/client/cypress/integration/competitiveOrder.spec.js:16:hardcoded variable:        const email = faker.internet.email()
microservices-middleware/client/cypress/integration/competitiveOrder.spec.js:20:hardcoded string:    it('Enter address information', () => {
microservices-middleware/client/cypress/integration/competitiveOrder.spec.js:25:hardcoded string:    it('Enter product information', () => {
microservices-middleware/client/cypress/integration/competitiveOrder.spec.js:27:hardcoded string:        productPage.selectProductType('Competitive')
microservices-middleware/client/cypress/integration/competitiveOrder.spec.js:28:hardcoded string:        productPage.selectSearchableDropDown('course', 'IAS')
microservices-middleware/client/cypress/integration/competitiveOrder.spec.js:29:hardcoded string:        productPage.selectSearchableDropDown('language', 'English')
microservices-middleware/client/cypress/integration/competitiveOrder.spec.js:30:hardcoded string:        productPage.selectSearchableDropDown('type', 'New')
microservices-middleware/client/cypress/integration/competitiveOrder.spec.js:31:hardcoded string:        productPage.selectValidity('2020')
microservices-middleware/client/cypress/integration/competitiveOrder.spec.js:32:hardcoded string:        productPage.selectTablet('IAS')
microservices-middleware/client/cypress/integration/competitiveOrder.spec.js:33:hardcoded string:        productPage.validatePrices('NON_EMI')
microservices-middleware/client/cypress/integration/competitiveOrder.spec.js:37:hardcoded string:    it("Enter payment information", () => {
microservices-middleware/client/cypress/integration/competitiveOrder.spec.js:39:hardcoded string:        paymentPage.selectPaymentDetails('IMPS', "70750")
